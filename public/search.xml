<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC工作流程</title>
      <link href="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h1><p>SpringMVC几大核心组件</p><ul><li><code>DispatcherServlet</code>：所有请求的入口，所有请求都会被打到这个<code>servlet</code>上，由它来做<strong>统筹</strong></li><li><code>RequestHandlerMapping</code>：由它来做请求的匹配，返回一个处理本次请求的<code>HandlerExecutionChain</code></li><li><code>RequestHandlerAdapter</code>：由它来做handler的适配，执行业务逻辑</li><li><code>ViewResolver</code>：由它做视图解析</li><li><code>HandlerExceptionResolver</code>：当出现异常的时候由它来做处理</li></ul><p>下面从统筹者逐步分析工作流程</p><h2 id="DispatcherServlet的继承体系"><a href="#DispatcherServlet的继承体系" class="headerlink" title="DispatcherServlet的继承体系"></a><code>DispatcherServlet</code>的继承体系</h2><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814184804721.png" class title="image-20230814184804721"><p>通过继承体系可以得知以下几点</p><p>1、<code>DispatcherServlet</code>本质上是一个<code>servlet</code></p><p>2、内部注入了</p><ul><li><code>Environment</code>：项目的运行环境</li><li><code>ApplicationContext</code>：Spring容器</li></ul><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a><code>Servlet</code>的生命周期</h2><p>回顾一下<code>Servlet</code>的生命周期</p><ul><li><code>init</code>：在servlet被<strong>初始化</strong>的时候执行</li><li><code>service</code>：在<strong>接收请求</strong>的时候执行该方法</li><li><code>destory</code>：被<strong>销毁</strong>的时候执行该方法</li></ul><p>刚刚说了<code>DispatcherServlet</code>本质上就是<code>Servlet</code>，那就一定也有这三个生命周期</p><h3 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h3><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814191249786.png" class title="image-20230814191249786"><p>可以看到这三个方法就对应着三个生命周期</p><h3 id="初始化init"><a href="#初始化init" class="headerlink" title="初始化init"></a>初始化<code>init</code></h3><p>这里我们采用从上往下找，也就是从父类往子类找</p><h4 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a><code>GenericServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814191734475.png" class title="image-20230814191734475"><h4 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a><code>HttpServlet</code></h4><p>此类中没有定义初始化的逻辑</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814191921944.png" class title="image-20230814191921944"><h4 id="HttpServletBean"><a href="#HttpServletBean" class="headerlink" title="HttpServletBean"></a><code>HttpServletBean</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814192156083.png" class title="image-20230814192156083"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814192228034.png" class title="image-20230814192228034"><h4 id="FrameworkServlet"><a href="#FrameworkServlet" class="headerlink" title="FrameworkServlet"></a><code>FrameworkServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814192606361.png" class title="image-20230814192606361"><h5 id="initWebApplicationContext"><a href="#initWebApplicationContext" class="headerlink" title="initWebApplicationContext"></a><code>initWebApplicationContext</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814193032754.png" class title="image-20230814193032754"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814193248293.png" class title="image-20230814193248293"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814193316698.png" class title="image-20230814193316698"><h4 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a><code>DispatcherServlet</code></h4><p>找<code>onRefresh</code>方法</p><p>终于到<strong>九大护法</strong>出场的时候了</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814193400750.png" class title="image-20230814193400750"><h5 id="initMultipartResolver"><a href="#initMultipartResolver" class="headerlink" title="initMultipartResolver"></a><code>initMultipartResolver</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814194424170.png" class title="image-20230814194424170"><p>可以看到尝试了从容器中拿，找不到就直接赋值为null了</p><p>也就是说，如果我们自己不提供<code>multipartResolver</code>的Bean，我就不装载它</p><blockquote><p>在<code>SpringBoot</code>中是默认加载<code>multipartResolver</code>的</p><p>自动配置类如下</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814194408279.png" class title="image-20230814194408279"><h5 id="initLocaleResolver"><a href="#initLocaleResolver" class="headerlink" title="initLocaleResolver"></a><code>initLocaleResolver</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814194758975.png" class title="image-20230814194758975"><p>可以看到和刚刚的<code>initMultipartResolver</code>差不多</p><p>区别就是就是如果在容器找不到<code>LocaleResolver</code>，<code>DispatcherServlet</code>就会找默认的<code>LocaleResolver</code></p><h6 id="getDefaultStrategy"><a href="#getDefaultStrategy" class="headerlink" title="getDefaultStrategy"></a><code>getDefaultStrategy</code></h6><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814195009045.png" class title="image-20230814195009045"><p>此方法就是返回指定类的默认实现</p><h6 id="getDefaultStrategies"><a href="#getDefaultStrategies" class="headerlink" title="getDefaultStrategies"></a><code>getDefaultStrategies</code></h6><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814195343391.png" class title="image-20230814195343391"><p>在<code>DispatcherServlet</code>的同级目录下找到<code>DispatcherServlet.properties</code>文件</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200115090.png" class title="image-20230814200115090"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200249581.png" class title="image-20230814200249581"><h5 id="initThemeResolver"><a href="#initThemeResolver" class="headerlink" title="initThemeResolver"></a><code>initThemeResolver</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200321432.png" class title="image-20230814200321432"><p>和刚刚的<code>initLocaleResolver</code>一样</p><p>如果在容器中找不到，就直接找默认策略</p><h5 id="initHandlerMappings"><a href="#initHandlerMappings" class="headerlink" title="initHandlerMappings"></a><code>initHandlerMappings</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200716164.png" class title="image-20230814200716164"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200852601.png" class title="image-20230814200852601"><h5 id="initHandlerAdapters"><a href="#initHandlerAdapters" class="headerlink" title="initHandlerAdapters"></a><code>initHandlerAdapters</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814200959223.png" class title="image-20230814200959223"><h5 id="initHandlerExceptionResolvers"><a href="#initHandlerExceptionResolvers" class="headerlink" title="initHandlerExceptionResolvers"></a><code>initHandlerExceptionResolvers</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201056490.png" class title="image-20230814201056490"><h5 id="initRequestToViewNameTranslator"><a href="#initRequestToViewNameTranslator" class="headerlink" title="initRequestToViewNameTranslator"></a><code>initRequestToViewNameTranslator</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201129704.png" class title="image-20230814201129704"><h5 id="initViewResolvers"><a href="#initViewResolvers" class="headerlink" title="initViewResolvers"></a><code>initViewResolvers</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201158727.png" class title="image-20230814201158727"><h5 id="initFlashMapManager"><a href="#initFlashMapManager" class="headerlink" title="initFlashMapManager"></a><code>initFlashMapManager</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201222255.png" class title="image-20230814201222255"><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>好了，初始化流程就这些，是不是很简单😄😄😄</p><p>主要初始化了以下这些组件</p><p>1、<code>MultipartResolver</code>：处理文件上传的</p><p>2、<code>LocaleResolver</code>：国际化相关组件</p><p>3、<code>ThemeResolver</code></p><p>4、<code>HandlerMappings</code>：匹配请求路径，创建对应的<code>HandlerExecutionChain</code></p><p>5、<code>HandlerAdapters</code>：根据刚刚创建的<code>HandlerExecutionChain</code>中的<code>Handler</code>匹配对应的<code>HandlerAdapter</code></p><p>6、<code>HandlerExceptionResolvers</code>：异常解析器</p><p>7、<code>RequestToViewNameTranslator</code>：将请求路径转化为视图名</p><p>8、<code>ViewResolvers</code>：视图解析器，解析<code>ModelAndView</code></p><p>9、<code>FlashMapManager</code></p><p>接下来的<code>service</code>才是重头戏</p><h3 id="接收请求service"><a href="#接收请求service" class="headerlink" title="接收请求service"></a>接收请求<code>service</code></h3><h4 id="GenericServlet-1"><a href="#GenericServlet-1" class="headerlink" title="GenericServlet"></a><code>GenericServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201406377.png" class title="image-20230814201406377"><p>这个方法是抽象的，交给子类去实现</p><h4 id="HttpServlet-1"><a href="#HttpServlet-1" class="headerlink" title="HttpServlet"></a><code>HttpServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814201648286.png" class title="image-20230814201648286"><h5 id="service"><a href="#service" class="headerlink" title="service"></a><code>service</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202038976.png" class title="image-20230814202038976"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202111941.png" class title="image-20230814202111941"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202225260.png" class title="image-20230814202225260"><h5 id="doGet"><a href="#doGet" class="headerlink" title="doGet"></a><code>doGet</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202346128.png" class title="image-20230814202346128"><h5 id="doHead"><a href="#doHead" class="headerlink" title="doHead"></a><code>doHead</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202442198.png" class title="image-20230814202442198"><h5 id="doPost"><a href="#doPost" class="headerlink" title="doPost"></a><code>doPost</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202511993.png" class title="image-20230814202511993"><h5 id="doPut"><a href="#doPut" class="headerlink" title="doPut"></a><code>doPut</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202527687.png" class title="image-20230814202527687"><h5 id="doDelete"><a href="#doDelete" class="headerlink" title="doDelete"></a><code>doDelete</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814202557993.png" class title="image-20230814202557993"><h5 id="doOptions"><a href="#doOptions" class="headerlink" title="doOptions"></a><code>doOptions</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814203049843.png" class title="image-20230814203049843"><h6 id="getDeclaredMethods"><a href="#getDeclaredMethods" class="headerlink" title="getDeclaredMethods"></a><code>getDeclaredMethods</code></h6><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814203418375.png" class title="image-20230814203418375"><blockquote><p><code>c.getDeclaredMethods()</code>调用的是Class类的方法，返回的是这个类定义的所有方法，包括私有方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814203601844.png" class title="image-20230814203601844"></blockquote><p>接着看<code>doOptions</code>方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814203702387.png" class title="image-20230814203702387"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814203937447.png" class title="image-20230814203937447"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814204026773.png" class title="image-20230814204026773"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814204220256.png" class title="image-20230814204220256"><h4 id="FrameworkServlet-1"><a href="#FrameworkServlet-1" class="headerlink" title="FrameworkServlet"></a><code>FrameworkServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814204433917.png" class title="image-20230814204433917"><blockquote><p> <code>PATCH</code>请求方式是什么？</p><p>传送门：<a href="https://www.jianshu.com/p/bee85cf4e33a">https://www.jianshu.com/p/bee85cf4e33a</a></p></blockquote><p>好，也就是说如果请求方式是<code>PATCH</code>，那么就走<code>processRequest</code>方法</p><p>如果不是<code>PATCH</code>方式，就走父类的<code>service</code>方法</p><p>等等，父类的<code>service</code>方法，那不是<code>HttpServlet</code>的<code>service</code>方法吗</p><p>这个<code>service</code>方法中根据请求方式的不同，将请求分发到不同的<code>doXxx</code>方法</p><h5 id="doGet、doPost、doPut、doDelete方法"><a href="#doGet、doPost、doPut、doDelete方法" class="headerlink" title="doGet、doPost、doPut、doDelete方法"></a><code>doGet、doPost、doPut、doDelete</code>方法</h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814205614322.png" class title="image-20230814205614322"><h5 id="doOptions-1"><a href="#doOptions-1" class="headerlink" title="doOptions"></a><code>doOptions</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814210123325.png" class title="image-20230814210123325"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814205903071.png" class title="image-20230814205903071"><h5 id="doTrace"><a href="#doTrace" class="headerlink" title="doTrace"></a><code>doTrace</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814210308455.png" class title="image-20230814210308455"><h5 id="doHead-1"><a href="#doHead-1" class="headerlink" title="doHead"></a><code>doHead</code></h5><p>在<code>FrameworkServlet</code>中并没有<code>doHead</code>方法，说明是直接复用的父类<code>HttpServlet</code>的<code>doHead</code>方法</p><h5 id="processRequest-❗关键"><a href="#processRequest-❗关键" class="headerlink" title="processRequest(❗关键)"></a><code>processRequest</code>(❗关键)</h5><p>可以看到很多<code>doXxx</code>中都调用了<code>processRequest</code>方法，下面让我们来揭开它的面纱</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814210552867.png" class title="image-20230814210552867"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814210714883.png" class title="image-20230814210714883"><p>好接下来的关键就是<code>doService</code>方法了</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814210759500.png" class title="image-20230814210759500"><p>抽象方法，那就要找子类了，<code>FrameworkServlet</code>的子类，那就是我们的主角<code>DispatcherServlet</code></p><h4 id="DispatcherServlet-1"><a href="#DispatcherServlet-1" class="headerlink" title="DispatcherServlet"></a><code>DispatcherServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814211028246.png" class title="image-20230814211028246"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814211103072.png" class title="image-20230814211103072"><h5 id="doDispatch-❗❗❗关键中的关键"><a href="#doDispatch-❗❗❗关键中的关键" class="headerlink" title="doDispatch(❗❗❗关键中的关键)"></a><code>doDispatch</code>(❗❗❗关键中的关键)</h5><p>走到这里，其实才是我们的mvc框架大展神威的时候，开头提到的三大护法将一 一现身</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814211852919.png" class title="image-20230814211852919"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213100988.png" class title="image-20230814213100988"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213229086.png" class title="image-20230814213229086"><h6 id="HandlerExecutionChain"><a href="#HandlerExecutionChain" class="headerlink" title="HandlerExecutionChain"></a><code>HandlerExecutionChain</code></h6><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814212119953.png" class title="image-20230814212119953"><h5 id="1、checkMultipart"><a href="#1、checkMultipart" class="headerlink" title="1、checkMultipart"></a>1、<code>checkMultipart</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814212628921.png" class title="image-20230814212628921"><h5 id="2、getHandler"><a href="#2、getHandler" class="headerlink" title="2、getHandler"></a>2、<code>getHandler</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814212337158.png" class title="image-20230814212337158"><h5 id="3、getHandlerAdapter"><a href="#3、getHandlerAdapter" class="headerlink" title="3、getHandlerAdapter"></a>3、<code>getHandlerAdapter</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814212725993.png" class title="image-20230814212725993"><h5 id="4、applyPreHandle"><a href="#4、applyPreHandle" class="headerlink" title="4、applyPreHandle"></a>4、<code>applyPreHandle</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213519766.png" class title="image-20230814213519766"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213604692.png" class title="image-20230814213604692"><blockquote><p> 没有一个拦截器返回false的情况</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213707569.png" class title="image-20230814213707569"><blockquote><p>中间有一个拦截器返回false的情况</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814213656299.png" class title="image-20230814213656299"><h5 id="5、handle"><a href="#5、handle" class="headerlink" title="5、handle"></a>5、<code>handle</code></h5><p>好，这个ha是一个<code>HandlerAdapter</code>接口实现类</p><p>我们跑个程序让断点停在这</p><blockquote><p>控制器定义如下<img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814223347868.png" class title="image-20230814223347868"></p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814222057013.png" class title="image-20230814222057013"><p>点进去</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814222117947.png" class title="image-20230814222117947"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814222533424.png" class title="image-20230814222533424"><blockquote><p>invokeHandlerMethod</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814225416006.png" class title="image-20230814225416006"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814225433715.png" class title="image-20230814225433715"><blockquote><p>invokeAndHandle</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814222705465.png" class title="image-20230814222705465"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814222922395.png" class title="image-20230814222922395"><blockquote><p>getMethodArgumentValues</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814223518496.png" class title="image-20230814223518496"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814224010046.png" class title="image-20230814224010046"><p>具体解析参数的逻辑就不在这里看了，后续文章可以写一下</p><blockquote><p>doInvoke</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814224309026.png" class title="image-20230814224309026"><p>回到刚刚调用<code>invokeForRequest</code>的地方</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814224451182.png" class title="image-20230814224451182"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814224721730.png" class title="image-20230814224721730"><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814224805370.png" class title="image-20230814224805370"><p><code>writeWithMessageConviters</code>方法就是将方法返回值转化为json后将其写到response中，具体执行逻辑后续文章可以写一下</p><p>好，这个方法执行完之后，回到刚刚<code>RequestMappingHandlerAdapter</code>的<code>invokeHandlerMethod</code>的地方，然后就是获得<code>ModelAndView</code>对象了</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814225504748.png" class title="image-20230814225504748"><blockquote><p>getModelAndView</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814225633924.png" class title="image-20230814225633924"><blockquote><p>这里是true的原因</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814230143918.png" class title="image-20230814230143918"></blockquote><p>然后一直往回走，一直回到<code>RequestMappingHandlerAdaptor</code>的<code>handleInternal</code>方法得到这个<code>ModelAndView</code>对象</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815083638216.png" class title="image-20230815083638216"><p>将<code>ModelAndView</code>对象返回到<code>DispatcherServlet</code>的<code>ha.handle</code>方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230814230430024.png" class title="image-20230814230430024"><h5 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h5><p>这个handle方法干的事情还真多啊，对它的功能做一下小总结</p><p>1、执行目标方法（就是对应Controller中的方法）</p><p>2、将响应信息写入response中</p><p>3、构建<code>ModelAndView</code>对象（如果需要的话）</p><h5 id="6、applyPostHandle"><a href="#6、applyPostHandle" class="headerlink" title="6、applyPostHandle"></a>6、<code>applyPostHandle</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815084043411.png" class title="image-20230815084043411"><p>这里就是执行拦截器链的<code>postHandle</code>方法</p><p>可以看到这里是直接从拦截器尾部开始往前遍历的</p><h5 id="7、processDispatchResult"><a href="#7、processDispatchResult" class="headerlink" title="7、processDispatchResult"></a>7、<code>processDispatchResult</code></h5><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815084552090.png" class title="image-20230815084552090"><blockquote><p>processHandlerException</p></blockquote><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815090156872.png" class title="image-20230815090156872"><hr><p>回到刚刚的<code>processDispatchResult</code>下半部分</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815084859302.png" class title="image-20230815084859302"><h4 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h4><p>对<code>DispatcherServlet</code>此块功能做个小总结</p><p>1、根据请求方法将请求分发到对应的<code>doXxx</code>方法（从<code>HttpServlet</code>继承来的方法）</p><p>2、<code>FrameworkServlet</code>方法复写这些<code>doXxx</code>方法，都使用到了一个方法<code>processRequest</code></p><p>3、在<code>processRequest</code>方法中，放出了一个<code>doService</code>抽象方法被<code>DispatcherServlet</code>实现</p><p>4、在<code>doService</code>方法中，又调用了本类的<code>doDispatch</code>方法</p><p>5、<code>getHandler(processedRequest)</code>使用成员属性<code>handlerMappings</code>匹配并创建<code>HandlerExecutionChain</code></p><p>6、<code>getHandlerAdapter(mappedHandler.getHandler())</code>使用成员属性<code>handlerAdapters</code>匹配可以处理<code>HandlerExecutionChain</code>中的<code>handler</code>的<code>HandlerAdapter</code></p><p>7、<code>mappedHandler.applyPreHandle(processedRequest, response)</code>执行拦截器链的<code>preHandle</code>方法</p><p>8、<code> ha.handle(processedRequest, response, mappedHandler.getHandler())</code>执行目标方法中的逻辑，并创建<code>ModelAndView</code>(如果有的话)</p><p>9、<code>mappedHandler.applyPostHandle(processedRequest, response, mv)</code>执行拦截器链的<code>postHandle</code>方法</p><p>10、<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)</code>执行过程中如果有异常需要用成员属性<code>handlerExceptionResolvers</code>处理异常指定错误视图，并且执行拦截器链的<code>afterCompletion</code>方法</p><h3 id="销毁destroy"><a href="#销毁destroy" class="headerlink" title="销毁destroy"></a>销毁<code>destroy</code></h3><h4 id="GenericServlet-2"><a href="#GenericServlet-2" class="headerlink" title="GenericServlet"></a><code>GenericServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815092605316.png" class title="image-20230815092605316"><h4 id="HttpServlet-2"><a href="#HttpServlet-2" class="headerlink" title="HttpServlet"></a><code>HttpServlet</code></h4><p>该类中没有复写<code>destroy</code>方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815092646855.png" class title="image-20230815092646855"><h4 id="HttpServletBean-1"><a href="#HttpServletBean-1" class="headerlink" title="HttpServletBean"></a><code>HttpServletBean</code></h4><p>该类中没有复写<code>destroy</code>方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815092730470.png" class title="image-20230815092730470"><h4 id="FrameworkServlet-2"><a href="#FrameworkServlet-2" class="headerlink" title="FrameworkServlet"></a><code>FrameworkServlet</code></h4><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815092901063.png" class title="image-20230815092901063"><h4 id="DispatcherServlet-2"><a href="#DispatcherServlet-2" class="headerlink" title="DispatcherServlet"></a><code>DispatcherServlet</code></h4><p>该类中没有复写<code>destroy</code>方法</p><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815092930257.png" class title="image-20230815092930257"><h4 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h4><p>也就是说只有<code>FrameworkServlet</code>中定义了<code>destroy</code>方法，也就是关闭web容器</p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><img src="/javaEE/SpringMVC/2023/07/20/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/image-20230815101142186.png" class title="image-20230815101142186">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配流程</title>
      <link href="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot自动装配流程"><a href="#SpringBoot自动装配流程" class="headerlink" title="SpringBoot自动装配流程"></a>SpringBoot自动装配流程</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringStartProcessApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringStartProcessApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆分@SpringBootApplication注解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标注该类是主启动类</span></span><br><span class="line">@SpringBootApplication</span><br><span class="line">    @SpringBootConfiguration</span><br><span class="line">        <span class="comment"># 配置类</span></span><br><span class="line">        @Configuration</span><br><span class="line">        <span class="comment"># 加快SpringBoot启动</span></span><br><span class="line">        @Indexed</span><br><span class="line">    <span class="comment"># 开启自动装配</span></span><br><span class="line">    @EnableAutoConfiguration</span><br><span class="line">        <span class="comment"># 设置扫描包的路径</span></span><br><span class="line">        @AutoConfigurationPackage</span><br><span class="line">            <span class="comment"># 导入一个类</span></span><br><span class="line">            @Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="line">        <span class="comment"># 加载META-INF/spring.factories，将beandefinitions装入容器</span></span><br><span class="line">        @Import(AutoConfigurationImportSelector.class)</span><br><span class="line">    <span class="comment"># 用来排除一些自动配置类</span></span><br><span class="line">    @ComponentScan(excludeFilters = &#123; @Filter(<span class="built_in">type</span> = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">    @Filter(<span class="built_in">type</span> = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><p>接下来重点关注<code>AutoConfigurationPackages.Registrar</code>类和<code>AutoConfigurationImportSelector</code>类</p><h2 id="AutoConfigurationPackages-Registrar"><a href="#AutoConfigurationPackages-Registrar" class="headerlink" title="AutoConfigurationPackages.Registrar"></a>AutoConfigurationPackages.Registrar</h2><p>先在<code>AutoConfigurationPackages.Registrar</code>的图示位置打上断点，接着启动程序</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process0.png" class><p>分析源码要由内而外的分析</p><p>方法参数中有一个new出来的对象，直接单步调试进去</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process1.png" class><p>1、metadata到底是哪个类的注解元信息？</p><p>其实是启动类的，也就是SpringStartProcessorApplication</p><p>2、这个basePackages和basePackageClasses在哪里体现的呢？</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process2.png" class><p>其实是在SpringBootApplication注解上</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process3.png" class><p>这也就说明这个metadata包括了<code>@SpringBootApplication</code>标注的类上的其他注解的元信息和自身内部的注解的元信息</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process4.png" class><p>ok这段代码解决，现在继续点进去，看这个<code>register</code>方法里面写了啥</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process5.png" class><h2 id="AutoConfigurationImportSelector"><a href="#AutoConfigurationImportSelector" class="headerlink" title="AutoConfigurationImportSelector"></a>AutoConfigurationImportSelector</h2><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process6.png" class><p>既然知道了这个类的作用，所以找到selectImports方法，打上断点，启动程序等待程序停止</p><p>但是！你会发现断点并没有生效</p><p>实际上断点应该打在<code>AutoConfigurationGroup</code>类的<code>process</code>方法</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process7.png" class><p>点进<code>getAutoConfigurationEntry</code>方法</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process8.png" class><blockquote><p>ps:这里的attributes是取出exclude和excludeName，就是用于排除掉不需要加载的自动配置类<br>这两个属性是在@SpringBootApplication中配的，是从@EnableConfiguration中得来的</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process11.png" class></blockquote><blockquote><blockquote><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process12.png" class></blockquote></blockquote><h3 id="getCandidateConfigurations"><a href="#getCandidateConfigurations" class="headerlink" title="getCandidateConfigurations"></a><code>getCandidateConfigurations</code></h3><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process9.png" class><p>点进<code>SpringFactoriesLoader.loadFactoryNames</code>方法</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process10.png" class><p>点进<code>loadSpringFactories</code>方法</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process14.png" class><p>然后在这里就会发现这个result竟然不是null，直接返回了result</p><p>哎不是，我还没执行下面的逻辑呢，怎么就走缓存了</p><p>其实这步加载在刚开始的时候就做了，所以直接在下面打一个断点，然后重新执行</p><p>你会发现之前的那些断点都没有起作用，而是直接停在了这一行</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process18.png" class><p>现在找一下<code>auto-configuration</code>包下的<code>META-INF/spring.factories</code>文件</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process13.png" class><p>可以看到这些类都有一个统一的特征，那就是都是以AutoConfiguration结尾</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process15.png" class><p>随便点开一个看，发现都长得差不多</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process16.png" class><blockquote><p>注意：这里会加载类路径下所有的<code>META-INF/spring.factories</code>文件</p><p>每一个url就是一个jar包下的<code>META-INF/spring.factories</code>文件</p></blockquote><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process17.png" class><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process19.png" class><p>好，现在我们加载了所有jar包下的<code>META-INF/spring.factories</code>文件</p><p>现在放行，一直到这一步</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process21.png" class><p>为什么要框住131这个数字？</p><p>你现在回到刚刚那个<code>spring.factories</code>文件</p><p>数一下<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>后面有几个类的全限定名</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process20.png" class><p>对，正正好好131个</p><h3 id="removeDuplicates"><a href="#removeDuplicates" class="headerlink" title="removeDuplicates"></a><code>removeDuplicates</code></h3><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process22.png" class><p>这个方法就是给list去重的，简单的赖，我来我也行！</p><p>为什么要做去重？这个文件不是spring自己写的吗？它自己还不敢确定这个类不会重复吗？</p><p>刚刚提到了，这里会加载所有类路径下的<code>spring.factories</code>文件，所以我如果这样呢<br>我在我自己的类路径下面创建一个<code>spring.factories</code>文件</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process23.png" class><p>内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</span><br></pre></td></tr></table></figure><p>Spring能确认自己写的不会重复，但是它不能保证你不加个重复的啊</p><h3 id="getExclusions"><a href="#getExclusions" class="headerlink" title="getExclusions"></a><code>getExclusions</code></h3><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process24.png" class><h3 id="checkExcludedClasses"><a href="#checkExcludedClasses" class="headerlink" title="checkExcludedClasses"></a><code>checkExcludedClasses</code></h3><p>检查排除的类是否在<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>配置中</p><p>如果不存在则不允许排除，抛出异常</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process25.png" class><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process26.png" class><h3 id="configurations-removeAll-exclusions"><a href="#configurations-removeAll-exclusions" class="headerlink" title="configurations.removeAll(exclusions);"></a><code>configurations.removeAll(exclusions);</code></h3><p>即将configurations排除exclusions</p><h3 id="getConfigurationClassFilter-filter-configurations"><a href="#getConfigurationClassFilter-filter-configurations" class="headerlink" title="getConfigurationClassFilter().filter(configurations);"></a><code>getConfigurationClassFilter().filter(configurations);</code></h3><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process27.png" class><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process28.png" class><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process29.png" class><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process30.png" class><p>在过滤后，configurations就只剩下可怜的13个了</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process31.png" class><h3 id="fireAutoConfigurationImportEvents"><a href="#fireAutoConfigurationImportEvents" class="headerlink" title="fireAutoConfigurationImportEvents"></a><code>fireAutoConfigurationImportEvents</code></h3><p>这个不太确定</p><img src="/javaEE/SpringBoot/2023/07/17/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/process32.png" class><p>最后就将其封装成<code>AutoConfigurationEntry</code>对象返回</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置</title>
      <link href="/javaEE/2023/07/16/Nginx%E9%85%8D%E7%BD%AE/"/>
      <url>/javaEE/2023/07/16/Nginx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><h2 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h2><p>所有在nginx.conf中，但是不在<code>&#123; &#125;</code>中的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定运行nginx的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span> myUser myGroup;</span><br><span class="line"><span class="comment"># 工作线程数量，一般设置成CPU核心数</span></span><br><span class="line"><span class="comment"># 1个master进程，4个worker进程</span></span><br><span class="line"><span class="attribute">worker_process</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment"># 指定pid文件所在路径</span></span><br><span class="line"><span class="attribute">pid</span> /usr/local/nginx/nginx.pid;</span><br><span class="line"><span class="comment"># 错误日志的存放路径和日志级别</span></span><br><span class="line"><span class="attribute">error_log</span> logs/error.log <span class="literal">debug</span>;</span><br></pre></td></tr></table></figure><h2 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h2><p>主要配置Nginx服务器和用户的网络连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line">    <span class="comment"># 设置网络连接序列化，默认on，防止惊群现象</span></span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 一个进程是否可以接受多个网络连接</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 事件驱动模型：select、poll、epoll、kqueue</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="comment"># 最大连接数</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 1、引入文件扩展名和其文件类型映射表</span></span><br><span class="line">    <span class="comment"># 通过mine.types的映射，设置response的content-type</span></span><br><span class="line">    <span class="attribute">include</span> mine.types;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、设置默认文件类型，默认是text/plain</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.1、开启服务日志</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 3.2、自定义日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span> myLogFormat <span class="string">&#x27;$remote_addr - $remote_user [$time_local] $request $status $body_bytes_sent $http_refer $http_user_agent $heep_x_forwarded_for&#x27;</span>;</span><br><span class="line">    <span class="comment"># 3.3、设置日志格式</span></span><br><span class="line">    <span class="attribute">access_log</span> log/access.log myLogFormat;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.1、是否开启高效文件传输模式</span></span><br><span class="line">    <span class="comment"># 是否使用sendfile零拷贝技术来减少用户空间到内核空间的上下文切换</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 4.2、每个进程每次最大传输值，默认0，不限制大小</span></span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">100k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5、长连接超时时间</span></span><br><span class="line">    <span class="attribute">keeplive_timeout</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6、一次连接请求上限</span></span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7、响应客户端的超时时间</span></span><br><span class="line">    <span class="attribute">send_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8、客户端请求头的区缓冲大小</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9、客户端请求头的最大缓冲区大小和数量</span></span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">8</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10、允许客户端请求的最大字节数</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11、客户端请求体的缓冲区大小</span></span><br><span class="line">    <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http反向代理基本配置"><a href="#http反向代理基本配置" class="headerlink" title="http反向代理基本配置"></a>http反向代理基本配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 代理连接后端服务器超时时间</span></span><br><span class="line">    <span class="attribute">proxy_connet_timeout</span> <span class="number">90</span>;</span><br><span class="line">    <span class="comment"># 代理发送后端服务器超时时间</span></span><br><span class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line">    <span class="comment"># 代理接收后端服务器响应超市</span></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line">    <span class="comment"># 从nginx读取并保存用户头信息的缓冲区大小</span></span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line">    <span class="comment"># 代理缓存区数量和大小</span></span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="comment"># 高负荷下缓冲大小</span></span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="comment"># 设定缓存文件夹大小</span></span><br><span class="line">    <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="comment"># 后台可以获取到完整的IP+端口号</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="comment"># 后台可以获取到用户访问的真实ip地址</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarder-For $remote_addr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http反向代理服务器和负载均衡"><a href="#http反向代理服务器和负载均衡" class="headerlink" title="http反向代理服务器和负载均衡"></a>http反向代理服务器和负载均衡</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> product_server &#123;</span><br><span class="line">    <span class="comment"># 权重默认为1，权重越高被选中的概率就越大</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.11:8080</span> weight=<span class="number">5</span>;</span><br><span class="line">    <span class="comment"># 标识这个server暂时不参加负载</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.12:8080</span> down;</span><br><span class="line">    <span class="comment"># 其他所有非backup机器down或者忙的时候，才会分配这台服务器</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.13:8008</span> backup;</span><br><span class="line">    <span class="comment"># max_fails，允许请求失败的最大次数，默认为1</span></span><br><span class="line">    <span class="comment"># max_fails失败后，暂定的时间</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.14:8080</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http-gzip配置"><a href="#http-gzip配置" class="headerlink" title="http_gzip配置"></a>http_gzip配置</h3><p>启动gzip压缩功能，可以在传输网站的静态资源的时候进行压缩<br>压缩后的资源是原来资源大小的30%甚至更小<br>虽然会消耗一定的CPU资源，但是可以节约大量的带宽<br>服务端压缩，浏览器接收后解压后再解析<br>图片和大文件不建议压缩</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 开启gzip压缩</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 设置压缩的最小字节数</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="comment"># 设置缓存用于存储gzip的压缩结果数据流</span></span><br><span class="line">    <span class="comment"># 4 16k表示按照原始数据大小以16k为单位的4倍进行内存申请</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="comment"># http协议版本</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line">    <span class="comment"># zip压缩比</span></span><br><span class="line">    <span class="comment"># 1的时候处理最快，9压缩比最大处理速度最慢</span></span><br><span class="line">    <span class="attribute">gzip_com_level</span> <span class="number">6</span>;</span><br><span class="line">    <span class="comment"># 设置需要压缩哪些响应类型的资源</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json;</span><br><span class="line">    <span class="comment"># 代理后端服务器时，返回的结果是否需要压缩</span></span><br><span class="line">    <span class="attribute">gzip_proxies</span> any;</span><br><span class="line">    <span class="comment"># 是否缓存结果gzip压缩的页面</span></span><br><span class="line">    <span class="attribute">gzip_vray</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server相关配置"><a href="#server相关配置" class="headerlink" title="server相关配置"></a>server相关配置</h3><h4 id="server基础配置"><a href="#server基础配置" class="headerlink" title="server基础配置"></a>server基础配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 1、监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="comment"># 2、监听服务器地址</span></span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="comment"># 3、每个连接请求上限</span></span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">120</span>;</span><br><span class="line">        <span class="comment"># 4、字符集</span></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="comment"># 5、服务日志所在目录以及日志格式</span></span><br><span class="line">        <span class="attribute">access_log</span> logs/host.log myLogFormat;</span><br><span class="line">        <span class="comment"># 6、错误页</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ssl配置"><a href="#ssl配置" class="headerlink" title="ssl配置"></a>ssl配置</h4><p>如果请求方式是https的话，需要服务器提供证书，就需要设置ssl</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># ssl访问端口是443</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line">        <span class="attribute">server_name</span> xxx.com;</span><br><span class="line">        <span class="comment"># 开启ssl</span></span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="comment"># ssl证书路径</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /opt/ssl/nginx.crt;</span><br><span class="line">        <span class="comment"># ssl证书的密钥</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /opt/ssl/nginx.key;</span><br><span class="line">        <span class="comment"># ssl会话超时时间</span></span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">        <span class="comment"># ssl缓存</span></span><br><span class="line">        <span class="attribute">ssl_session_cache</span> shares:SSL:<span class="number">50m</span>;</span><br><span class="line">        <span class="comment"># ssl会话票据</span></span><br><span class="line">        <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="comment"># ssl协议版本</span></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">        <span class="comment"># ssl密码套件</span></span><br><span class="line">        <span class="attribute">ssl_ciphers</span> <span class="string">&#x27;HIGH:!ANULL:!MD5&#x27;</span>;</span><br><span class="line">        <span class="comment"># 开启ssl服务密码套件</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="location配置"><a href="#location配置" class="headerlink" title="location配置"></a>location配置</h4><p>基于Nginx服务器接收到的请求字符串，对除虚拟机主机名称之外的字符串进行匹配，对特定的请求进行处理，完成地址定向、数据缓存和应答控制等功能</p><pre><code class="nginx">http &#123;    server &#123;        # 1、路由匹配规则：只有符合了匹配规则的uri才会进入该location块        # location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;        # = ：用于标准uri前，要求请求字符串和uri严格匹配        # ^~：用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，不再使用正则uri和请求字符串做匹配        # ~：用于正则uri前，区分大小写        # ~*：用于正则uri前，不区分大小写        location 匹配规则&#123;            # 2、服务器默认网站根目录位置            root /var/www/html                # 3、默认访问的文件名                index index.html index.htm index.jsp;            # 4.1、拒绝的ip            deny 192.168.56.21;            # 4.2、允许的ip            allow 192.168.56.10;            # 5.1、跨域、请求头配置            add_header Access-Control-Allow-Origin * always;            add_header Access-Control-Allow-Credentials &#39;true&#39; always;            add_header Access-Control-Allow-Headers * always;            add_header Access-Control-Allow-Method &#39;PUT, GET, POST, DELETE, OPTIONS&#39; always;        &#125;        location ~/product &#123;            # 反向代理服务器            proxy_pass http://product_server;            # 是否重定向代理服务器地址            proxy_redirect off;            # 后台可以获取完整的ip和端口号            proxy_set_header Host $host;            # 后台可以获取用户访问的真实ip地址            proxy_set_header X-Forwarder-For $remote_addr;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring启动流程（大纲）</title>
      <link href="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/"/>
      <url>/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring启动流程（大纲）"><a href="#Spring启动流程（大纲）" class="headerlink" title="Spring启动流程（大纲）"></a>Spring启动流程（大纲）</h1><p>本文来盘一盘Spring的启动流程</p><blockquote><p>Spring启动流程过于复杂，如果所有的细节都集中在一篇文章，那是不可能的😂</p><p>本文更多的只是一个带你走一遍大致的流程</p><p>有些环节的具体执行细节后续会有衍生文章做单独分析，有衍生文章的我都在标题处标注了❗</p></blockquote><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="使用maven创建一个新项目"><a href="#使用maven创建一个新项目" class="headerlink" title="使用maven创建一个新项目"></a>使用maven创建一个新项目</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817091108704.png" class title="image-20230817091108704"><h3 id="引入Spring依赖"><a href="#引入Spring依赖" class="headerlink" title="引入Spring依赖"></a>引入Spring依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>在打印cpa的那行打上断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext cpa = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        System.out.println(cpa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置一个类型为Student的bean"><a href="#配置一个类型为Student的bean" class="headerlink" title="配置一个类型为Student的bean"></a>配置一个类型为Student的bean</h3><p>在applicationContext.xml中添加以下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhima.Student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="调试方式启动查看容器"><a href="#调试方式启动查看容器" class="headerlink" title="调试方式启动查看容器"></a>调试方式启动查看容器</h3><p>可以看到容器内已经有了一些bean了，也看到了我们自己配置的student的bean</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817134536875.png" class title="image-20230817134536875"><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>分析框架三板斧</p><p>1、找入口（<strong>最关键</strong>）</p><p>2、打断点</p><p>3、戒贪，只看核心代码（自动忽略try catch和日志相关代码）</p><p>分析类三板斧</p><p>1、继承体系</p><p>2、内部类</p><p>3、成员变量</p><h3 id="找入口"><a href="#找入口" class="headerlink" title="找入口"></a>找入口</h3><p>基于XML的Spring容器的入口比较好找</p><p>就是<code>ClassPathXmlApplicationContext</code>的构造方法</p><h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><p>看一下它的继承体系</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817095740214.png" class title="image-20230817095740214"><p>它的继承体系十分庞大，但是不要慌，主要的父类就四个</p><ul><li><code>AbstractApplicationContext</code></li><li><code>AbstractRefreshableApplicationContext</code></li><li><code>AbstractRefreshableConfigApplicationContext</code></li><li><code>AbstractXmlApplicationContext</code></li></ul><h3 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h3><h4 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h4><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817093951563.png" class title="image-20230817093951563"><p>可以看到调用了三个参数的构造方法</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817094832262.png" class title="image-20230817094832262"><p>refresh方法就是Spring启动流程（大纲）中最最核心的方法</p><p>这个方法是在其父类<code>AbstractApplicationContext</code>中的，接下来就围绕着这个方法开始分析</p><h3 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh"></a>prepareRefresh</h3><p>见函数名知意，此方法就是为refresh做准备</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817095435108.png" class title="image-20230817095435108"><h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory"></a>obtainFreshBeanFactory</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817100356658.png" class title="image-20230817100356658"><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817100921526.png" class title="image-20230817100921526"><h4 id="AbstractRefreshableApplicationContext-refreshBeanFactory"><a href="#AbstractRefreshableApplicationContext-refreshBeanFactory" class="headerlink" title="AbstractRefreshableApplicationContext#refreshBeanFactory"></a>AbstractRefreshableApplicationContext#refreshBeanFactory</h4><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817101821821.png" class title="image-20230817101821821"><h4 id="AbstractXmlApplicationContext-loadBeanDefinitions"><a href="#AbstractXmlApplicationContext-loadBeanDefinitions" class="headerlink" title="AbstractXmlApplicationContext#loadBeanDefinitions"></a>AbstractXmlApplicationContext#loadBeanDefinitions</h4><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817102446654.png" class title="image-20230817102446654"><h4 id="❗AbstractXmlApplicationContext-loadBeanDefinitions"><a href="#❗AbstractXmlApplicationContext-loadBeanDefinitions" class="headerlink" title="❗AbstractXmlApplicationContext#loadBeanDefinitions"></a>❗AbstractXmlApplicationContext#loadBeanDefinitions</h4><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817103044829.png" class title="image-20230817103044829"><blockquote><p> XmlBeanDefinitionReader解析xml的过程会放在衍生文章《Spring启动流程（大纲）-解析XML》里面</p><p>这里只需要知道它将xml中我们定义的那些bean转化成了BeanDefinition对象</p><p>还记得刚刚创建读取器的时候传入了beanfactory吗</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817103423440.png" class title="image-20230817103423440"><p>这个时候读取器加载的这些BeanDefinition对象已经在beanfactory中了</p></blockquote><h3 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817104727412.png" class title="image-20230817104727412"><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817104857698.png" class title="image-20230817104857698"><h3 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory"></a>postProcessBeanFactory</h3><p>给子类的拓展点，用来做一些beanFactory初始化后的一些工作</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817105427876.png" class title="image-20230817105427876"><h3 id="❗invokeBeanFactoryPostProcessors"><a href="#❗invokeBeanFactoryPostProcessors" class="headerlink" title="❗invokeBeanFactoryPostProcessors"></a>❗invokeBeanFactoryPostProcessors</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817105704978.png" class title="image-20230817105704978"><blockquote><p>在BeanFactory根据BeanDefinitions创建对象之前，需要经过一些BeanFactoryProcessor的postProcessBeanFactory方法</p><p>ConfigurationClassPostProcessor </p></blockquote><hr><p>为什么已经有postProcessBeanFactory拓展点了还需要有BeanFactoryPostProcessor？</p><p>它两提供拓展点的对象不同</p><p>postProcessBeanFactory是给子类容器拓展的</p><p>BeanFactoryPostProcessor是给用户拓展的</p><h3 id="❗registerBeanPostProcessors"><a href="#❗registerBeanPostProcessors" class="headerlink" title="❗registerBeanPostProcessors"></a>❗registerBeanPostProcessors</h3><p>注册可以介入bean创建的BeanPostProcessor实例</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817110346298.png" class title="image-20230817110346298"><blockquote><p>可以看到这里也是调用的PostProcessorRegistrationDelegate的静态方法</p><p>和刚刚invokeBeanFactoryPostProcessors中调用的是同一个类</p><p>这两块的分析会放在衍生篇《Spring启动流程（大纲）-后处理器》</p></blockquote><h3 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource"></a>initMessageSource</h3><p>MessageSource是用于国际化的</p><p>如果用户注册了一个<code>MESSAGE_SOURCE_BEAN_NAME(messageSource)</code>的Bean，就会使用用户自定义的</p><p>否则就使用默认的<code>DelegatingMessageSource</code></p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817111158043.png" class title="image-20230817111158043"><h3 id="❗initApplicationEventMulticaster"><a href="#❗initApplicationEventMulticaster" class="headerlink" title="❗initApplicationEventMulticaster"></a>❗initApplicationEventMulticaster</h3><p>Spring的事件发布组播器</p><p>和初始化messageSource的逻辑很像</p><p>先看用户有没有定义beanName是<code>APPLICATION_EVENT_MULTICASTER_BEAN_NAME(applicationEventMulticaster)</code>的Bean</p><p>有的话就使用用户定义的</p><p>否则就使用<code>SimpleApplicationEventMulticaster</code></p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817111348644.png" class title="image-20230817111348644"><blockquote><p>Spring的事件机制会在衍生篇《Spring启动流程（大纲）-事件》</p></blockquote><h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817111601768.png" class title="image-20230817111601768"><h3 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners"></a>registerListeners</h3><p>注册监听器</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817112231108.png" class title="image-20230817112231108"><h3 id="❗finishBeanFactoryInitialization"><a href="#❗finishBeanFactoryInitialization" class="headerlink" title="❗finishBeanFactoryInitialization"></a>❗finishBeanFactoryInitialization</h3><p>ConversionService是用来做类型转换工作的，和刚刚初始化messageSource的动作很像，也是先看用户有没有自定义</p><p>有则用之，无则默认</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817112649833.png" class title="image-20230817112649833"><blockquote><p>beanFactory.preInstantiateSingletons是真正执行创建Bean的方法</p><p>Spring的Bean的生命周期会在衍生篇《Spring启动流程（大纲）-Bean生命周期》</p></blockquote><h3 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh"></a>finishRefresh</h3><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817122301324.png" class title="image-20230817122301324"><h4 id="initLifecycleProcessor"><a href="#initLifecycleProcessor" class="headerlink" title="initLifecycleProcessor"></a>initLifecycleProcessor</h4><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817131601516.png" class title="image-20230817131601516"><h5 id="LifecycleProcessor"><a href="#LifecycleProcessor" class="headerlink" title="LifecycleProcessor"></a>LifecycleProcessor</h5><p>来看看这个LifecycleProcessor到底是何方神圣</p><p>它是一个Lifecycle的子接口</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817131122793.png" class title="image-20230817131122793"><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817131133473.png" class title="image-20230817131133473"><p>这个Lifecycle不知道大家还有没有印象了，在ClassPathXmlApplicationContext的继承体系中出现过</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817131820628.png" class title="image-20230817131820628"><p>并且实现了接口</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817131856827.png" class title="image-20230817131856827"><p>那这个start是谁来调用的呢？就是这个LifecycleProcessor！</p><p>在<code>finishRefresh</code>中往下看</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817132117895.png" class title="image-20230817132117895"><p>现在我们没有自定义LifecycleProcessor，所以我们来看看他默认的实现类<code>DefaultLifecycleProcessor</code>在<code>onRefresh</code>中做了些什么</p><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817132205796.png" class title="image-20230817132205796"><img src="/javaEE/Spring/2023/07/10/Spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E5%A4%A7%E7%BA%B2%EF%BC%89/image-20230817132604856.png" class title="image-20230817132604856"><blockquote><p>本人技术水平有限，文章中难免会出现错误，读者如有发现，感谢各位指正！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JRebel进行热部署</title>
      <link href="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="使用JRebel进行热部署"><a href="#使用JRebel进行热部署" class="headerlink" title="使用JRebel进行热部署"></a>使用JRebel进行热部署</h2><p>在我们使用Java开发后端的时候，修改了代码之后</p><p>需要重新启动服务器，然后才可以看到修改代码后的效果</p><p>这服务器的一关一启至少需要浪费30s，下面介绍一款IDEA的插件<code>JRebel&amp;XRebel</code></p><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111161253948.png" class title="IDEA插件"><p>下面一步步教大家如何使用</p><h3 id="在IDEA的插件市场下载此插件"><a href="#在IDEA的插件市场下载此插件" class="headerlink" title="在IDEA的插件市场下载此插件"></a>在IDEA的插件市场下载此插件</h3><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111161401909.png" class title="IDEA插件市场"><p>下载时间会根据你的网络状况而定</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>如果是之前就下载这个插件，然后破解失效了</p><p>最好使用<code>EveryThing</code>查找磁盘中所有文件名中包含<code>JRebel</code>和<code>XRebel</code>的文件夹和文件并删除</p><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111161605791.png" class title="查找JRebel"><h4 id="下载反向代理的软件"><a href="#下载反向代理的软件" class="headerlink" title="下载反向代理的软件"></a>下载反向代理的软件</h4><p>下载地址如下：<a href="https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4">https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4</a></p><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111161932334.png" class title="image-20230111161932334"><p>下载后双击打开即可</p><h4 id="生成UUID"><a href="#生成UUID" class="headerlink" title="生成UUID"></a>生成UUID</h4><p>在线网站如下：<a href="https://www.uuidgenerator.net/version1">https://www.uuidgenerator.net/version1</a></p><blockquote><p>Tips：使用java程序直接生成也是可以的</p></blockquote><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111162809364.png" class title="生成UUID"><h4 id="激活JRebel"><a href="#激活JRebel" class="headerlink" title="激活JRebel"></a>激活JRebel</h4><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111162021594.png" class title="换证书"><p>下面填写信息</p><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111162140339.png" class title="填写信息"><p>然后点击<code>change license</code></p><h4 id="开启离线模式"><a href="#开启离线模式" class="headerlink" title="开启离线模式"></a>开启离线模式</h4><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111162301817.png" class title="离线工作"><h4 id="开启IDEA部分设置"><a href="#开启IDEA部分设置" class="headerlink" title="开启IDEA部分设置"></a>开启IDEA部分设置</h4><p>开启自动构建项目</p><img src="/javaEE/2023/01/11/%E4%BD%BF%E7%94%A8Jrebel%E8%BF%9B%E8%A1%8C%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230111162443095.png" class title="勾选即可">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-系统管理</title>
      <link href="/javaEE/2023/01/09/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/javaEE/2023/01/09/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>根据给定路径和搜索条件查找文件</p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：find [路径] [参数] 待搜索字段</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">-name匹配名称</span><br><span class="line">-user匹配所有者</span><br><span class="line">-perm匹配权限（mode为完全匹配，-mode为包含即可）</span><br><span class="line">-<span class="built_in">type</span> b(块设备)/d(目录)/c(字符设备)/p(管道)/l(链接文件)/f(文本文件)匹配文件类型</span><br><span class="line">-group匹配所有组</span><br><span class="line">-mtime -n +n匹配修改内容的时间（-n指n天以内，+n指n天以前）</span><br><span class="line">-atime -n +n匹配访问文件的时间（-n指n天以内，+n指n天以前）</span><br><span class="line">-ctime -n +n匹配修改文件权限的时间（-n指n天以内，+n指n天以前）</span><br><span class="line">-nouser匹配无所有者的文件</span><br><span class="line">-nogroup匹配无所有组的文件</span><br><span class="line">-size匹配文件的大小（+50KB为查找超过50KB的文件，而-1M为查找小于1M的文件）</span><br><span class="line">-<span class="built_in">exec</span> [处理搜索结果的命令] &#123;&#125;\;后面可跟用于进一步处理搜索结果的命令</span><br></pre></td></tr></table></figure><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>locate命令的功能是用于快速查找文件或目录</p><p>与find命令进行全局搜索不同，locate命令是基于了数据文件（&#x2F;var&#x2F;lib&#x2F;locatedb）进行的定点查找</p><p>此命令缩小了搜索范围，因此快速快很多</p><h4 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：locate 关键词</span></span><br><span class="line"><span class="comment"># 更新数据库文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># updatedb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找系统中文件名中有network的文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># locate network</span></span><br></pre></td></tr></table></figure><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>找到命令本身所在的路径</p><h4 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：which [参数] 命令</span></span><br></pre></td></tr></table></figure><h4 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima home]<span class="comment"># which yum</span></span><br><span class="line">/usr/bin/yum</span><br><span class="line">[root@zhima home]<span class="comment"># which rpm</span></span><br><span class="line">/usr/bin/rpm</span><br><span class="line">[root@zhima home]<span class="comment"># which docker</span></span><br><span class="line">/usr/bin/docker</span><br></pre></td></tr></table></figure><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>定位命令的二进制程序、源代码文件和man手册页等相关文件的路径</p><p>它不是在磁盘中乱找，而是在一个数据库文件中查询</p><p>此数据库文件是包含有本地所有文件的信息，需要自己手动使用<code>updatedb</code>更新数据库</p><p>正因为这样，whereis命令的搜索结果有时候会不准确，比如刚添加的文件可能搜不到， 原因就是该数据库文件没有被更新。</p><h4 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：whereis [参数] 命令名</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 只搜索二进制文件</span></span><br><span class="line">-b         search only <span class="keyword">for</span> binaries</span><br><span class="line"><span class="comment"># 指定路径搜索二进制文件</span></span><br><span class="line">-B &lt;<span class="built_in">dirs</span>&gt;  define binaries lookup path</span><br><span class="line"><span class="comment"># 只搜索man手册</span></span><br><span class="line">-m         search only <span class="keyword">for</span> manuals</span><br><span class="line"><span class="comment"># 指定路径下搜索man手册</span></span><br><span class="line">-M &lt;<span class="built_in">dirs</span>&gt;  define man lookup path</span><br><span class="line"><span class="comment"># 只搜索源代码</span></span><br><span class="line">-s         search only <span class="keyword">for</span> sources</span><br><span class="line"><span class="comment"># 指定路径下搜索源代码</span></span><br><span class="line">-S &lt;<span class="built_in">dirs</span>&gt;  define sources lookup path</span><br></pre></td></tr></table></figure><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>包管理器（RedHat Package Manager）</p><h4 id="使用说明-4"><a href="#使用说明-4" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：rpm [参数] 软件包名</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 列出所有软件包</span></span><br><span class="line">-a, --all                        query/verify all packages</span><br><span class="line"><span class="comment"># 卸载软件包</span></span><br><span class="line">-e, --erase=&lt;package&gt;+           erase (uninstall) package</span><br><span class="line"><span class="comment"># 查询文件或命令属于哪个软件包</span></span><br><span class="line">-f, --file                       query/verify package(s) owning file</span><br><span class="line"><span class="comment"># 下载软件包</span></span><br><span class="line">-i, --install                    install package(s)</span><br><span class="line"><span class="comment"># 显示软件包的文件列表</span></span><br><span class="line">-l, --list                       list files <span class="keyword">in</span> package</span><br><span class="line"><span class="comment"># 查询指定的rpm软件包</span></span><br><span class="line">-p, --package                    query/verify a package file</span><br><span class="line"><span class="comment"># 安装软件包时列出标记</span></span><br><span class="line">-h, --<span class="built_in">hash</span>                       <span class="built_in">print</span> <span class="built_in">hash</span> marks as package installs (good with -v)</span><br><span class="line"><span class="comment"># 显示命令执行过程</span></span><br><span class="line">-v, --verbose                    provide more detailed output</span><br></pre></td></tr></table></figure><h4 id="参考案例-1"><a href="#参考案例-1" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装软件包</span></span><br><span class="line">[root@zhima home]<span class="comment"># rmp ivh cockpit-185-2.el8.x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出系统安装的所有软件</span></span><br><span class="line">[root@zhima home]<span class="comment"># rpm -qa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看cockpit的文件列表</span></span><br><span class="line">[root@zhima home]<span class="comment">#rpm -ql cockpit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级指定软件包</span></span><br><span class="line">[root@zhima home]<span class="comment">#rpm -Uvh cockpit-185-2.el8.x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载cockpit</span></span><br><span class="line">[root@zhima home]<span class="comment">#rpm -evh cockpit</span></span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>查看进程状态（process status）</p><h4 id="使用说明-5"><a href="#使用说明-5" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：ps [参数]</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">    a显示现行终端机下的所有程序，包括其他用户的程序</span><br><span class="line">    u以用户为主的格式来显示程序状况</span><br><span class="line">    x显示所有程序，不以终端机来区分</span><br><span class="line">    r只列出现行终端机正在执行中的程序</span><br><span class="line">    e列出程序时，显示每个程序所使用的环境变量</span><br><span class="line">    -f显示UID,PPIP,C与STIME栏位</span><br><span class="line">    -l采用详细的格式来显示程序状况</span><br><span class="line">    -y配合选项”-l”使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位</span><br></pre></td></tr></table></figure><h4 id="参考案例-2"><a href="#参考案例-2" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示系统中全部的进程信息，包含详细信息</span></span><br><span class="line"><span class="comment"># 结合输出重定向，将当前进程信息保留备份至指定文件</span></span><br><span class="line">ps aux &gt; now_process_status.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前系统运行状态详细信息</span></span><br><span class="line">ps -ely</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前系统运行状态</span></span><br><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据内存使用量（第四列）情况降序排序</span></span><br><span class="line">ps aux | sort -rnk 4</span><br></pre></td></tr></table></figure><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><h4 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h4><p>后台启动程序</p><h4 id="使用说明-6"><a href="#使用说明-6" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：nohup [参数] 程序名</span></span><br></pre></td></tr></table></figure><h4 id="参考案例-3"><a href="#参考案例-3" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以后台模式运行xxx.jar包</span></span><br><span class="line">nohup java -jar xxx.jar &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以后台模式运行xxx.jar包并讲输出结果都写入xxx_log.txt文件</span></span><br><span class="line">nohup java -jar xxx.jar &amp; &gt; xxx_log.txt</span><br></pre></td></tr></table></figure><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><h4 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h4><p>管理系统服务（后台进程）</p><h4 id="使用说明-7"><a href="#使用说明-7" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">systemctl start servieName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart servieName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">systemctl stop servieName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status servieName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭后台服务自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> serviceName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启后台服务自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> serviceName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有后台服务状态</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span> service --all</span><br></pre></td></tr></table></figure><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><h4 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h4><p>显示系统内核内容</p><h4 id="使用说明-8"><a href="#使用说明-8" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：uname [参数]</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 显示全部信息</span></span><br><span class="line">-a, --all                <span class="built_in">print</span> all information, <span class="keyword">in</span> the following order,</span><br><span class="line">                             except omit -p and -i <span class="keyword">if</span> unknown:</span><br><span class="line"><span class="comment"># 显示主机名</span></span><br><span class="line">-n, --nodename           <span class="built_in">print</span> the network node hostname</span><br><span class="line"><span class="comment"># 显示内核名</span></span><br><span class="line">-s, --kernel-name        <span class="built_in">print</span> the kernel name</span><br><span class="line"><span class="comment"># 显示硬件架构</span></span><br><span class="line">-m, --machine            <span class="built_in">print</span> the machine hardware name</span><br><span class="line"><span class="comment"># 显示内核发行号</span></span><br><span class="line">-r, --kernel-release     <span class="built_in">print</span> the kernel release</span><br><span class="line"><span class="comment"># 显示内核版本</span></span><br><span class="line">-v, --kernel-version     <span class="built_in">print</span> the kernel version</span><br><span class="line"><span class="comment"># 显示处理器的类型</span></span><br><span class="line">-p, --processor          <span class="built_in">print</span> the processor <span class="built_in">type</span> or <span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="comment"># 显示操作系统类型</span></span><br><span class="line">-o, --operating-system   <span class="built_in">print</span> the operating system</span><br></pre></td></tr></table></figure><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><h4 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h4><p>关机</p><h4 id="使用说明-9"><a href="#使用说明-9" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux系统中为了提高磁盘的读写效率，对磁盘采用了“预读迟写”操作方式。当用户保存文件时，Linux核心并不一定立即将数据写入物理磁盘中，而是将数据保存在缓存区中，等到缓存区被填满了之后再将数据写入磁盘，这种方式确实极大地提高了读写效率，但是也有其所在的一些问题，当服务器遭受到断电或者其他意外情况的时候，缓存中的数据会直接丢失，这就会导致一些问题，sync就是将缓存中的东西直接写入到磁盘中去，无需等待缓存被填满</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将数据同步到硬盘（关机前必须做）</span></span><br><span class="line">sync</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">服务器在十分钟后关机</span></span><br><span class="line">shutdown -h 10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立即关机</span></span><br><span class="line">shutdown -h now</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在20:35关机</span></span><br><span class="line">shutdown -h 20:35</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立马重启</span></span><br><span class="line">shutdown -r now</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立马重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件编辑</title>
      <link href="/javaEE/Linux/2023/01/08/Linux-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91/"/>
      <url>/javaEE/Linux/2023/01/08/Linux-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-文件编辑"><a href="#Linux-文件编辑" class="headerlink" title="Linux-文件编辑"></a>Linux-文件编辑</h2><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>修改文件属组（change group）</p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：chgrp [参数] [目录]</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 和-v类似，但是-c是只显示发生修改的部分</span></span><br><span class="line">-c, --changes          like verbose but report only when a change is made</span><br><span class="line"><span class="comment"># 不显示报错</span></span><br><span class="line">-f, --silent, --quiet  suppress most error messages</span><br><span class="line"><span class="comment"># 输出对每个文件的处理过程</span></span><br><span class="line">-v, --verbose          output a diagnostic <span class="keyword">for</span> every file processed</span><br><span class="line"><span class="comment"># 递归处理子目录</span></span><br><span class="line">-R, --recursive        operate on files and directories recursively</span><br></pre></td></tr></table></figure><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>修改文件属组和属主（change owner）</p><h4 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：chown [参数] 属主:属组 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 和-v类似，但是-c是只显示发生修改的部分</span></span><br><span class="line">-c, --changes          like verbose but report only when a change is made</span><br><span class="line"><span class="comment"># 不显示报错</span></span><br><span class="line">-f, --silent, --quiet  suppress most error messages</span><br><span class="line"><span class="comment"># 输出对每个文件的处理过程</span></span><br><span class="line">-v, --verbose          output a diagnostic <span class="keyword">for</span> every file processed</span><br><span class="line"><span class="comment"># 递归处理子目录</span></span><br><span class="line">-R, --recursive        operate on files and directories recursively</span><br></pre></td></tr></table></figure><h3 id="chomd"><a href="#chomd" class="headerlink" title="chomd"></a>chomd</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>修改文件的权限（change mode）</p><h4 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：chomd 参数 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 和-v类似，但是-c是只显示发生修改的部分</span></span><br><span class="line">-c, --changes          like verbose but report only when a change is made</span><br><span class="line"><span class="comment"># 不显示报错</span></span><br><span class="line">-f, --silent, --quiet  suppress most error messages</span><br><span class="line"><span class="comment"># 输出对每个文件的处理过程</span></span><br><span class="line">-v, --verbose          output a diagnostic <span class="keyword">for</span> every file processed</span><br><span class="line"><span class="comment"># 递归处理子目录</span></span><br><span class="line">-R, --recursive        operate on files and directories recursively</span><br></pre></td></tr></table></figure><h4 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h4><p>Linux中权限可以以两种方式说明，一种是符号，一种是数字</p><p>两者存在的对应关系如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4   w:2   x:1</span><br></pre></td></tr></table></figure><p>使用chmod修改文件权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod rwxrw---x filename</span><br><span class="line"><span class="comment"># 两者作用一致</span></span><br><span class="line">chmod 761 filename</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># 7 -&gt; r + w + x =&gt; 4 + 2 + 1 = 7</span></span><br><span class="line"><span class="comment"># 6 -&gt; r + w + - =&gt; 4 + 2 + 0 = 6</span></span><br><span class="line"><span class="comment"># 1 -&gt; - + - + x =&gt; 0 + 0 + 1 = 1</span></span><br></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>查看文件内容</p><h4 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 显示行号（空行也编号）</span></span><br><span class="line">-n, --number             number all output lines</span><br><span class="line"><span class="comment"># 显示行号（多个连续空行算一行）</span></span><br><span class="line">-s, --squeeze-blank      suppress repeated empty output lines</span><br><span class="line"><span class="comment"># 显示行号（空行不编号）</span></span><br><span class="line">-b, --number-nonblank    number nonempty output lines, overrides -n</span><br><span class="line"><span class="comment"># 在每一行结尾处加上一个$</span></span><br><span class="line">-E, --show-ends          display $ at end of each line</span><br></pre></td></tr></table></figure><h4 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将file1.txt文件中的内容输出到copy.txt</span></span><br><span class="line">[root@zhima home]<span class="comment"># cat file1.txt &gt; copy.txt </span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">copy.txt  file1.txt  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># cat copy.txt </span></span><br><span class="line">abcdefg</span><br><span class="line">[root@zhima home]<span class="comment"># cat file1.txt </span></span><br><span class="line">abcdefg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持续写入输入的内容到文件input.txt</span></span><br><span class="line"><span class="comment"># 直到输入了END，退出并保存</span></span><br><span class="line">[root@zhima home]<span class="comment"># cat &gt; input.txt &lt;&lt; END</span></span><br><span class="line">&gt; Hello</span><br><span class="line">&gt; world</span><br><span class="line">&gt; end</span><br><span class="line">&gt; END</span><br><span class="line">[root@zhima home]<span class="comment"># cat input.txt </span></span><br><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">end</span><br><span class="line"><span class="comment"># 再次执行就会覆盖原先文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># cat &gt; input.txt &lt;&lt; e</span></span><br><span class="line">&gt; overide</span><br><span class="line">&gt; e</span><br><span class="line">[root@zhima home]<span class="comment"># cat input.txt </span></span><br><span class="line">overide</span><br></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>分页显示文件（只能向后浏览，不能向前）</p><h4 id="使用说明-4"><a href="#使用说明-4" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：more [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 每页显示几行</span></span><br><span class="line">-NUM      specify the number of lines per screenful</span><br><span class="line"><span class="comment"># 不滚动，先清除屏幕再展示文本</span></span><br><span class="line">-p        <span class="keyword">do</span> not scroll, clean screen and display text</span><br><span class="line"><span class="comment"># 不滚动，先展示文本再取出旧内容</span></span><br><span class="line">-c        <span class="keyword">do</span> not scroll, display text and clean line ends</span><br><span class="line"><span class="comment"># 压缩多行连续空白到一行</span></span><br><span class="line">-s        squeeze multiple blank lines into one</span><br><span class="line"><span class="comment"># 从第几行开始显示</span></span><br><span class="line">+NUM      display file beginning from line number NUM</span><br></pre></td></tr></table></figure><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>分页显示文件内容（既可以向前浏览又可以向后浏览）</p><h4 id="使用说明-5"><a href="#使用说明-5" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：less [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">-b设置缓冲区的大小</span><br><span class="line">    -e当文件显示结束后自动退出</span><br><span class="line">    -f强制打开文件</span><br><span class="line">    -i忽略搜索时的大小写</span><br><span class="line">    -m显示阅读进度百分比</span><br><span class="line">    -N显示每行的行号</span><br><span class="line">    -o将输出的内容在指定文件中保存起来</span><br><span class="line">    -Q不使用警告音</span><br><span class="line">    -s显示连续空行为一行</span><br><span class="line">    -S在单行显示较长的内容，而不换行显示</span><br><span class="line">    -x将TAB字符显示为指定个数的空格字符</span><br></pre></td></tr></table></figure><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><h4 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h4><p>显示文件开头内容（默认前10行）</p><h4 id="使用说明-6"><a href="#使用说明-6" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：head [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 只显示开头前k个字符</span></span><br><span class="line"><span class="comment"># 加了-就是除了倒数k个字符不显示，其他都显示</span></span><br><span class="line">-n, --lines=[-]K         <span class="built_in">print</span> the first K lines instead of the first 10;</span><br><span class="line">                             with the leading <span class="string">&#x27;-&#x27;</span>, <span class="built_in">print</span> all but the last</span><br><span class="line">                             K lines of each file</span><br><span class="line"><span class="comment"># 只显示开头前k行</span></span><br><span class="line"><span class="comment"># 加了-就是除了倒数k行不显示，其他都显示</span></span><br><span class="line">-c, --bytes=[-]K         <span class="built_in">print</span> the first K bytes of each file;</span><br><span class="line">                             with the leading <span class="string">&#x27;-&#x27;</span>, <span class="built_in">print</span> all but the last</span><br><span class="line">                             K bytes of each file</span><br><span class="line"><span class="comment"># 显示文件名的头信息</span></span><br><span class="line">-v, --verbose            always <span class="built_in">print</span> headers giving file names</span><br></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><h4 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h4><p>查看文件尾部内容（默认倒数10行）</p><h4 id="使用说明-7"><a href="#使用说明-7" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：tail [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 显示最后k个字符</span></span><br><span class="line">-c, --bytes=K            output the last K bytes; or use -c +K to output</span><br><span class="line">                             bytes starting with the Kth of each file</span><br><span class="line"><span class="comment"># 持续显示文件最新追加的内容</span></span><br><span class="line">-f, --follow[=&#123;name|descriptor&#125;]</span><br><span class="line">                           output appended data as the file grows;</span><br><span class="line">                             an absent option argument means <span class="string">&#x27;descriptor&#x27;</span></span><br><span class="line"><span class="comment"># 显示最后k行</span></span><br><span class="line">-n, --lines=K            output the last K lines, instead of the last 10;</span><br><span class="line">                             or use -n +K to output starting with the Kth</span><br></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><h4 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h4><p>删除文件</p><h4 id="使用说明-8"><a href="#使用说明-8" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：rm [参数] 目标文件</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 强制删除</span></span><br><span class="line">-f, --force           ignore nonexistent files and arguments, never prompt</span><br><span class="line"><span class="comment"># 删除前询问</span></span><br><span class="line">-i                    prompt before every removal</span><br><span class="line"><span class="comment"># 递归删除子文件夹</span></span><br><span class="line">-r, -R, --recursive   remove directories and their contents recursively</span><br><span class="line"><span class="comment"># 显示详细的命令执行过程</span></span><br><span class="line">-v, --verbose         explain what is being <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><h4 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h4><p>输出字符串或提取后的变量值</p><h4 id="使用说明-9"><a href="#使用说明-9" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：echo [参数] 字符串/$变量名</span></span><br></pre></td></tr></table></figure><h4 id="参考案例-1"><a href="#参考案例-1" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示study</span></span><br><span class="line">[root@zhima home]<span class="comment"># echo study</span></span><br><span class="line">study</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示系统变量PATH的值</span></span><br><span class="line">[root@zhima home]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将内容重定向到path.txt文件中</span></span><br><span class="line">[root@zhima home]<span class="comment"># echo $PATH &gt; path.txt</span></span><br><span class="line">[root@zhima home]<span class="comment"># cat path.txt </span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h4 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h4><p>文本搜索工具</p><p>与之容易混淆的是egrep命令和fgrep命令</p><p>egrep等价于<code>grep -E</code>，支持扩展的正则表达式。</p><p>fgrep等价于<code>grep -F</code>，不支持正则表达式，直接按照字符串内容进行匹配。</p><h4 id="使用说明-10"><a href="#使用说明-10" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：grep [参数] 待搜索文本 目标文件1 目标文件2 ...</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line">-i, --ignore-case         ignore <span class="keyword">case</span> distinctions</span><br><span class="line"><span class="comment"># 只显示匹配的行数</span></span><br><span class="line">-c, --count               <span class="built_in">print</span> only a count of matching lines per FILE</span><br><span class="line"><span class="comment"># 不提示文件名</span></span><br><span class="line">-h, --no-filename         suppress the file name prefix on output</span><br><span class="line"><span class="comment"># 输出关键词位置的行号及内容</span></span><br><span class="line">-n, --line-number         <span class="built_in">print</span> line number with output lines</span><br><span class="line"><span class="comment"># 显示不匹配的行</span></span><br><span class="line">-v, --invert-match        select non-matching lines</span><br><span class="line"><span class="comment"># 递归搜索</span></span><br><span class="line">-r, --recursive           like --directories=recurs</span><br><span class="line"><span class="comment"># 只列出匹配的文件名</span></span><br><span class="line">-l, --files-with-matches  <span class="built_in">print</span> only names of FILEs containing matches</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件管理</title>
      <link href="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>显示当前工作目录下的所有文件和文件夹</p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：ls [参数] [路径]</span></span><br><span class="line"><span class="comment"># 常用可选参数</span></span><br><span class="line"><span class="comment"># 不要忽略以.开头的文件，即不忽略隐藏文件</span></span><br><span class="line">-a, --all                  <span class="keyword">do</span> not ignore entries starting with .</span><br><span class="line"><span class="comment"># 以列表形式展示所有的文件</span></span><br><span class="line">-l                         use a long listing format</span><br><span class="line"><span class="comment"># 输出每个文件的索引值</span></span><br><span class="line">-i, --inode                <span class="built_in">print</span> the index number of each file</span><br><span class="line"><span class="comment"># 按照文件大小排序</span></span><br><span class="line">-S                         sort by file size</span><br><span class="line"><span class="comment"># 以相反次序展示</span></span><br><span class="line">-r, --reverse              reverse order <span class="keyword">while</span> sorting</span><br><span class="line"><span class="comment"># 同 -a ，但不列出 “.” (当前目录) 及 “..” (父目录)</span></span><br><span class="line">-A, --almost-all           <span class="keyword">do</span> not list implied . and ..</span><br><span class="line"><span class="comment"># 显示每个文件的作者，和-l配合使用</span></span><br><span class="line">      --author               with -l, <span class="built_in">print</span> the author of each file</span><br><span class="line">    <span class="comment"># 递归显示所有的子文件夹</span></span><br><span class="line">    -R, --recursive            list subdirectories recursively</span><br><span class="line">    <span class="comment"># 水平列出文件，以逗号分隔</span></span><br><span class="line">    -m                         fill width with a comma separated list of entries</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 文件颜色说明</span></span><br><span class="line">    白色 普通文件</span><br><span class="line">    蓝色 文件夹</span><br><span class="line">    绿色 可执行文件</span><br><span class="line">    红色 压缩文件</span><br><span class="line">    浅蓝色 链接文件</span><br><span class="line">    红色闪烁 链接的文件有问题</span><br><span class="line">    黄色 设备文件</span><br></pre></td></tr></table></figure><h4 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前目录的所有文件</span></span><br><span class="line"><span class="comment"># PS：文件夹也是一种文件，叫文件夹文件</span></span><br><span class="line">[root@zhima /]<span class="comment"># ls</span></span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以列表形式显示当前目录下的所有文件，不显示.和..</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls -A -l</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root    4 Jan  8 10:37 file1</span><br><span class="line">-rw-r--r-- 1 root root    4 Jan  8 10:41 file2</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jan  8 10:47 temp</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jan  5 16:05 university</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jan  5 16:14 zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以列表形式显示当前目录下的所有文件，包括隐藏文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls -a -l</span></span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x.  5 root root 4096 Jan  8 10:47 .</span><br><span class="line">dr-xr-xr-x. 19 root root 4096 Jan  8 11:19 ..</span><br><span class="line">-rw-r--r--   1 root root    4 Jan  8 10:37 file1</span><br><span class="line">-rw-r--r--   1 root root    4 Jan  8 10:41 file2</span><br><span class="line">drwxr-xr-x   2 root root 4096 Jan  8 10:47 temp</span><br><span class="line">drwxr-xr-x   3 root root 4096 Jan  5 16:05 university</span><br><span class="line">drwxr-xr-x   3 root root 4096 Jan  5 16:14 zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 / 目录下的所有文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls /</span></span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><p>这里说一下<code>ls -al</code>中展示了文件的哪些属性，分别都代表什么意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima home]<span class="comment"># ls -Al</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root    4 Jan  8 10:37 file1</span><br><span class="line">-rw-r--r-- 1 root root    4 Jan  8 10:41 file2</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jan  8 10:47 temp</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jan  5 16:05 university</span><br><span class="line">drwxr-xr-x 3 root root 4096 Jan  5 16:14 zhima</span><br></pre></td></tr></table></figure><p>将每一行分为6组来看</p><h5 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108110922803.png" class title="第一组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一组固定10个字符</span></span><br><span class="line"><span class="comment"># 第一个字符是表示文件类型，有下面常见的几种</span></span><br><span class="line">d文件夹</span><br><span class="line">-普通文件</span><br><span class="line">l链接文件（Linked File）</span><br><span class="line">b装置文件，里面可能有供存储的接口设备</span><br><span class="line">c装置文件里面的串行端口设备，例如键盘或者鼠标</span><br><span class="line"><span class="comment"># 后9个字符表示操作权限，每3个字符为一组</span></span><br><span class="line"><span class="comment"># 下面是四种权限类型的表示</span></span><br><span class="line">    r<span class="built_in">read</span>（可读）</span><br><span class="line">    wwrite（可写）</span><br><span class="line">    xexecute（可执行）</span><br><span class="line">    -没有此权限</span><br><span class="line"><span class="comment"># 第一组三个字符是表示 属主（文件的所有者） 对此文件的权限</span></span><br><span class="line"><span class="comment"># 第二组三个字符是表示 属组（文件的所有者的同组的用户） 对此文件的权限</span></span><br><span class="line"><span class="comment"># 第三组三个字符是表示 其他用户 对此文件的权限说明</span></span><br></pre></td></tr></table></figure><h5 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108111019451.png" class title="第二组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此文件是文件夹文件</span></span><br><span class="line">此位数字表示的是文件夹内的文件数量</span><br><span class="line"><span class="comment"># 此文件夹是文件</span></span><br><span class="line">此位数字固定是1</span><br></pre></td></tr></table></figure><h5 id="第三组"><a href="#第三组" class="headerlink" title="第三组"></a>第三组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108111252021.png" class title="第三组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一列是属主</span></span><br><span class="line"><span class="comment"># 第一列是属组</span></span><br></pre></td></tr></table></figure><h5 id="第四组"><a href="#第四组" class="headerlink" title="第四组"></a>第四组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108111403826.png" class title="第四组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件大小</span></span><br></pre></td></tr></table></figure><h5 id="第五组"><a href="#第五组" class="headerlink" title="第五组"></a>第五组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108111453411.png" class title="第五组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件创建时间</span></span><br></pre></td></tr></table></figure><h5 id="第六组"><a href="#第六组" class="headerlink" title="第六组"></a>第六组</h5><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/image-20230108111535607.png" class title="第六组"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名</span></span><br></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>复制文件或目录</p><h4 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：cp [参数] 源文件 目标文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># cp file1 file2</span></span><br><span class="line"><span class="comment"># 常用可选参数</span></span><br><span class="line"><span class="comment"># 若目标文件已存在，直接覆盖</span></span><br><span class="line">    -f, --force                  <span class="keyword">if</span> an existing destination file cannot be </span><br><span class="line">    opened, remove it and try again</span><br><span class="line"><span class="comment"># 递归复制文件夹</span></span><br><span class="line">-R, -r, --recursive          copy directories recursively</span><br><span class="line"><span class="comment"># 覆盖前询问</span></span><br><span class="line">-i, --interactive            prompt before overwrite</span><br><span class="line"><span class="comment"># 详细显示复制过程</span></span><br><span class="line">-v, --verbose                explain what is being <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 建立硬链接</span></span><br><span class="line">-l, --link                   hard link files instead of copying</span><br><span class="line"><span class="comment"># 建立软链接（符号链接）</span></span><br><span class="line">-s, --symbolic-link          make symbolic links instead of copying</span><br><span class="line"><span class="comment"># 保留源文件或者目录的所有属性</span></span><br><span class="line">-p                           same as --preserve=mode,ownership,timestamps</span><br><span class="line"><span class="comment"># 当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录</span></span><br><span class="line">-dsame as --no-dereference --preserve=links</span><br><span class="line"><span class="comment"># 等同于 -p -d -r</span></span><br><span class="line">-a, --archive                same as -dR --preserve=all</span><br></pre></td></tr></table></figure><h4 id="参考案例-1"><a href="#参考案例-1" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将源文件file1复制到目标文件file2</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  temp  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># cp file1 file2</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  file2  temp  university  zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源文件file1复制到目标文件file2，如果存在file2，则拷贝一份</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  file2  temp  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># cp -b file1 file2</span></span><br><span class="line">cp: overwrite ‘file2’? y</span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  file2  file2~  temp  university  zhima</span><br></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>创建目录文件</p><h4 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：mkdir [参数] 目录名</span></span><br><span class="line">[root@zhima home]<span class="comment"># mkdir temp</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 创建目录的时候设置权限</span></span><br><span class="line">-m, --mode=MODE   <span class="built_in">set</span> file mode (as <span class="keyword">in</span> chmod)</span><br><span class="line"><span class="comment"># 递归创建多级目录</span></span><br><span class="line">-p, --parents     no error <span class="keyword">if</span> existing, make parent directories as needed</span><br><span class="line"><span class="comment"># 显示创建过程</span></span><br><span class="line">-v, --verbose     <span class="built_in">print</span> a message <span class="keyword">for</span> each created directory</span><br></pre></td></tr></table></figure><h4 id="参考案例-2"><a href="#参考案例-2" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建dir1、dir2两个目录文件</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  temp  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># mkdir dir1 dir2</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">dir1  dir2  file1  temp  university  zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归创建目录</span></span><br><span class="line"><span class="comment"># 错误示范</span></span><br><span class="line">[root@zhima home]<span class="comment"># mkdir a/b/c/d</span></span><br><span class="line">mkdir: cannot create directory ‘a/b/c/d’: No such file or directory</span><br><span class="line"><span class="comment"># 正确示范</span></span><br><span class="line">[root@zhima home]<span class="comment"># mkdir -p a/b/c/d</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">a  dir1  dir2  file1  temp  university  zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录的时候指定权限</span></span><br><span class="line">[root@zhima home]<span class="comment"># mkdir -m 700 dir3</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls -l</span></span><br><span class="line"><span class="comment"># ...省略无关文件...</span></span><br><span class="line">drwx------ 2 root root 4096 Jan  8 11:32 dir3</span><br><span class="line"><span class="comment"># ...省略无关文件...</span></span><br></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>显示当前工作目录</p><h4 id="参考案例-3"><a href="#参考案例-3" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前工作目录</span></span><br><span class="line">[root@zhima c]<span class="comment"># pwd</span></span><br><span class="line">/home/a/b/c</span><br></pre></td></tr></table></figure><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>移动文件或者重命名</p><h4 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：mv [参数] 源文件 目标文件</span></span><br><span class="line"><span class="comment"># 覆盖前询问</span></span><br><span class="line">-i, --interactive            prompt before overwrite</span><br><span class="line"><span class="comment"># 直接覆盖，不询问</span></span><br><span class="line">-f, --force                  <span class="keyword">do</span> not prompt before overwriting</span><br><span class="line"><span class="comment"># 当文件存在时，覆盖前为其创建一个备份</span></span><br><span class="line">-b                           like --backup but does not accept an argument</span><br><span class="line"><span class="comment"># 当源文件比目标文件新或者目标文件不存在的时候才执行移动操作</span></span><br><span class="line">-u, --update                 move only when the SOURCE file is newer</span><br><span class="line">                                 than the destination file or when the</span><br><span class="line">                                 destination file is missing</span><br></pre></td></tr></table></figure><h4 id="参考案例-4"><a href="#参考案例-4" class="headerlink" title="参考案例"></a>参考案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将dir1重命名为dir4</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">a  dir1  file1  temp  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># mv dir1 dir4</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">a  dir4  file1  temp  university  zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将file1移动到temp文件夹中</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">file1  temp  university  zhima</span><br><span class="line">[root@zhima home]<span class="comment"># mv file1 temp/</span></span><br><span class="line">[root@zhima home]<span class="comment"># ls</span></span><br><span class="line">temp  university  zhima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/home/temp目录中的所有内容都复制到当前工作路径下，并且重命名为dir</span></span><br><span class="line">[root@zhima zhima]<span class="comment"># mv -f /home/temp/ ./dir</span></span><br><span class="line">[root@zhima zhima]<span class="comment"># ls</span></span><br><span class="line">nextcloud  dir</span><br></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>切换工作目录</p><h4 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h4><p>在Linux系统中，一切皆文件，下面是Linux系统中的目录结构</p><img src="/javaEE/2023/01/07/Linux-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/Linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" class title="Linux的文件结构图"><ul><li><strong>&#x2F;bin:</strong>  bin是Binary的缩写，这个目录存放着最经常使用的命令</li><li><strong>&#x2F;boot:</strong>  这里存放的是启动Linux的时候使用的一些核心文件（不要动）</li><li><strong>&#x2F;dev:</strong>  dev是Device的缩写，存放的是Linux的外设设备，</li><li><strong>&#x2F;etc:</strong>  <strong>这个目录是用来存放所有的系统管理所需要的配置文件和子目录</strong></li><li><strong>&#x2F;home:</strong>  <strong>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是使用用户的账号来命名的</strong></li><li><strong>&#x2F;lib:</strong>  这里存放着系统最基本的动态连接共享库（不要动）</li><li><strong>&#x2F;lost+found:</strong>  这个目录一般是空的，但是当服务器意外关闭的时候，里面会存在一些错误文件（不要动）</li><li><strong>&#x2F;media:</strong>  Linux系统会自动识别一些设备，例如u盘，光驱等等</li><li><strong>&#x2F;mnt:</strong>  这个目录是给用户来临时挂载别的文件系统的（后面会把本地文件挂载在这个目录下）</li><li><strong>&#x2F;opt:</strong>  <strong>给主机额外安装软件所在的目录</strong></li><li><strong>&#x2F;proc:</strong>  这是一个虚拟的目录，他是系统内存的映射，我们可以通过直接访问这个目录来获得系统信息（不用管）</li><li><strong>&#x2F;root（也就是  ~ ）:</strong>  该目录是系统管理员目录，也称作超级权限者的用户主目录</li><li><strong>&#x2F;sbin:</strong>  s就是super的意思，这里存放的是系统管理员使用的系统管理程序</li><li><strong>&#x2F;srv:</strong>  该目录用来存放一些守护进程启动之后需要提取的数据</li><li><strong>&#x2F;sys:</strong>  这是Linux2.6内核的一个很大的改变，该目录下安装了2.6内核中新出现的一个文件系统sysfs</li><li><strong>&#x2F;tmp:</strong>  <strong>这个目录使用来存放一些临时文件的</strong></li><li><strong>&#x2F;usr:</strong>  <strong>这个目录用来存放用户的应用程序和文件</strong></li><li><strong>&#x2F;usr&#x2F;bin:</strong>  系统用户使用的应用程序</li><li><strong>&#x2F;usr&#x2F;sbin:</strong>   超级用户使用的比较高级的管理程序和系统守护进程</li><li>**&#x2F;usr&#x2F;src: **  内核源代码默认存放的地址</li><li><strong>&#x2F;var:</strong>  <strong>这个目录用来存放着一些不断在拓充的东西，习惯性的将一些经常修改的目录放在该目录下</strong></li><li><strong>&#x2F;run:</strong>  是一个临时文件系统，存储系统启动以来的信息，当系统重启时，该目录下的文件应该被删掉（不用管）</li><li><strong>&#x2F;www:</strong>  存放服务器网站的相关的资源，环境，网站</li></ul><blockquote><p>不是每一个目录都一定会存在</p></blockquote><p>然后就是要知道这两个概念</p><ol><li>决定路径</li><li>相对路径</li></ol><p>绝对路径：指的是资源的全路径，比如<code>D:\APP\Typora</code></p><p>相对路径：指的是资源在当前目录下的路径，比如我现在在<code>D:\APP</code>目录下，我要定位到Typora这个目录，我可以直接使用Typora来表示该文件夹</p><h4 id="使用说明-4"><a href="#使用说明-4" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入根路径下的usr目录</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ /]#cd /usr</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">当前在根路径下，我要进入usr目录</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ /]#cd usr</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">返回上一级目录</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ usr]#cd ..</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-安装</title>
      <link href="/javaEE/2023/01/05/Docker-%E5%AE%89%E8%A3%85/"/>
      <url>/javaEE/2023/01/05/Docker-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><h3 id="设置镜像仓库地址"><a href="#设置镜像仓库地址" class="headerlink" title="设置镜像仓库地址"></a>设置镜像仓库地址</h3><h4 id="阿里云-推荐"><a href="#阿里云-推荐" class="headerlink" title="阿里云(推荐)"></a>阿里云(推荐)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更新yum安装包索引"><a href="#更新yum安装包索引" class="headerlink" title="更新yum安装包索引"></a>更新yum安装包索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/docker/</span><br><span class="line">vim daemon.conf</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;registry-mirrors&quot;</span>: [ <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>, <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>, <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;https://k4lo9gcp.mirror.aliyuncs.com&quot;</span> ],</span><br><span class="line">        <span class="attr">&quot;max-concurrent-downloads&quot;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">&quot;debug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;log-level&quot;</span>: <span class="string">&quot;debug&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DockerCompose安装"><a href="#DockerCompose安装" class="headerlink" title="DockerCompose安装"></a>DockerCompose安装</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><h4 id="GIthub下载"><a href="#GIthub下载" class="headerlink" title="GIthub下载"></a>GIthub下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="daocloud下载"><a href="#daocloud下载" class="headerlink" title="daocloud下载"></a>daocloud下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="检查是否安装成功-1"><a href="#检查是否安装成功-1" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3的setup语法糖</title>
      <link href="/javaEE/2022/12/03/Vue3%E7%9A%84setup%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/javaEE/2022/12/03/Vue3%E7%9A%84setup%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3的setup语法糖"><a href="#Vue3的setup语法糖" class="headerlink" title="Vue3的setup语法糖"></a>Vue3的setup语法糖</h2><p>在Vue3中setup函数可谓是组合函数展示的舞台，使用了vue3之后，我们的代码就会呈现下面的这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;xxx&quot;,</span><br><span class="line">        setup()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>基本上所有的代码都在setup中，其他的比如computed计算属性，watch监视属性，生命周期钩子函数</p><p>这些都可以通过引入组合式API来实现。所以Vue3中就有这么一种十分优雅的写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面来说说setup语法糖有哪些用法和需要注意的地方</p><h3 id="Methods和数据的使用"><a href="#Methods和数据的使用" class="headerlink" title="Methods和数据的使用"></a>Methods和数据的使用</h3><p>这就和setup函数中一样的，该怎么写还是怎么写</p><img src="/javaEE/2022/12/03/Vue3%E7%9A%84setup%E8%AF%AD%E6%B3%95%E7%B3%96/image-20221203151836601.png" class title="Methods和数据的使用"><h3 id="子组件的使用"><a href="#子组件的使用" class="headerlink" title="子组件的使用"></a>子组件的使用</h3><p>引入组件只需要引入即可，不需要使用components去注册组件</p><h3 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h3><p><strong>Feacher.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Child :msg=&quot;msg&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let msg = ref(&#x27;父组件给子组件传值&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 这里可以直接拿到msg，不需要用props.去取值</span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    // 这里其实可以不引入defineProps，因为setup解糖的时候，会自动引入的，引入了当然也没问题</span><br><span class="line">    import &#123;defineProps&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let props = defineProps(&#123;</span><br><span class="line">        msg: String</span><br><span class="line">    &#125;);</span><br><span class="line">    // 下面如果还需要使用props中的数据，需要使用props对象去拿到</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h3><p><strong>Feather.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Child @getMsgFromChild=&quot;getMsgFromChild&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    const getMsgFromChild = (msg)=&gt;&#123;</span><br><span class="line">        console.log(&#x27;父组件接收到子组件传来的参数&#x27;,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;/&gt;</span><br><span class="line">&lt;button @click=&quot;sendMsg&quot;&gt;点我给父组件传值&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    // 这里其实可以不引入defineEmits，因为setup解糖的时候，会自动引入的，引入了当然也没问题</span><br><span class="line">    import &#123;ref,defineEmits&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let emits = defineEmits([&#x27;getMsgFromChild&#x27;]);</span><br><span class="line">    let msg = ref(&#x27;&#x27;);</span><br><span class="line">    const sendMsg = ()=&gt;&#123;</span><br><span class="line">        emits(&#x27;getMsgFromChild&#x27;,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="祖孙组件传值"><a href="#祖孙组件传值" class="headerlink" title="祖孙组件传值"></a>祖孙组件传值</h3><p><strong>Feather.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;ref,provide&#125; from &#x27;vue&#x27;;</span><br><span class="line">    let msg = ref(&#x27;msg&#x27;);</span><br><span class="line">    provide(&#x27;pro&#x27;,&#123;</span><br><span class="line">        msg,</span><br><span class="line">        changeMsg: (newVal)=&gt;&#123;</span><br><span class="line">            msg.value = newVal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Child.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Grand/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Grand.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;inject&#125; from &#x27;vue&#x27;;</span><br><span class="line">let pro = inject(&#x27;pro&#x27;);</span><br><span class="line">    pro.changeMsg(&#x27;other&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="computed、watch、钩子函数"><a href="#computed、watch、钩子函数" class="headerlink" title="computed、watch、钩子函数"></a>computed、watch、钩子函数</h3><p>这些都是和在setup函数中写的一样的</p><p>引入组合API即可<code>import &#123;computed、watch、&#125; from &#39;vue&#39;</code></p><h3 id="Vuex的使用"><a href="#Vuex的使用" class="headerlink" title="Vuex的使用"></a>Vuex的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;useStore&#125; from &#x27;vuex&#x27;;</span><br><span class="line">let store = useStore();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-Router的使用"><a href="#Vue-Router的使用" class="headerlink" title="Vue-Router的使用"></a>Vue-Router的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;useRouter,useRoute&#125; from &#x27;vue-router&#x27;;</span><br><span class="line">    let route = useRoute();</span><br><span class="line">    let router = useRouter();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Await的使用"><a href="#Await的使用" class="headerlink" title="Await的使用"></a>Await的使用</h3><p>直接使用即可，不需要加async</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import _axios from &quot;@/plugins/custom_axios&quot;;</span><br><span class="line">    const data = await _axios.get(&#x27;/categories&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取Resources目录下的文件</title>
      <link href="/javaEE/2022/11/26/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Resources%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/javaEE/2022/11/26/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Resources%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="如何获取Resources目录下的文件"><a href="#如何获取Resources目录下的文件" class="headerlink" title="如何获取Resources目录下的文件"></a>如何获取Resources目录下的文件</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String path = <span class="keyword">this</span>.getClass().getClassLoader().getResource(fileName).getPath();</span><br><span class="line">    System.out.println(path);</span><br><span class="line">    String filePath = URLDecoder.decode(path, <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//如果路径中带有中文会被URLEncoder,因此这里需要解码</span></span><br><span class="line">    System.out.println(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function5</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">this</span>.getClass().getResourceAsStream(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p>这种方式要在SpringBoot环境下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function6</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> ClassPathResource(fileName).getInputStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-单调队列</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/05/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/05/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>这个技巧和单调栈一样，运用的场景比较少</p><p>它本质也是一个队列，只不过是运用了一些巧妙的逻辑</p><p>在内部维护了一个递增或者递减的序列</p><p>然后还保持了先进先出的特性</p><p>下面直接看题</p><h3 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/05/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/image-20221105094229651.png" class title="239.滑动窗口最大值"><p>这道题的描述不就是使用滑动窗口技巧吗，我们知道在滑动窗口技巧中</p><p>最重要的就是清楚在何时扩大窗口，在何时缩小窗口</p><p>但是这道题中，我没法根据出窗口的那个元素来判断是否需要更新最大值，如何更新</p><p>如果出窗口的就是最大值，那我就需要重新遍历一遍窗口找到最值，这样的时间复杂度是较高的</p><p>所以就需要使用到单调队列的技巧了</p><p>这里我们自己维护一个单调队列的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonotonousQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在队尾添加元素 n</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="comment">// 返回当前单调队列中的最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 队头元素如果是n的话就删除它</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在队尾添加元素的时候，需要将所有队尾元素比它小的元素都出队，直到遇到第一个比它大的元素或者队列为空的时候</p><p>最大值就是队列的队首元素</p><p>下面看这道题的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        MonotonousQueue window = <span class="keyword">new</span> MonotonousQueue();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 前k-1个元素直接入队</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>)&#123;</span><br><span class="line">                window.push(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 第k个元素入队</span></span><br><span class="line">                window.push(nums[i]);</span><br><span class="line">                <span class="comment">// 将窗口中的最大值放入结果集</span></span><br><span class="line">                res.add(window.max());</span><br><span class="line">                <span class="comment">// 将窗口第一个元素出队</span></span><br><span class="line">                window.pop(nums[i-k+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将res转换为数组返回</span></span><br><span class="line">        <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            r[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonotonousQueue</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 在队尾添加元素 n</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 维护递减的序列</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()&amp;&amp;n&gt;queue.getLast())&#123;</span><br><span class="line">            queue.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.addLast(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回当前单调队列中的最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 队头元素如果是n的话就删除它</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queue.getFirst()==n)&#123;</span><br><span class="line">            queue.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-单调栈</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>单调栈就是一种栈，只不过用了一种逻辑在内部维护了所有的栈内元素递增或者递减的序列</p><p>这种技巧用的不多，一般就是以下讲到的典型的题目</p><p>先来体会一下单调栈</p><h3 id="技巧阐述"><a href="#技巧阐述" class="headerlink" title="技巧阐述"></a>技巧阐述</h3><p>我们以题入技</p><p>题目如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个数组nums，然后返回一个等长的结果数组，结果数组中对应索引存储着nums数组中该索引后第一个比它大的元素，如果没有更大的元素，就存 -1。</span></span><br><span class="line">例：</span><br><span class="line">输入：[2,6,3,7,4]</span><br><span class="line">输出：[6,7,7,-1,-1]</span><br></pre></td></tr></table></figure><p>函数签名如下：<code>int[] nextBigerElement(int[] nums);</code></p><p>题目很好理解，用暴力解的话就是在每一个元素向后面找第一个比它大的元素，时间复杂度是<code>O(n^2)</code></p><p>现在我们使用单调栈的技巧来解决这道题</p><p><code>nums = [2,6,3,7,4]</code></p><p>先来看这张图</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/image-20221104123734169.png" class title="单调栈"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nextBigerElement(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">// 倒着遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 如果栈顶元素比nums[i]小，则出栈，直到栈顶元素比nums[i]大或者栈为空</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= nums[i]) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">        stack.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="496-下一个更大元素Ⅰ"><a href="#496-下一个更大元素Ⅰ" class="headerlink" title="496.下一个更大元素Ⅰ"></a><a href="https://leetcode.cn/problems/next-greater-element-i/">496.下一个更大元素Ⅰ</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/image-20221104122354999.png" class title="496.下一个更大元素Ⅰ"><p>题目意思有点绕，这里解释一下。</p><p>首先，nums1是nums2的子集</p><p>其次，题目要求返回的是nums1的每一个元素在nums2中的位置后的比它大的元素的值</p><p>那么题目意思明白了之后，这道题就很简单了</p><p>我只需要对nums2的每一个元素找到其后面第一个比它大的元素的数组</p><p>然后使用一个hash表存起来，再遍历nums1，用nums1[1]在map中取得结果将其放入结果集中，最后返回</p><p>下面看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nextBigerElement(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 如果栈顶元素比nums[i]小，则出栈，直到栈顶元素比nums[i]大或者栈为空</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;stack.peek()&lt;=nums[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = stack.isEmpty()?-<span class="number">1</span>:stack.peek();</span><br><span class="line">            stack.push(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = nextBigerElement(nums2);</span><br><span class="line">        <span class="comment">// key是nums的值，value是其后面第一个比它大的数</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class="line">            map.put(nums2[i],res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            r[i] = map.get(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503.下一个更大元素 II"></a><a href="https://leetcode.cn/problems/next-greater-element-ii/">503.下一个更大元素 II</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/image-20221104133204392.png" class title="503. 下一个更大元素 II"><p>这一题是循环数组，很简单的一个技巧，那就是将数组复制一遍放到原数组后面，这样不就实现了循环数组找到下一个元素了吗</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/image-20221104191920728.png" class title="复制一遍数组"><p>但是这里我们不新建一个两倍长的数组然后拷贝数组</p><p>这里我们使用<code>%</code>符号来巧妙地完成逻辑上扩一倍地效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElements(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">// 一样的从最后一个元素开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len * <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= nums[i]) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里的索引都需要对len取余</span></span><br><span class="line">        res[i % len] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">        stack.push(nums[i % len]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a><a href="https://leetcode.cn/problems/daily-temperatures/">739.每日温度</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/04/%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/image-20221105092453638.png" class title="739.每日温度"><p>这道题目其实和我们一开始的技巧阐述的思想是一样的</p><p>但是这里返回的数组中存储的是索引而已</p><p>这道题直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] temperatures) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[temperatures.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = temperatures.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 如果栈顶元素比当前元素小，则一直出栈，直到出现第一个比它大的数或者栈空</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt;= temperatures[i]) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注意:题目需要的是几天后，所以是stack.peek()-i而不是stack.peek();</span></span><br><span class="line">            res[i] = stack.isEmpty() ? <span class="number">0</span> : stack.peek() - i;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-区间问题</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><p>区间问题是什么，其实就是给了你一组区间，比如<code>[[2,6],[9,13],[6,8],[1,4],[3,5],[9,11]]</code></p><p>然后让你有多少区间是被覆盖的，合并所有可以合并的区间等等操作</p><p>这种题目就两个步骤</p><p>第一步排序，按照左边界升序排序，右边界降序排序</p><p>第二步画图，画出两个边界之间的关系的所有可能的情况</p><h3 id="1288-删除被覆盖的区间"><a href="#1288-删除被覆盖的区间" class="headerlink" title="1288.删除被覆盖的区间"></a><a href="https://leetcode.cn/problems/remove-covered-intervals/description/">1288.删除被覆盖的区间</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103145945267.png" class title="1288.删除被覆盖的区间"><p>然后我们按照以上两个步骤来解决这道题</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>以<code>[[2,6],[9,13],[6,8],[1,4],[3,5],[9,11]]</code>作为测试数据</p><p>将其按照左边界升序排序，右边界降序排序后</p><p>变为<code>[[1,4],[2,6],[3,5],[6,8],[9,13],[9,11]]</code></p><p>用图像来表示就是这样</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103151409011.png" class title="排序后的区间"><h4 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h4><p>然后我们来画图将所有出现的区间关系画出来</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103152057528.png" class title="区间的9种关系"><p>​其中①②③这三种情况都是属于覆盖的情况，所以我只要将这些情况记录到res中，最后<code>intervals.length-res</code>就是需要删除的被覆盖的区间个数</p><p>​④⑦都是属于区间相交的情况</p><p>​⑤⑥⑧⑨属于区间交错的情况</p><p>心中有图，代码我有！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeCoveredIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 按照左边界升序排序，有边界降序排序</span></span><br><span class="line">        Arrays.sort(intervals,(a,b)-&gt;a[<span class="number">0</span>]==b[<span class="number">0</span>]?b[<span class="number">1</span>]-a[<span class="number">1</span>]:a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 记录被覆盖的区间个数</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录左边界</span></span><br><span class="line">        <span class="keyword">int</span> left = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 记录右边界</span></span><br><span class="line">        <span class="keyword">int</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 从第二组边界开始遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 拿到这组边界</span></span><br><span class="line">            <span class="keyword">int</span>[] interval = intervals[i];</span><br><span class="line">            <span class="keyword">int</span> a1 = interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b1 = interval[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果这组的边界的左边界大于等于left并且有边界小于right，则说明这组边界被[left,right]覆盖，res自增</span></span><br><span class="line">            <span class="keyword">if</span> (a1 &gt;= left &amp;&amp; b1 &lt;= right) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果这组边界的左边界大于等于right说明两者相错开，更新left和right</span></span><br><span class="line">            <span class="keyword">if</span> (a1 &gt;= right) &#123;</span><br><span class="line">                left = a1;</span><br><span class="line">                right = b1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果right在这组边界的中间，说明两组边界🍌相交吗，更新right</span></span><br><span class="line">            <span class="comment">// 这一步更新right其实就是合并这两个区间</span></span><br><span class="line">            <span class="keyword">if</span> (right &gt;= a1 &amp;&amp; right &lt;= b1) &#123;</span><br><span class="line">                right = b1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.length-res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56.合并区间"></a><a href="https://leetcode.cn/problems/merge-intervals/">56.合并区间</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103153222763.png" class title="56.合并区间"><p>这一题也是按照上述两个步骤做就行了，这里直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(intervals,(a,b)-&gt;a[<span class="number">0</span>]==b[<span class="number">0</span>]?b[<span class="number">1</span>]-a[<span class="number">1</span>]:a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 因为不确定最后会保留几个区间，所以这里使用List来暂时保存结果</span></span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; intervals.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] interval = intervals[i];</span><br><span class="line">            <span class="keyword">int</span> a1 = interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b1 = interval[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果区间完全相错，直接将[left,right]区间加入结果集中，更新left和right</span></span><br><span class="line">            <span class="keyword">if</span>(a1&gt;right)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left,right&#125;);</span><br><span class="line">                left = a1;</span><br><span class="line">                right = b1;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果这个区间被[left,right]区间覆盖，不用管</span></span><br><span class="line">            <span class="keyword">if</span>(a1&gt;=left&amp;&amp;b1&lt;=right)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这个区间和[left,right]区间相交，更新right为b1</span></span><br><span class="line">            <span class="keyword">if</span>(right&gt;=a1&amp;&amp;right&lt;b1)&#123;</span><br><span class="line">                right = b1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将最后一个区间加入结果集</span></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left,right&#125;);</span><br><span class="line">        <span class="comment">// 转换list为二维矩阵返回</span></span><br><span class="line">        <span class="keyword">int</span>[][] r = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            r[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用以下的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals,(a,b)-&gt;a[<span class="number">0</span>]==b[<span class="number">0</span>]?b[<span class="number">1</span>]-a[<span class="number">1</span>]:a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 手动控制i的增长</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; intervals.length;)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] interval = intervals[i];</span><br><span class="line">            <span class="keyword">int</span> a1 = interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b1 = interval[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果相交或者覆盖</span></span><br><span class="line">            <span class="keyword">if</span> (a1&gt;=left&amp;&amp;a1&lt;=right)&#123;</span><br><span class="line">                right = Math.max(right,b1);</span><br><span class="line">                i++;</span><br><span class="line">                <span class="comment">// 当i小于intervals.length</span></span><br><span class="line">                <span class="comment">// 左边界在[left,right]之间</span></span><br><span class="line">                <span class="comment">// 则一直往后找最大的right</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; intervals.length)&#123;</span><br><span class="line">                    <span class="keyword">int</span>[] temp = intervals[i];</span><br><span class="line">                    <span class="keyword">if</span> (temp[<span class="number">0</span>] &gt;= left &amp;&amp; temp[<span class="number">0</span>] &lt;= right) &#123;</span><br><span class="line">                        right = Math.max(right,temp[<span class="number">1</span>]);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left,right&#125;);</span><br><span class="line">                <span class="comment">// 如果找到了最后一个则直接退出循环</span></span><br><span class="line">                <span class="keyword">if</span> (i==intervals.length)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                left = intervals[i][<span class="number">0</span>];</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 区间相错了，直接将区间[left,right]加入集合然后i++，更新jleft和right</span></span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left,right&#125;);</span><br><span class="line">                left = a1;</span><br><span class="line">                right = b1;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] r = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            r[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103155353506.png" class title="区间合并"><h3 id="986-区间列表的交集"><a href="#986-区间列表的交集" class="headerlink" title="986.区间列表的交集"></a><a href="https://leetcode.cn/problems/interval-list-intersections/">986.区间列表的交集</a></h3><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/11/03/%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/image-20221103162640845.png" class title="区间列表的交集"><p>这道题和上述思路一致的，只需要将交集的部分放入res中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] intervalIntersection(<span class="keyword">int</span>[][] firstList, <span class="keyword">int</span>[][] secondList) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> firstIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> secondIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(firstIndex&lt;firstList.length&amp;&amp;secondIndex&lt;secondList.length)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] firstInterval = firstList[firstIndex];</span><br><span class="line">            <span class="keyword">int</span>[] secondInterval = secondList[secondIndex];</span><br><span class="line">            <span class="comment">// 相交</span></span><br><span class="line">            <span class="keyword">if</span>(firstInterval[<span class="number">1</span>]&gt;=secondInterval[<span class="number">0</span>]&amp;&amp;firstInterval[<span class="number">0</span>]&lt;=secondInterval[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">// 取两个左边最大的作为交集的左边界，取两个右边界最小的作为交集的右边界</span></span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">                    Math.max(secondInterval[<span class="number">0</span>],firstInterval[<span class="number">0</span>]),</span><br><span class="line">                    Math.min(firstInterval[<span class="number">1</span>],secondInterval[<span class="number">1</span>])</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果第二个区间的右边界比第一个区间的右边界大</span></span><br><span class="line">            <span class="comment">// 则firstIndex自增，因为第一个区间的右边界到第二个区间的左边界有可能被firstList的下一个区间相交的</span></span><br><span class="line">            <span class="keyword">if</span>(secondInterval[<span class="number">1</span>]&gt;firstInterval[<span class="number">1</span>])&#123;</span><br><span class="line">                firstIndex++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                secondIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] r = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            r[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-子序列问题</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/28/%E7%AE%97%E6%B3%95-%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/28/%E7%AE%97%E6%B3%95-%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><p>子序列问题是很常见的一类问题，与之类似的还有子串问题，这两者有什么区别呢？</p><p>子序列是不需要连续的，但是字串是需要连续的。</p><p><code>&quot;abcd&quot;</code></p><p>子序列是<code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;ad&quot;,&quot;bc&quot;,&quot;bd&quot;,&quot;cd&quot;]</code></p><p>字串是<code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;ab&quot;,&quot;bc&quot;,&quot;cd&quot;]</code></p><p>观察一下两者之间的区别。</p><p>这类子序列问题一般使用动态规划来做，一般有以下两种思路</p><h3 id="一维dp数组"><a href="#一维dp数组" class="headerlink" title="一维dp数组"></a>一维dp数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int[] dp = new int[str.length()];</span></span><br><span class="line">dp[i]的意思是在字符串str[0,i]中，以str[i]结尾的目标子序列的长度是dp[i]</span><br></pre></td></tr></table></figure><h4 id="栗题：力扣300最长递增子序列"><a href="#栗题：力扣300最长递增子序列" class="headerlink" title="栗题：力扣300最长递增子序列"></a>栗题：力扣300最长递增子序列</h4><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/28/%E7%AE%97%E6%B3%95-%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/image-20221028124510769.png" class title="最长递增子序列">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【53-Medium】最大子数组和</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/25/%E3%80%9053-Medium%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/25/%E3%80%9053-Medium%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h2><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">-2</span>,1,<span class="string">-3</span>,4,<span class="string">-1</span>,2,1,<span class="string">-5</span>,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,<span class="string">-1</span>,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：nums </span>=<span class="string"> [1]</span></span><br><span class="line"><span class="string">输出：1</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[5,4,-1,7,8]</span></span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><p>Related Topics</p><ul><li>数组</li><li>分治</li><li>动态规划</li></ul><h3 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res = Math.max(maxSubArray(nums, i), res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数i当以：返回以nums[index]结尾的连续子数组的最大和</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = nums[index];</span><br><span class="line">        max = Math.max(maxSubArray(nums, index - <span class="number">1</span>) + nums[index], max);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/25/%E3%80%9053-Medium%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/image-20221025142640502.png" class title="大数据测试"><h3 id="带备忘录的递归"><a href="#带备忘录的递归" class="headerlink" title="带备忘录的递归"></a>带备忘录的递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] meno = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, meno, <span class="number">0</span>, nums.length);</span><br><span class="line">        maxSubArray(nums, nums.length - <span class="number">1</span>, meno);</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t : meno) &#123;</span><br><span class="line">            res = Math.max(res, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数定义：返回以nums[index]结尾的连续子数组的最大和</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, <span class="keyword">int</span>[] meno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (meno[index] != nums[index]) &#123;</span><br><span class="line">            <span class="keyword">return</span> meno[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = nums[index];</span><br><span class="line">        max = Math.max(maxSubArray(nums, index - <span class="number">1</span>, meno) + nums[index], max);</span><br><span class="line">        meno[index] = max;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dp[i]是nums的[0,i]形成的最大子数组的和</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(</span><br><span class="line">                    <span class="comment">// i不加入nums的[0,i-1]形成的子数组</span></span><br><span class="line">                    nums[i],</span><br><span class="line">                    <span class="comment">// i加入nums的[0,i-1]形成的子数组</span></span><br><span class="line">                    dp[i - <span class="number">1</span>] + nums[i]</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取最大值</span></span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t : dp) &#123;</span><br><span class="line">            res = Math.max(res, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-遍历二维矩阵的各种花样</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="遍历二维矩阵的各种花样"><a href="#遍历二维矩阵的各种花样" class="headerlink" title="遍历二维矩阵的各种花样"></a>遍历二维矩阵的各种花样</h2><blockquote><p>PS：干货很多，建议分多次食用</p></blockquote><h3 id="常规遍历"><a href="#常规遍历" class="headerlink" title="常规遍历"></a>常规遍历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出以下序列: [1 2 3 4...15 16]</span></span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20221023161651441-16780850450761.png" class title="二维矩阵"><p>这个就是按行遍历即可</p><blockquote><p>示例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = matrix.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转遍历"><a href="#旋转遍历" class="headerlink" title="旋转遍历"></a>旋转遍历</h3><blockquote><p>PS：本遍历方法使用生成以下矩阵来讲述，生成会了，遍历自然也会了</p></blockquote><blockquote><p>示意图</p></blockquote><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/%E7%A4%BA%E4%BE%8B%E5%9B%BE-16772853932351.png" class title="示例图"><blockquote><p>遍历思路</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [0,0] [0,1] [0,2] [0,3]👉向右</span></span><br><span class="line"><span class="comment"># [0,4] [1,4] [2,4] [3,4]👇向下</span></span><br><span class="line"><span class="comment"># [4,4] [4,3] [4,2] [4,1]👆向上</span></span><br><span class="line"><span class="comment"># [4,0] [3,0] [2,0][1,0]👈向左</span></span><br><span class="line"><span class="comment"># ......</span></span><br></pre></td></tr></table></figure><h4 id="圈圈法"><a href="#圈圈法" class="headerlink" title="圈圈法"></a>圈圈法</h4><p>第一个思路就是一圈一圈的遍历</p><p>将每一个圈拆为四个部分</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/%E5%9B%9B%E5%B0%8F%E5%BE%AA%E7%8E%AF-16772853932365.png" class title="将一个圈拆为四个部分"><p>第一个循环用来生成<strong>水平向左</strong>的数据</p><p>第二个循环用来生成<strong>垂直向下</strong>的数据</p><p>第三个循环用来生成<strong>水平向右</strong>的数据</p><p>第四个循环用来生成<strong>垂直向上</strong>的数据</p><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p>粉红色的是标注为<strong>每次大循环</strong>的开始处</p><blockquote><p>PS：图片很多，过程很详细</p></blockquote><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-01-16772853932352.png" class title="process-01"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-02-16772853932363.png" class title="process-02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-03-16772853932369.png" class title="process-03"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-04-16772853932364.png" class title="process-04"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-05-16772853932367.png" class title="process-05"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-06-16772853932366.png" class title="process-06"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-07-167728539323611.png" class title="process-07"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-08-16772853932368.png" class title="process-08"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-09-167728539323610.png" class title="process-09"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-10-167728539323613.png" class title="process-10"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-11-167728539323612.png" class title="process-11"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-12-167728539323614.png" class title="process-12"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-13-167728539323615.png" class title="process-13"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-14-167728539323617.png" class title="process-14"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-15-167728539323616.png" class title="process-15"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-16-167728539323618.png" class title="process-16"><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] rotateNumber(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// n / 2即这个矩阵有几个圈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// end即本次这个圈的宽-1</span></span><br><span class="line">        <span class="keyword">int</span> end = n - i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// →</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; end; j++) &#123;</span><br><span class="line">            matrix[i][j] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ↓</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; end; j++) &#123;</span><br><span class="line">            matrix[j][end] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ←</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt; i; j--) &#123;</span><br><span class="line">            matrix[end][j] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ↑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt; i; j--) &#123;</span><br><span class="line">            matrix[j][i] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是奇数，单独处理中间那一格数据</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        matrix[n / <span class="number">2</span>][n / <span class="number">2</span>] = n * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="横平竖直法（推荐）"><a href="#横平竖直法（推荐）" class="headerlink" title="横平竖直法（推荐）"></a>横平竖直法（推荐）</h4><p>这种方法是通过四个边界来辅助生成矩阵</p><blockquote><p>四个边界的示意图</p></blockquote><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20230109192153280-167728678135920.png" class title="四个边界"><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] rotateNumber(<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="comment">// 用来存放生成的旋转数字矩阵</span></span><br><span class="line">    <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 上边界</span></span><br><span class="line">    <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 下边界</span></span><br><span class="line">    <span class="keyword">int</span> down = n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 左边界</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 右边界</span></span><br><span class="line">    <span class="keyword">int</span> right = n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当 counter 比 n * n 小就一直循环</span></span><br><span class="line">    <span class="keyword">while</span> (counter &lt;= n * n) &#123;</span><br><span class="line">        <span class="comment">// 遍历上边界的那一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = left; j &lt;= right; j++) &#123;</span><br><span class="line">            matrix[up][j] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上边界向下移动一行</span></span><br><span class="line">        up++;</span><br><span class="line">        <span class="comment">// 遍历右边界的那一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">            matrix[i][right] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右边界向左移动一行</span></span><br><span class="line">        right--;</span><br><span class="line">        <span class="comment">// 遍历下边界的那一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = right; j &gt;= left; j--) &#123;</span><br><span class="line">            matrix[down][j] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下边界向上移动一行</span></span><br><span class="line">        down--;</span><br><span class="line">        <span class="comment">// 遍历左边界的那一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up; i--) &#123;</span><br><span class="line">            matrix[i][left] = counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左边界向右移动那一行</span></span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回结果数组</span></span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斜遍历"><a href="#斜遍历" class="headerlink" title="斜遍历"></a>斜遍历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出所有由左上向右下方向的对角线: [13 9 14 5 10 15 1 6 11 16 2 7 12 3 8 4]</span></span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20221023162345777-16780850450772.png" class title="Question2"><h4 id="偏移X法"><a href="#偏移X法" class="headerlink" title="偏移X法"></a>偏移X法</h4><p>和往常一样遍历第一行，<code>[0,0] [0,1] [0,2] [0,3] [0,4]</code></p><p>可以发现中间那个对角线是这一行向下偏移的结果，但是不同的位置在 X 方向上的偏移量是不一样的</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20230225094808073.png" class title="X偏移法第一行"><p>遍历第二行<code>[1,0] [1,1] [1,2] [1,3] [1,4]</code></p><p>可以看到和刚刚第一行一样，每一列向下偏移一定量就可以得到主对角线下面的那个对角线了</p><p>（这里先不要管越界的问题，先把思路理清楚，再在代码里面解决越界问题）</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20230225095049771.png" class title="X偏移法第二行"><p>先写出遍历每一行的初始代码，然后我们在这个上面改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        System.out.println(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在遍历每一行的情况，向下偏移就是对角线了</p><p>每一列的偏移量都是不一样的，接下来要解决的就是如何算出每一列的偏移量</p><p>经过观察可以发现，当前这一列的偏移量就是当前的列值，那么就好办了直接用<code>j</code>就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        System.out.println(matrix[i + j][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在还有一个问题，就是得到的对角线是部分不合法的，那么接下来就是如何截取合法的对角线部分</p><p>因为对角线是由每一行向下偏移而来，对角线越界的根本原因是每一行遍历多了</p><p>那么只要逐渐减少每一行的遍历长度即可，每一行少遍历 i 的长度即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; j++) &#123;</span><br><span class="line">        System.out.println(matrix[i + j][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h5><blockquote><p>PS：注意右上角</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i; j++) &#123;</span><br><span class="line">        System.out.println(matrix[i + j][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span> - i; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="comment">// 偏移量</span></span><br><span class="line">        <span class="keyword">int</span> offset = len - <span class="number">1</span> - j;</span><br><span class="line">        System.out.println(matrix[i - offset][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="偏移Y法"><a href="#偏移Y法" class="headerlink" title="偏移Y法"></a>偏移Y法</h4><p>这个方法和偏移 X 法有异曲同工之妙</p><p>只不过从遍历每一行变成了遍历每一列</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20230225113000196.png" class title="Y偏移遍历第一列"><p>和刚刚一样，先写出遍历每一列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后向右边偏移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i][j + i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对角线不合法，截取合法部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - j; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i][j + i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完整示例代码-1"><a href="#完整示例代码-1" class="headerlink" title="完整示例代码"></a>完整示例代码</h5><blockquote><p>PS：注意左下角</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span> - j; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = len - <span class="number">1</span> - i;</span><br><span class="line">        System.out.println(matrix[i][j - offset]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - j; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i][i + j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="偏移对角线法（推荐）"><a href="#偏移对角线法（推荐）" class="headerlink" title="偏移对角线法（推荐）"></a>偏移对角线法（推荐）</h4><p>可以发现偏移 X 法和偏移 Y 法都比较麻烦</p><p>所以我比较推荐这种方法，根据对角线来做偏移就会简单很多</p><p>从左上顶角到右下顶角的那条对角线如下<code>[0,0] [1,1] [2,2] [3,3]</code></p><blockquote><p>@表示越界舍弃</p></blockquote><p>整体往下偏移 1 位，就是<code>[1,0] [2,1] [3,2] [4,3](@)</code></p><p>整体往下偏移 2 位，就是<code>[2,0] [3,1] [4,2](@) [5,3](@)</code></p><p>整体往下偏移 3 位，就是<code>[3,0] [4,1] [5,2](@) [6,3](@)</code></p><p>整体往上偏移 1 位，就是<code>[-1,0](@) [0,1] [1,2] [2,3]</code></p><p>整体往上偏移 2 位，就是<code>[-2,0](@) [-1,1](@) [-1,0][0,2] [1,3]</code></p><p>整体往上偏移 3 位，就是<code>[-3,0](@) [-2,1](@) [-1,2](@) [0,3]</code></p><blockquote><p>如何解决越界</p></blockquote><p>既然完整的对角线偏移会出现越界，那就偏移部分的对角线不就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = matrix.length;</span><br><span class="line"><span class="comment">// 输出部分对角线，从完整开始逐渐变短</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; len; offset++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - offset; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这时候输出的依次是</span></span><br><span class="line"><span class="comment">// [0,0] [1,1] [2,2] [3,3](offset=0)</span></span><br><span class="line"><span class="comment">// [0,0] [1,1] [2,2](offset=1)</span></span><br><span class="line"><span class="comment">// [0,0] [1,1](offset=2)</span></span><br><span class="line"><span class="comment">// [0,0](offset=3)</span></span><br><span class="line"><span class="comment">// 那么只需要根据部分的对角线向下偏移即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; len; offset++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - offset; i++) &#123;</span><br><span class="line">        System.out.println(matrix[i + offset][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样的输出结果就是</span></span><br><span class="line"><span class="comment">// [0,0] [1,1] [2,2] [3,3](offset=0)</span></span><br><span class="line"><span class="comment">// [1,0] [2,1] [3,2](offset=1)</span></span><br><span class="line"><span class="comment">// [2,0] [3,1](offset=2)</span></span><br><span class="line"><span class="comment">// [3,0](offset=3)</span></span><br></pre></td></tr></table></figure><p>在理解了上述的方法后，修改下来完成第一部分的遍历，即这一块的遍历</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20230225093443715.png" class title="image-20230225093443715"><p>这个和刚刚不同的地方在于它的偏移量是从大到小的，上面那个理解了，这个应该也不难</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [3,0]</span></span><br><span class="line"><span class="comment">// [2,0] [3,1]</span></span><br><span class="line"><span class="comment">// [1,0] [2,1] [3,2]</span></span><br><span class="line"><span class="comment">// [0,0] [1,1] [2,2] [3,3]</span></span><br><span class="line"><span class="comment">// offset是对角线在x方向的偏移量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> offset = len - <span class="number">1</span>; offset &gt;= <span class="number">0</span>; offset--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - offset; i++) &#123;</span><br><span class="line">        <span class="comment">// 向下偏移</span></span><br><span class="line">        System.out.println(matrix[i + offset][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完整示例代码-2"><a href="#完整示例代码-2" class="headerlink" title="完整示例代码"></a>完整示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tiltPrint</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = matrix.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> offset = len - <span class="number">1</span>; offset &gt;= <span class="number">0</span>; offset--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - offset; i++) &#123;</span><br><span class="line">            <span class="comment">// 向下偏移</span></span><br><span class="line">            System.out.println(matrix[i + offset][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">1</span>; offset &lt; len; offset++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 向上偏移</span></span><br><span class="line">            System.out.println(matrix[i - offset][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="螺旋遍历"><a href="#螺旋遍历" class="headerlink" title="螺旋遍历"></a>螺旋遍历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出螺旋遍历顺序: [1 2 3 4 5 6 7 8 9 10 11 ... 21]</span></span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/image-20221023180033863-16780850450773.png" class title="螺旋遍历"><h4 id="拆解法"><a href="#拆解法" class="headerlink" title="拆解法"></a>拆解法</h4><p>将这个路径拆解开</p><p>拆解如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [0,0] -- [0,1] [1,0]</span></span><br><span class="line"><span class="comment"># [2,0] [1,1] [0,2] --- [0,3] [1,2] [2,1] [3,0]</span></span><br><span class="line"><span class="comment"># [4,0] [3,1] [2,2] [1,3] [0,4] --- [0,5] [1,4] [2,3] [3,2] [4,1] [5,0]</span></span><br></pre></td></tr></table></figure><h5 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h5><p>粉红色的是标注为<strong>每次大循环</strong>的开始处</p><p>标注<strong>内层循环初始化</strong>的是该循环刚要开始时候的数据</p><blockquote><p>PS：图片很多，过程很详细</p></blockquote><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-01-167730279866922.png" class title="process-01"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-02-167730279867023.png" class title="process-02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-03-167730279867024.png" class title="process-03"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-04-167730279867025.png" class title="process-04"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-05-167730279867026.png" class title="process-05"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-06-167730279867027.png" class title="process-06"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-07-167730279867028.png" class title="process-07"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-08-167730279867029.png" class title="process-08"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-09-167730279867030.png" class title="process-09"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-10-167730279867031.png" class title="process-10"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-11-167730279867032.png" class title="process-11"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-12-167730279867033.png" class title="process-12"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-13-167730279867034.png" class title="process-13"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-14-167730279867135.png" class title="process-14"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-15-167730279867136.png" class title="process-15"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-16-167730279867137.png" class title="process-16"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-17-167730279867338.png" class title="process-17"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-18-167730279867339.png" class title="process-18"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-19-167730279867340.png" class title="process-19"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-20-167730279867341.png" class title="process-20"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-21-167730279867343.png" class title="process-21"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-22-167730279867344.png" class title="process-22"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-23-167730279867348.png" class title="process-23"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-24-167730279867342.png" class title="process-24"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-25-167730279867345.png" class title="process-25"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-26-167730279867346.png" class title="process-26"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/23/%E7%AE%97%E6%B3%95-%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E7%9A%84%E5%90%84%E7%A7%8D%E8%8A%B1%E6%A0%B7/process-27-167730279867347.png" class title="process-27"><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i记录了次数和每一次输出开始的点的row</span></span><br><span class="line"><span class="comment">// 0 2 4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i+=<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一个输出的数字的column坐标开头都是0</span></span><br><span class="line">    <span class="comment">// [0,0][2,0][4,0]</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 第一个内循环是左下角往右上角方向的</span></span><br><span class="line">    <span class="comment">// k（row）从i自减</span></span><br><span class="line">    <span class="comment">// j（column）自增到row到0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        System.out.print(matrix[k][j++]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束位置</span></span><br><span class="line"><span class="keyword">int</span> end=j;</span><br><span class="line">    <span class="comment">// 如果n是奇数，在最后一次大循环中就不会有这个小循环了</span></span><br><span class="line">    <span class="keyword">if</span>(j &gt;= matrix.length)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二个内循环是右上角往左下角方向的</span></span><br><span class="line">    <span class="comment">// k（row）从0开始自增到end</span></span><br><span class="line">    <span class="comment">// j（column）自减到k到end</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= end; k++) &#123;</span><br><span class="line">        System.out.print(matrix[k][j--]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连续法"><a href="#连续法" class="headerlink" title="连续法"></a>连续法</h4><p>把这些路径当作是连续的</p><p>维护一个<code>[rowIndex,columnIndex]</code>来走这一条连续的路径</p><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> row = matrix.length;</span><br><span class="line"><span class="keyword">int</span> column = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span> whole = row * column;</span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rowIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> columnIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 只要计数器比一半少，就说明还没走完</span></span><br><span class="line"><span class="keyword">while</span> (counter &lt; whole / <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (rowIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(matrix[rowIndex--][columnIndex++]);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复位</span></span><br><span class="line">    rowIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (columnIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(matrix[rowIndex++][columnIndex--]);</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复位</span></span><br><span class="line">    columnIndex = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【48-Medium】旋转图像</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/22/%E3%80%9048-Medium%E3%80%91%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/22/%E3%80%9048-Medium%E3%80%91%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h2><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵 <code>matrix</code> 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong> 使用另一个矩阵来旋转图像。</p><p><strong>示例 1：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/22/%E3%80%9048-Medium%E3%80%91%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat1.jpg" class title="img"><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6],[7,8,9]]</span></span><br><span class="line">输出：<span class="string">[[7,4,1],[8,5,2],[9,6,3]]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/22/%E3%80%9048-Medium%E3%80%91%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/mat2.jpg" class title="img"><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[5,1,9,11]</span>,<span class="comment">[2,4,8,10]</span>,<span class="comment">[13,3,6,7]</span>,<span class="comment">[15,14,12,16]</span>]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[15,13,2,5]</span>,<span class="comment">[14,3,4,1]</span>,<span class="comment">[12,6,8,9]</span>,<span class="comment">[16,7,10,11]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == matrix.length == matrix[i].length</code></li><li><code>1 &lt;= n &lt;= 20</code></li><li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li></ul><p>Related Topics</p><ul><li>数组</li><li>数学</li><li>矩阵</li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这种要求原地修改数组的题目一般都需要观察</p><p>目标是将所有数字顺时针旋转90°</p><p>可以先将矩阵镜面翻转，接着对每一行进行逆转</p><p>最后就得到了顺时针旋转90°的矩阵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 镜像翻转</span></span><br><span class="line">        mirror(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : matrix) &#123;</span><br><span class="line">            reverseRow(row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mirror</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; width; j++) &#123;</span><br><span class="line">                <span class="comment">// 将matrix[i][j]和matrix[j][i]交换</span></span><br><span class="line">                swap(i, j, j, i, matrix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆转数组arr</span></span><br><span class="line"><span class="comment">     * 利用双指针技巧原地修改原数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseRow</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// [left,right]</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">            arr[left] = arr[right];</span><br><span class="line">            arr[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换matrix[x1][y1]和matrix[x2][y2]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = matrix[x1][y1];</span><br><span class="line">        matrix[x1][y1] = matrix[x2][y2];</span><br><span class="line">        matrix[x2][y2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-子集、排列、组合问题</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/20/%E7%AE%97%E6%B3%95-%E5%AD%90%E9%9B%86%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/20/%E7%AE%97%E6%B3%95-%E5%AD%90%E9%9B%86%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="算法-子集、排列、组合问题"><a href="#算法-子集、排列、组合问题" class="headerlink" title="算法-子集、排列、组合问题"></a>算法-子集、排列、组合问题</h2><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><p>输入一个不包含重复元素的数组，求它的子集，函数签名如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums);</span><br></pre></td></tr></table></figure><p> 比如输入了<code>[1,2,3]</code></p><p>返回以下数据</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [],</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>第一个解法就是我们可以通过小规模问题推导出大规模问题的，即分治的方式来解决</p><blockquote><p>空数组的子集</p></blockquote><p><code>subsets([])=[[]]</code></p><blockquote><p>1的子集</p></blockquote><p><code>subsets([1])=[[],[1]]</code></p><blockquote><p>2的子集</p></blockquote><p><code>subsets([1,2])=[[],[1],[2],[1,2]]</code></p><blockquote><p> 3的子集</p></blockquote><p> <code>subsets([1,2,3])=[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]</code></p><p> 通过数学归纳法，我们可以发现，大规模的求子集问题可以通过小规模的求子集问题中推导得知</p><p> 2的子集可以由1的子集再加上1的子集中每一个元素加上2求得</p><p> 3的子集可以由2的子集再加上2的子集中每一个元素加上3求得</p><p> 这不就是典型的递归和分治的思想吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">    <span class="keyword">return</span> subsets(nums,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回到[index,nums.length)的所有数字的子集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> index)&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == nums.length)&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; subPro = subsets(nums, index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> size = subPro.size();</span><br><span class="line">    <span class="comment">// 将当前元素加入到之前求得的每一个子集中，并加入这个子集，求得[index,nums.length)的子集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">// 这里要复制一份，不然最后的结果会有问题</span></span><br><span class="line">        LinkedList&lt;Integer&gt; append = <span class="keyword">new</span> LinkedList&lt;&gt;(subPro.get(i));</span><br><span class="line">        append.add(nums[index]);</span><br><span class="line">        subPro.add(append);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subPro;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>还可以使用回溯的思想来解决这道题，直接套用回溯的模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    backTrack(nums, <span class="number">0</span>, track, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路径：track</span></span><br><span class="line"><span class="comment">// 选择列表：[start,nums.length)</span></span><br><span class="line"><span class="comment">// 结束条件：没有，就是要穷举每一种可能，将每一次选择都记录下来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index, LinkedList&lt;Integer&gt; track, LinkedList&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; nums.length; i++) &#123;</span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line">        backTrack(nums, index + <span class="number">1</span>, track, res);</span><br><span class="line">        track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nums=[1,2,3]</code>的决策树如下</p><p>绿色的数组代表的是选择列表</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/20/%E7%AE%97%E6%B3%95-%E5%AD%90%E9%9B%86%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/image-20221020121829600.png" class title="决策树"><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>输入两个数字 <code>n, k</code>，算法输出 <code>[1..n]</code> 中 k 个数字的所有组合，方法签名如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k);</span><br></pre></td></tr></table></figure><p>这是一个很典型的回溯的问题</p><p>n限制了树的宽度，k限制了树的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    combine(n, k, <span class="number">1</span>, track, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径：track</span></span><br><span class="line"><span class="comment">// 选择列表：[start,n]</span></span><br><span class="line"><span class="comment">// 结束条件：k==track.size()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, List&lt;Integer&gt; track, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == track.size()) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">        track.add(i);</span><br><span class="line">        combine(n, k, i + <span class="number">1</span>, track, res);</span><br><span class="line">        track.remove(track.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>n = [1,2,3]</code>的时候的决策树是这样的</p><p>绿色的数组代表的是选择列表</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/20/%E7%AE%97%E6%B3%95-%E5%AD%90%E9%9B%86%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/image-20221020145909627.png" class title="决策树"><p>可以发现这张决策树长得和求子集的时候的决策树很像</p><p>是这样的，求子集的时候是将每一个节点的选择都记录下来了</p><p>而求组合问题的时候，其实就是只要叶子节点的选择</p><h3 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h3><p>输入一个数组<code>nums</code>，返回这个数组的所有排列方式，函数签名如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums);</span><br></pre></td></tr></table></figure><p><code>nums=[1,2,3]</code>的决策树如下</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/20/%E7%AE%97%E6%B3%95-%E5%AD%90%E9%9B%86%E3%80%81%E6%8E%92%E5%88%97%E3%80%81%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/image-20221020153446450.png" class title="决策树"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        permute(nums, track, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径：track中的数字</span></span><br><span class="line">    <span class="comment">// 选择列表：通过track和nums推得</span></span><br><span class="line">    <span class="comment">// 结束条件：track的长度等于nums的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">permute</span><span class="params">(<span class="keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (track.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (track.contains(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            track.add(nums[i]);</span><br><span class="line">            permute(nums, track, res);</span><br><span class="line">            track.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排列问题中通过 <code>contains</code> 方法来排除在 <code>track</code> 中已经选择过的数字，从而得到选择列表，因为维护一个选择列表比较麻烦，所以用了这种推导的方式</p><p>组合问题通过维护一个 <code>start</code> 参数，来排除 <code>start</code> 索引之前的数字，从而得到选择列表，因为组合中<code>[1,2]</code>和<code>[2,1]</code>是算重复的</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【37-Hard】解数独</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="解数独"><a href="#解数独" class="headerlink" title="解数独"></a>解数独</h2><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例 1：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/250px-sudoku-by-l2g-20050714svg.png" class title="img"><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;3&quot;</span>],[<span class="string">&quot;4&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>],[<span class="string">&quot;7&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;5&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>]]</span><br><span class="line">输出：[[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>],[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;8&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>],[<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>],[<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;1&quot;</span>],[<span class="string">&quot;7&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>],[<span class="string">&quot;9&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;4&quot;</span>],[<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;5&quot;</span>],[<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>]]</span><br><span class="line">解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/250px-sudoku-by-l2g-20050714_solutionsvg-16662363114892.png" class title="img"><p><strong>提示：</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 <code>&#39;.&#39;</code></li><li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li></ul><p>Related Topics</p><ul><li>数组</li><li>回溯</li><li>矩阵</li></ul><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>这里需要关注一下题目给的提示，我们来一一分析</p><p>第一条和第二条告诉我们，传入的数组是一个固定<code>9 * 9</code>的矩阵</p><p>第三条告诉我们<code>&#39;.&#39;</code>指的是空位</p><p>第四条告诉我们题目传入的数独只有一个答案，这就代表着我最后穷举出来解满足条件的只有一个</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/image-20221023112123141.png" class title="规则"><hr><p>回溯三要素</p><p>1、路径：填上的数字，就是棋盘上的数字</p><p>2、选择列表：<code>&#39;1&#39;-&#39;9&#39;</code></p><p>3、结束条件：穷举到最后一个格子（由第四条提示可得）</p><p>下面直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 辅助函数</span></span><br><span class="line">        solveSudoku(board,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 路径：已经被填上数字的棋盘，即row之前</span></span><br><span class="line"><span class="comment">// 对每一个格子的选择列表: 1 - 9</span></span><br><span class="line"><span class="comment">// 结束条件：穷举到最后一行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，结束递归</span></span><br><span class="line">        <span class="comment">// 到了最后一行</span></span><br><span class="line">        <span class="keyword">if</span> (row==board.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到了这一行的结尾了，换行</span></span><br><span class="line">        <span class="keyword">if</span> (column==board[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="keyword">return</span> solveSudoku(board,row+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果已经有数字了，直接下一列</span></span><br><span class="line">        <span class="comment">// 因为给出的棋盘中有的格子中是有数字的</span></span><br><span class="line">        <span class="keyword">if</span> (board[row][column]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> solveSudoku(board,row,column+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 穷举</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">&#x27;1&#x27;</span>; ch &lt;= <span class="string">&#x27;9&#x27;</span>; ch++) &#123;</span><br><span class="line">            <span class="comment">// 如果要填写的数字不合法，直接跳过此次选择</span></span><br><span class="line">            <span class="keyword">if</span> (!valid(board,row,column,ch))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 做出选择</span></span><br><span class="line">            board[row][column] = ch;</span><br><span class="line">            <span class="comment">// 如果已经得到答案，直接结束穷举，返回true</span></span><br><span class="line">            <span class="keyword">if</span>(solveSudoku(board,row,column+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 撤销选择</span></span><br><span class="line">            board[row][column] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// [row][column]这个格子填1-9都不合法，回退上一个格子，撤销上一次的选择</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断要填入[row,column]的这个key是否符合规则</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">char</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 这一列不能有重复数字</span></span><br><span class="line">            <span class="keyword">if</span> (board[i][column]==key)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这一行不能用重复数字</span></span><br><span class="line">            <span class="keyword">if</span> (board[row][i]==key)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 九宫格不能有重复数字</span></span><br><span class="line">            <span class="comment">// 这里要斟酌一下的</span></span><br><span class="line">            <span class="keyword">if</span> (board[(row / <span class="number">3</span>) * <span class="number">3</span> + i / <span class="number">3</span>][(column / <span class="number">3</span>) * <span class="number">3</span> + i % <span class="number">3</span>]==key)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下这个<code>valid</code>函数中判断九宫格内是否有重复数字的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (board[(row / <span class="number">3</span>) * <span class="number">3</span> + i / <span class="number">3</span>][(column / <span class="number">3</span>) * <span class="number">3</span> + i % <span class="number">3</span>]==key)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9037-Hard%E3%80%91%E8%A7%A3%E6%95%B0%E7%8B%AC/image-20221023113445365.png" class title="九宫格"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">row/3 可以将其映射到其对应的九宫格行</span><br><span class="line">column/3 可以将其映射到其对应的九宫格列</span><br><span class="line">i-&gt;[0,1,2,3,4,5,6,7,8]</span><br><span class="line">i/3-&gt;[0,0,0,1,1,1,2,2,2]</span><br><span class="line">i%3-&gt;[0,1,2,0,1,2,0,1,2]</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>如果我将提示的第四条，即只有一个正确答案这个条件删除，那这道题该怎么做？</p><p>其实也不难，只要改变结束条件即可，上述代码是直接将可以穷举到最后的答案返回</p><p>因为题目说了只有唯一解，所以我不需要再对其进行判断</p><p>既然删除了只有唯一解这个条件，那我就要对穷举到最后的答案进行验证</p><p>怎么验证呢，那就是验证每一行每一列对角线加起来都是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span>[][] board)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = Arrays.stream(board[<span class="number">0</span>]).sum();</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> column = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> downCatercorner = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> upCatercorner = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算行列和对角线的和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">        row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            row += board[i][j];</span><br><span class="line">            column += board[j][i];</span><br><span class="line">            <span class="comment">// 从左上角到右下角的对角线</span></span><br><span class="line">            <span class="keyword">if</span> (i==j)&#123;</span><br><span class="line">                downCatercorner+=board[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从左下角到右上角的对角线</span></span><br><span class="line">            <span class="keyword">if</span> (i+j==board.length-<span class="number">1</span>)&#123;</span><br><span class="line">                upCatercorner += board[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每一次循环中对比行和列的和</span></span><br><span class="line">        <span class="keyword">if</span> (row!=sum||column!=sum)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        row = <span class="number">0</span>;</span><br><span class="line">        column=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后对比对角线的和</span></span><br><span class="line">    <span class="keyword">return</span> downCatercorner == sum &amp;&amp; upCatercorner == sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【46-Medium】全排列</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9046-Medium%E3%80%91%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9046-Medium%E3%80%91%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[1,3,2]</span>,<span class="comment">[2,1,3]</span>,<span class="comment">[2,3,1]</span>,<span class="comment">[3,1,2]</span>,<span class="comment">[3,2,1]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="string">[[0,1],[1,0]]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="string">[[1]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><p>Related Topics</p><ul><li>数组</li><li>回溯</li></ul><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>全排列，这是很经典的一道回溯的问题</p><p>回溯三要素</p><p>1、路径：已经做出了哪些选择</p><p>2、选择列表：可以选择的元素集合</p><p>3、结束条件：到了决策树的叶子节点处了</p><blockquote><p>图示：</p></blockquote><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/20/%E3%80%9046-Medium%E3%80%91%E5%85%A8%E6%8E%92%E5%88%97/image-20221020153446450.png" class title="image-20221020153446450"><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">// 这个是结果集用来保存结果的</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 路径</span></span><br><span class="line">        LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 辅助函数</span></span><br><span class="line">        backtrack(nums,track,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 路径：track中的数字</span></span><br><span class="line">    <span class="comment">// 选择列表：通过track和nums推得</span></span><br><span class="line">    <span class="comment">// 结束条件：track的长度等于nums的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 到了叶子节点处</span></span><br><span class="line">        <span class="keyword">if</span> (track.size()== nums.length)&#123;</span><br><span class="line">            <span class="comment">// 将当前路径加入到结果集</span></span><br><span class="line">            res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历选择列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 筛选掉不符合要求的选择列表</span></span><br><span class="line">            <span class="keyword">if</span> (track.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 做出选择</span></span><br><span class="line">            track.add(nums[i]);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            backtrack(nums,track,res);</span><br><span class="line">            <span class="comment">// 撤销选择</span></span><br><span class="line">            track.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的回溯问题，其实就是一棵决策树的遍历过程</p><p>在前序位置做出选择，在后序位置撤销选择</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【51-Hard】N皇后</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/19/%E3%80%9051-Hard%E3%80%91N%E7%9A%87%E5%90%8E/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/19/%E3%80%9051-Hard%E3%80%91N%E7%9A%87%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h2><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p><p><strong>示例 1：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/19/%E3%80%9051-Hard%E3%80%91N%E7%9A%87%E5%90%8E/queens.jpg" class title="img"><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：[[<span class="string">&quot;.Q..&quot;</span>,<span class="string">&quot;...Q&quot;</span>,<span class="string">&quot;Q...&quot;</span>,<span class="string">&quot;..Q.&quot;</span>],[<span class="string">&quot;..Q.&quot;</span>,<span class="string">&quot;Q...&quot;</span>,<span class="string">&quot;...Q&quot;</span>,<span class="string">&quot;.Q..&quot;</span>]]</span><br><span class="line">解释：如上图所示，<span class="number">4</span> 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="string">[[&quot;Q&quot;]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><p>Related Topics</p><ul><li>数组</li><li>回溯</li></ul><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p><strong>N皇后</strong>问题和<strong>全排列</strong>问题被称为回溯问题的两大经典问题</p><p>今天我们就来盘一盘<strong>N皇后</strong>问题</p><p>回溯题目三大基本元素</p><p>路径、选择列表、结束条件</p><p>我们来一 一看看在这道题目中都和什么对应</p><blockquote><p>路径</p></blockquote><p>路径就是已经选择将皇后放哪后的棋盘<code>board</code></p><blockquote><p>选择列表</p></blockquote><p>选择列表就是每一行的每一列放<code>QUEUE</code></p><blockquote><p>结束条件</p></blockquote><p>结束条件就是当选择到了最后一行，则将当前棋盘加入到结果集中去</p><p>下面上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 空位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="comment">// 皇后</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;Q&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="comment">// 结果集，用来保存所有符合要求的结果</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 用n初始化棋盘</span></span><br><span class="line">        String[][] board = <span class="keyword">new</span> String[n][n];</span><br><span class="line">        <span class="comment">// 用空位填充每一个位置</span></span><br><span class="line">        fillEmpty(board);</span><br><span class="line">        <span class="comment">// 辅助函数</span></span><br><span class="line">        solveNQueens(board,<span class="number">0</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将棋盘置空</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillEmpty</span><span class="params">(String[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                board[i][j] = EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 装配结果集到符合题目要求的格式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">assemble</span><span class="params">(String[][] board)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuffer temp = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (String[] row : board) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String c : row) &#123;</span><br><span class="line">                temp.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp.toString());</span><br><span class="line">            temp = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回溯函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solveNQueens</span><span class="params">(String[][] board, <span class="keyword">int</span> row, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 符合退出条件</span></span><br><span class="line">        <span class="keyword">if</span> (row==board.length)&#123;</span><br><span class="line">            res.add(assemble(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对每一列进行选择</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; board[<span class="number">0</span>].length; column++) &#123;</span><br><span class="line">            <span class="comment">// 如果选择不符合要求，直接跳过此次选择</span></span><br><span class="line">            <span class="keyword">if</span> (!valid(board,row,column))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            board[row][column] = QUEUE;</span><br><span class="line">            solveNQueens(board,row+<span class="number">1</span>,res);</span><br><span class="line">            board[row][column] = EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断此次选择是否合法</span></span><br><span class="line">    <span class="comment">// 注意：这里还没做出选择，只是预判此次选择是否合法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; row; r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[r][column].equals(QUEUE))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左边不需要，因为我是对每一行的每一列进行选择，并且选择之后会撤销，所以不需要进行行上的判断</span></span><br><span class="line"><span class="comment">/*for (int c = 0; c &lt; column; c++) &#123;</span></span><br><span class="line"><span class="comment">            if (board[row][c].equals(QUEUE))&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">// 左上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = row - <span class="number">1</span>, c = column - <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span>; r-- , c--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[r][c].equals(QUEUE))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = row - <span class="number">1</span>, c = column + <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &lt;board[<span class="number">0</span>].length; r-- , c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[r][c].equals(QUEUE))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <code>n=4</code> 的递归树</p><p>黄色的小方块表示此次选择是合法的</p><p>红色的小方块表示此次选择是不合法的，直接跳过此次选择</p><p>绿色的屏障表示的此次选择到了结束条件，直接将其放入结果集中</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/19/%E3%80%9051-Hard%E3%80%91N%E7%9A%87%E5%90%8E/image-20221019180651184.png" class title="递归树"><p>回溯问题无非就是遍历一颗递归树，然后在前序位置判断这次选择是否合法，如果合法就进入子树，然后在后序位置将此次选择撤销</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【22-Medium】括号生成</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/18/%E3%80%9022-Medium%E3%80%91%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/18/%E3%80%9022-Medium%E3%80%91%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p><p><strong>示例 1：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">3</span></span><br><span class="line">输出：[<span class="string">&quot;((()))&quot;</span>,<span class="string">&quot;(()())&quot;</span>,<span class="string">&quot;(())()&quot;</span>,<span class="string">&quot;()(())&quot;</span>,<span class="string">&quot;()()()&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">1</span></span><br><span class="line">输出：[<span class="string">&quot;()&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 8</code></li></ul><p>Related Topics</p><ul><li>字符串</li><li>动态规划</li><li>回溯</li></ul><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>直接穷举所有情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 结果集</span></span><br><span class="line">    LinkedList&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 路径</span></span><br><span class="line">    <span class="keyword">char</span>[] track = <span class="keyword">new</span> <span class="keyword">char</span>[n * <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 回溯</span></span><br><span class="line">    generateParenthesis(track, <span class="number">0</span>, res, n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">char</span>[] track, <span class="keyword">int</span> index, LinkedList&lt;String&gt; res, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 走到头了</span></span><br><span class="line">    <span class="keyword">if</span> (index == track.length) &#123;</span><br><span class="line">        <span class="comment">// 判断路径组成的字符串是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (isValid(track)) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> String(track));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断这次是否可以加入左括号</span></span><br><span class="line">    <span class="keyword">if</span> (canAdd(track, index, LEFT_BRACKET)) &#123;</span><br><span class="line">        track[index] = LEFT_BRACKET;</span><br><span class="line">        generateParenthesis(track, index + <span class="number">1</span>, res, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断这次是否可以加入右括号</span></span><br><span class="line">    <span class="keyword">if</span> (canAdd(track, index, RIGHT_BRACKET)) &#123;</span><br><span class="line">        track[index] = RIGHT_BRACKET;</span><br><span class="line">        generateParenthesis(track, index + <span class="number">1</span>, res, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[] sArray)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// left为剩余多少左括号没有被匹配</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sArray.length; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> curr = sArray[i];</span><br><span class="line">        <span class="keyword">if</span> (curr == LEFT_BRACKET) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr == RIGHT_BRACKET) &#123;</span><br><span class="line">            left--;</span><br><span class="line">            <span class="comment">// 每出现一个右括号，就对应一个左括号被匹配</span></span><br><span class="line">            <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果全部匹配成功，说明合法</span></span><br><span class="line">    <span class="keyword">return</span> left == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canAdd</span><span class="params">(<span class="keyword">char</span>[] sArray, <span class="keyword">int</span> index, <span class="keyword">char</span> bracket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> curr = sArray[i];</span><br><span class="line">        <span class="keyword">if</span> (curr == LEFT_BRACKET) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr == RIGHT_BRACKET) &#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果右括号数目已经比左括号多了，说明已经不合法了</span></span><br><span class="line">        <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bracket == RIGHT_BRACKET) &#123;</span><br><span class="line">        right++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左括号数目比右括号多即可</span></span><br><span class="line">    <span class="keyword">return</span> left &gt;= right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的递归树会很大</p><p>原因在于修剪的力度不够大，<code>canAdd</code>只能判断当前的<code>index</code>位是否可以加入<code>choice</code></p><p>但是无法保证最后生成的字符串是符合左右括号数目相等的</p><p>所以需要在满足推出条件的时候，再次判断是否符合左右括号数目一致</p><p>原因在于我无法根据<strong>已作出选择的左右括号数量</strong>来判断最后是否合法</p><p>换下思路，用左右括号的剩余数量就可以来判断最后是否合法，只要<code>right&gt;=left</code>即可</p><blockquote><p>代码优化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">char</span>[] track = <span class="keyword">new</span> <span class="keyword">char</span>[n * <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// index从0开始</span></span><br><span class="line">    <span class="comment">// 还剩下n个左括号</span></span><br><span class="line">    <span class="comment">// 还剩下n个右括号</span></span><br><span class="line">    <span class="comment">// trace用来记录路径</span></span><br><span class="line">    <span class="comment">// res用来收集结果</span></span><br><span class="line">    generateParenthesis(track, <span class="number">0</span>, n, n, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">char</span>[] track, <span class="keyword">int</span> index, <span class="keyword">int</span> leftBract, <span class="keyword">int</span> rightBract, LinkedList&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果剩余的左括号个数小于0，说明左括号已经超标了</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果剩下的右括号比左括号少</span></span><br><span class="line">    <span class="comment">// n = 5 </span></span><br><span class="line">    <span class="comment">// 剩下了4个左括号，1个右括号 ，这是错的情况</span></span><br><span class="line">    <span class="comment">// 剩下了4个右括号，1个左括号 ，这是对的情况</span></span><br><span class="line">    <span class="comment">// 剩下了3个右括号，3个左括号 ，这是对的情况</span></span><br><span class="line">    <span class="comment">// 说明左括号多放了</span></span><br><span class="line">    <span class="keyword">if</span> (rightBract &lt; leftBract) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 长度到达要，因为不符合要求的字符串已经被修剪</span></span><br><span class="line">    <span class="comment">// 所以能走到这里的肯定是合法的字符串了</span></span><br><span class="line">    <span class="comment">// 将其加入到结果集合中</span></span><br><span class="line">    <span class="keyword">if</span> (index == track.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> String(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择左括号</span></span><br><span class="line">    track[index] = LEFT_BRACKET;</span><br><span class="line">    generateParenthesis(track, index + <span class="number">1</span>, leftBract - <span class="number">1</span>, rightBract, res);</span><br><span class="line">    <span class="comment">// 选择右括号</span></span><br><span class="line">    track[index] = RIGHT_BRACKET;</span><br><span class="line">    generateParenthesis(track, index + <span class="number">1</span>, leftBract, rightBract - <span class="number">1</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给出优化后 <code>n=2</code> 的递归树</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/18/%E3%80%9022-Medium%E3%80%91%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/image-20221018212632726.png" class title="递归树"><p>优化前的 <code>n=2</code> 的递归树</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/10/18/%E3%80%9022-Medium%E3%80%91%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/image-20221018212534912.png" class title="递归树"><p><code>n=2</code> 看不出优化后明显的增加修剪的力度</p><p>感兴趣的可以自己画一画 <code>n=3</code> 的递归树，你就会发现有很明显的区别</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二叉树遍历</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/06/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/10/06/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><p>二叉树遍历有四种顺序：前序、中序、后序和层次</p><p>下面使用不同的方法去使用这四种顺序，输出二叉树遍历的结果</p><h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><h4 id="遍历框架"><a href="#遍历框架" class="headerlink" title="遍历框架"></a>遍历框架</h4><p>直接利用我们之前说过的遍历框架</p><p>在前序位置添加逻辑即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前序位置</span></span><br><span class="line">    <span class="comment">// 将当前节点的值放入集合中</span></span><br><span class="line">    res.add(root.val);</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分解问题"><a href="#分解问题" class="headerlink" title="分解问题"></a>分解问题</h4><p>前序遍历：根节点 + 左子树 + 右子树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 其实也是先序位置将值放入集合中</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    <span class="comment">// 将左子树的遍历结果放入集合中</span></span><br><span class="line">    list.addAll(traverse(root.left));</span><br><span class="line">    <span class="comment">// 将右子树的遍历结果放入集合中</span></span><br><span class="line">    list.addAll(traverse(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h4><h5 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 用来暂存需要保存的节点</span></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">// 用来保存遍历结果</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 如果cur不空，则一直将节点放入stack中</span></span><br><span class="line">        <span class="comment">// 并将其置为其左节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出栈顶元素，并将cur指向其左子树根节点</span></span><br><span class="line">        cur = stack.pop().right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当栈为空或者栈顶元素的右子树不为空的时候退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;stack.peek().right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 栈为空的时候，则退出循环</span></span><br><span class="line">        <span class="comment">// 反之将栈顶元素出栈，并将其右节点赋值给cur</span></span><br><span class="line">        cur = stack.isEmpty() ? <span class="keyword">null</span> : stack.pop().right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种方法使用栈的区别就是</p><p>对于cur的更新方式不同，</p><p>法一是直接将栈顶元素的<code>right</code>赋值给cur</p><p>法二是拿到第一个出栈元素的<code>right</code>不为空的元素赋值给cur</p><p>两种方法都可以，但是第一种写起来更为简便</p><h5 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">        TreeNode pop = stack.pop();</span><br><span class="line">        res.add(pop.val);</span><br><span class="line">        <span class="keyword">if</span> (pop.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(pop.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pop.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(pop.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h3><h4 id="遍历框架-1"><a href="#遍历框架-1" class="headerlink" title="遍历框架"></a>遍历框架</h4><p>直接利用我们之前说过的遍历框架</p><p>在中序位置添加逻辑即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    <span class="comment">// 中序位置</span></span><br><span class="line">    <span class="comment">// 将当前节点的值放入集合中</span></span><br><span class="line">    res.add(root.val);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分解问题-1"><a href="#分解问题-1" class="headerlink" title="分解问题"></a>分解问题</h4><p>中序遍历：左子树 + 根节点 + 右子树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将左子树的遍历结果放入集合中去</span></span><br><span class="line">    list.addAll(traverse(root.left));</span><br><span class="line">    <span class="comment">// 其实也就是中序位置</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">    <span class="comment">// 将右子树的遍历结果放入集合中去</span></span><br><span class="line">    list.addAll(traverse(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用栈-1"><a href="#使用栈-1" class="headerlink" title="使用栈"></a>使用栈</h4><h5 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 栈中存放需要暂存的节点</span></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.pop();</span><br><span class="line">        <span class="comment">// 将出栈元素的值放入遍历结果集中去</span></span><br><span class="line">        <span class="comment">// 这个时候的cur一定是其左子树遍历完了</span></span><br><span class="line">        list.add(cur.val);</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当栈为空或者栈顶元素的右子树不为空的时候退出循环</span></span><br><span class="line">        <span class="comment">// 循环中将出栈的栈顶元素的值放入集合中</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;stack.peek().right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(stack.pop().val);</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.isEmpty() ? <span class="keyword">null</span> : stack.pop().right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的两种方法的区别和前序顺序遍历的使用栈的方法的区别相同</p><h3 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h3><h4 id="遍历框架-2"><a href="#遍历框架-2" class="headerlink" title="遍历框架"></a>遍历框架</h4><p>直接利用我们之前说过的遍历框架</p><p>在后序位置添加逻辑即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; res;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">    <span class="comment">// 后序位置</span></span><br><span class="line">    <span class="comment">// 将当前节点的值放入集合中</span></span><br><span class="line">    res.add(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分解问题-2"><a href="#分解问题-2" class="headerlink" title="分解问题"></a>分解问题</h4><p>后序遍历：左子树 + 右子树 + 根节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将左子树的遍历结果放入集合中去</span></span><br><span class="line">    list.addAll(traverse(root.left));</span><br><span class="line">    <span class="comment">// 将右子树的遍历结果放入集合中去</span></span><br><span class="line">    list.addAll(traverse(root.right));</span><br><span class="line">    <span class="comment">// 其实也就是后序位置</span></span><br><span class="line">    list.add(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用栈-2"><a href="#使用栈-2" class="headerlink" title="使用栈"></a>使用栈</h4><p>后序顺序比其他顺序特殊</p><p>它需要在左右子树都遍历完之后才可以将节点的值放入集合中</p><p>如何知道左右子树都遍历完了</p><p>这就是使用栈完成后序顺序遍历的难点</p><h5 id="单栈标记法"><a href="#单栈标记法" class="headerlink" title="单栈标记法"></a>单栈标记法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">postOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode flag = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur!=<span class="keyword">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不能着急出栈，因为后序位置比较特殊</span></span><br><span class="line">        <span class="comment">// 需要先将左右子树都处理完之后才可以处理根节点</span></span><br><span class="line">        cur = stack.peek();</span><br><span class="line">        <span class="comment">// cur.right == null 对应右子树为空的情况</span></span><br><span class="line">        <span class="comment">// cur.right == flag 对应右子树已经处理完成的情况</span></span><br><span class="line">        <span class="keyword">if</span>(cur.right == <span class="keyword">null</span> || flag == cur.right)&#123;</span><br><span class="line">            <span class="comment">// 当出现以上两种情况之后，则说明不需要再处理右子树了，则出栈</span></span><br><span class="line">            flag = stack.pop();</span><br><span class="line">            list.add(flag.val);</span><br><span class="line">            cur = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双栈法"><a href="#双栈法" class="headerlink" title="双栈法"></a>双栈法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">postOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur!=<span class="keyword">null</span> || !stack1.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(cur);</span><br><span class="line">            stack2.push(cur);</span><br><span class="line">            <span class="comment">// 注意：这里是right</span></span><br><span class="line">            <span class="comment">// 根 + 右 + 左 进stack1</span></span><br><span class="line">            <span class="comment">// 则stack2出栈就是 左 + 右 + 根</span></span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack1.pop().right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack2.isEmpty())&#123;</span><br><span class="line">        list.add(stack2.pop().val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h3><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>使用队列来暂存节点，利用其先进先出的特性来达到层次遍历的效果</p><h5 id="法一-2"><a href="#法一-2" class="headerlink" title="法一"></a>法一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">levelOrder</span> <span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 用来暂存每一层的节点</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 用来保存结果集</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        list.add(cur.val);</span><br><span class="line">        <span class="comment">// 如果cur有左子树，则将左子树根节点放入queue中</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果cur有右子树，则将左子树根节点放入queue中</span></span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果队列为空，则说明遍历完毕</span></span><br><span class="line">        <span class="comment">// 否则取出队首元素</span></span><br><span class="line">        cur = queue.isEmpty() ? <span class="keyword">null</span> : queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="法二-2"><a href="#法二-2" class="headerlink" title="法二"></a>法二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">levelOrder</span> <span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 现在在队伍里面的就是一层的所有节点，所以直接取出所有的节点</span></span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode cur = queue.poll();</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">            <span class="comment">// 把该节点的下一层节点放入队列</span></span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>使用递归函数来得到层次遍历结果</p><h5 id="法一-3"><a href="#法一-3" class="headerlink" title="法一"></a>法一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Intger&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelTraverse(TreeNode root)&#123;</span><br><span class="line">    res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// root为第0层</span></span><br><span class="line">    traverse(root,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有这一层的集合，则添加</span></span><br><span class="line">    <span class="keyword">if</span>(res.get(level) == <span class="keyword">null</span>)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到当前层次的集合并将其加入到集合中</span></span><br><span class="line">    res.get(level).add(root.val);</span><br><span class="line">    traverse(root.left,level+<span class="number">1</span>);</span><br><span class="line">    traverse(root.right,level+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="法二-3"><a href="#法二-3" class="headerlink" title="法二"></a>法二</h5><p>这种方法叫尾递归</p><p>它可以被改写为层次遍历使用队列的法二</p><p>它两本质是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Intger&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelTraverse(TreeNode root) &#123;</span><br><span class="line">    res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// nodes保存着当前层次的所有节点</span></span><br><span class="line">    List&lt;TreeNode&gt; nodes = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 先将第一层放入集合中</span></span><br><span class="line">    nodes.push(root);</span><br><span class="line">    traverse(nodes);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List&lt;TreeNode&gt; nodes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nodes.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; curLevel = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode temp;</span><br><span class="line">    <span class="keyword">int</span> size = nodes.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        temp = nodes.poll();</span><br><span class="line">        curLevel.add(temp.data);</span><br><span class="line">        <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nodes.push(temp.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nodes.push(temp.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(curLevel);</span><br><span class="line">    traverse(nodes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【1352-Medium】最后K个数的乘积</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="最后K个数的乘积"><a href="#最后K个数的乘积" class="headerlink" title="最后K个数的乘积"></a>最后K个数的乘积</h2><p>请你实现一个「数字乘积类」<code>ProductOfNumbers</code>，要求支持下述两种方法：</p><p>1.<code> add(int num)</code></p><ul><li>将数字 <code>num</code> 添加到当前数字列表的最后面。</li></ul><p>2.<code> getProduct(int k)</code></p><ul><li>返回当前数字列表中，最后 <code>k</code> 个数字的乘积。</li><li>你可以假设当前列表中始终 <strong>至少</strong> 包含 <code>k</code> 个数字。</li></ul><p>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。</p><p><strong>示例：</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;ProductOfNumbers&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;getProduct&quot;</span>,<span class="string">&quot;getProduct&quot;</span>,<span class="string">&quot;getProduct&quot;</span>,<span class="string">&quot;add&quot;</span>,<span class="string">&quot;getProduct&quot;</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[<span class="number">0</span>],[<span class="number">2</span>],[<span class="number">5</span>],[<span class="number">4</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">8</span>],[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="keyword">null</span>,<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">ProductOfNumbers productOfNumbers = <span class="keyword">new</span> ProductOfNumbers();</span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">3</span>);        <span class="comment">// [3]</span></span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">0</span>);        <span class="comment">// [3,0]</span></span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">2</span>);        <span class="comment">// [3,0,2]</span></span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">5</span>);        <span class="comment">// [3,0,2,5]</span></span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">4</span>);        <span class="comment">// [3,0,2,5,4]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 20 。最后 2 个数字的乘积是 5 * 4 = 20</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">3</span>); <span class="comment">// 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 = 40</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">4</span>); <span class="comment">// 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 = 0</span></span><br><span class="line">productOfNumbers.<span class="built_in">add</span>(<span class="number">8</span>);        <span class="comment">// [3,0,2,5,4,8]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 32 。最后 2 个数字的乘积是 4 * 8 = 32 </span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>add</code> 和 <code>getProduct</code> 两种操作加起来总共不会超过 <code>40000</code> 次。</li><li><code>0 &lt;= num &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 40000</code></li></ul><p>Related Topics</p><ul><li>设计</li><li>队列</li><li>数组</li><li>数学</li><li>数据流</li></ul><h3 id="法一：暴力"><a href="#法一：暴力" class="headerlink" title="法一：暴力"></a>法一：暴力</h3><p>这题很好理解，但是如果想要写出一个复杂度低的算法不是一件简单的事情</p><p>下面我们先来用最简单最通俗易懂的方法来实现</p><p>因为数组长度不定，所以使用<code>source</code>用来存储原数组</p><p>返回最后k个数字的乘积<code>getProduct</code>，那我只需要遍历<code>source</code>的最后k个数字并将其相乘返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductOfNumbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        source = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        source.add(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            res *= source.get(source.size() - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927172451217.png" class title="数据测试"><p>好，没有问题，提交！</p><p>但是<strong>Medium</strong>的题目会这么简单吗？NO！</p><p>只有通过大测试数据，算法才算通过</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927172040049.png" class title="大数据"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927172112067.png" class title="大数据"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927172133092.png" class title="大数据"><p>这种简单的算法，虽然好想，但是扛不住大数据，接下来介绍一种新解法</p><h3 id="法二：前缀积"><a href="#法二：前缀积" class="headerlink" title="法二：前缀积"></a>法二：前缀积</h3><p>在看这个之前，最好先了解过前缀和的知识，可以移步这篇文章<a href>【303-Easy】区域和检索-数组不可变</a></p><p>且听我解释各变量的作用，再看代码</p><p><code>source</code>和之前的作用是一样的，是用来存储原数组的</p><p><code>size</code>就是原数组的长度</p><p><code>zeroIndex</code>代表的是 0 最后一次出现的位置</p><p><code>preMultiply</code>的作用是存储前缀积的结果的，但是这里的<code>preMultiply</code>和之前的前缀和的定义略有不同</p><p>这里<code>preMultiply.get(i)</code>的定义是</p><blockquote><p>i  &gt;  zeroIndex</p></blockquote><p>原数组在<code>[zeroIndex+1,i]</code>的累乘</p><blockquote><p>i  &lt;  zeroIndex</p></blockquote><p>无定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; source;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; preMultiply;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> zeroIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductOfNumbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        zeroIndex = -<span class="number">1</span>;</span><br><span class="line">        source = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        preMultiply = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        preMultiply.add(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        source.add(num);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            preMultiply.clear();</span><br><span class="line">            preMultiply.add(<span class="number">1</span>);</span><br><span class="line">            zeroIndex = size;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            preMultiply.add(preMultiply.get(size - zeroIndex - <span class="number">1</span>) * num);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; size - zeroIndex - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preMultiply.get(size - zeroIndex - <span class="number">1</span>) / preMultiply.get(size - zeroIndex - k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174257766.png" class title="初始状态"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174435740.png" class title="process-1"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174526463.png" class title="process-2"><p>这一步比较特殊，当我出现了 0 的时候所有的前缀积都无效了，所以直接清除，然后记录 0 出现的位置</p> <img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174812462.png" class title="process-3"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174901058.png" class title="process-4"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927174955875.png" class title="process-5"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927175028685.png" class title="process-6"><p>接下来解释一下代码</p><h4 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h4><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927175228763.png" class title="构造函数"><p>构造函数做的事就是初始化一些变量，这些变量的意义前面讲述过了这里就不赘述了</p><h4 id="2、add函数"><a href="#2、add函数" class="headerlink" title="2、add函数"></a>2、add函数</h4><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927175459338.png" class title="add函数"><p>首先将其直接放入source集合中</p><p>接下来对于不同的<code>num</code>做出不同的处理</p><blockquote><p><code>num</code>为 0 </p></blockquote><p>重置前缀积集合，即清空集合，并放入 1 </p><p>更新<code>zeroIndex</code></p><p>（这里直接将<code>size</code>赋值给<code>zeroIndex</code>的原因是<code>size</code>是方法结束之后才自增的，自增前的size表示的就是当前元素的索引）</p><blockquote><p><code>num</code>不为0</p></blockquote><p>更新前缀积集合，这里的<code>size-zeroIndex-1</code>需要理解（这里我当时是通过画图推敲得知）</p><p>我的理解就是将当前值乘以原数组 0 之后的所有数的乘积得到的值放入前缀积</p><h4 id="3、getProduct函数"><a href="#3、getProduct函数" class="headerlink" title="3、getProduct函数"></a>3、getProduct函数</h4><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/09/27/%E3%80%901352-Medium%E3%80%91%E6%9C%80%E5%90%8EK%E4%B8%AA%E6%95%B0%E7%9A%84%E4%B9%98%E7%A7%AF/image-20220927180404538.png" class title="getProduct函数"><p><code>size-zeroIndex-1</code>就是原数组 0 之后有几个数字</p><p>如果这个数字比 k 小，则可以直接返回 0 </p><p>不然，则返回<code>preMultiply.get(size-zeroIndex-1)/preMultiply.get(size-zeroIndex-k-1);</code></p><p><code>preMultiply.get(size-zeroIndex-1)</code>是原数组在 0 之后所有数字的乘积</p><p><code>preMultiply.get(size-zeroIndex-k-1)</code>是原数组在 0 之后所有数字，倒数第 k 个数到 0 后第一个数的乘积</p><blockquote><p>注：如果<code>size-zeroIndex-k-1</code>为 0 ，则没有意义，就是 1 ，占位用的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发中Interrupt的相关知识</title>
      <link href="/javaEE/JUC/2022/07/25/%E5%B9%B6%E5%8F%91%E4%B8%ADInterrupt%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/javaEE/JUC/2022/07/25/%E5%B9%B6%E5%8F%91%E4%B8%ADInterrupt%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h2><p><code>interrupt()</code>是线程类的成员方法，作用是打断线程</p><p>与之有关的还有<code>isInterrupted()</code>和<code>interrupted()</code></p><p><code>interrupt()</code>的作用是分情况的</p><blockquote><p>当线程被<code>join()</code>、<code>sleep()</code>、<code>wait()</code>阻塞的时候</p></blockquote><p>使用此方法，会设置打断标记为<code>false</code>，并且抛出异常<code>InterruptedException</code></p><blockquote><p>当线程正在运行的时候</p></blockquote><p>使用此方法，会设置打断标记为<code>true</code>，但是不会影响线程继续运行</p><blockquote><p>当线程使用<code>LockSupport.park()</code>挂起</p></blockquote><p>使用此方法，会设置打断标记为<code>true</code>，但是不会抛出异常</p><blockquote><p>Tips：在打断状态下，无法使用<code>LockSupport.park()</code>挂起当前线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interrupts this thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Unless the current thread is interrupting itself, which is</span></span><br><span class="line"><span class="comment"> * always permitted, the &#123;<span class="doctag">@link</span> #checkAccess() checkAccess&#125; method</span></span><br><span class="line"><span class="comment"> * of this thread is invoked, which may cause a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * SecurityException&#125; to be thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an invocation of the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait() wait()&#125;, &#123;<span class="doctag">@link</span> Object#wait(long) wait(long)&#125;, or &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Object#wait(long, int) wait(long, int)&#125; methods of the &#123;<span class="doctag">@link</span> Object&#125;</span></span><br><span class="line"><span class="comment"> * class, or of the &#123;<span class="doctag">@link</span> #join()&#125;, &#123;<span class="doctag">@link</span> #join(long)&#125;, &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #join(long, int)&#125;, &#123;<span class="doctag">@link</span> #sleep(long)&#125;, or &#123;<span class="doctag">@link</span> #sleep(long, int)&#125;,</span></span><br><span class="line"><span class="comment"> * methods of this class, then its interrupt status will be cleared and it</span></span><br><span class="line"><span class="comment"> * will receive an &#123;<span class="doctag">@link</span> InterruptedException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in an I/O operation upon an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.InterruptibleChannel InterruptibleChannel&#125;</span></span><br><span class="line"><span class="comment"> * then the channel will be closed, the thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set, and the thread will receive a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.ClosedByInterruptException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this thread is blocked in a &#123;<span class="doctag">@link</span> java.nio.channels.Selector&#125;</span></span><br><span class="line"><span class="comment"> * then the thread&#x27;s interrupt status will be set and it will return</span></span><br><span class="line"><span class="comment"> * immediately from the selection operation, possibly with a non-zero</span></span><br><span class="line"><span class="comment"> * value, just as if the selector&#x27;s &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.channels.Selector#wakeup wakeup&#125; method were invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If none of the previous conditions hold then this thread&#x27;s interrupt</span></span><br><span class="line"><span class="comment"> * status will be set. &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Interrupting a thread that is not alive need not have any effect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment"> *          if the current thread cannot modify this thread</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@spec</span> JSR-51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != Thread.currentThread()) &#123;</span><br><span class="line">        checkAccess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// thread may be blocked in an I/O operation</span></span><br><span class="line">        <span class="keyword">synchronized</span> (blockerLock) &#123;</span><br><span class="line">            Interruptible b = blocker;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">                interrupt0();  <span class="comment">// set interrupt status</span></span><br><span class="line">                b.interrupt(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set interrupt status</span></span><br><span class="line">    interrupt0();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isInterrupted"><a href="#isInterrupted" class="headerlink" title="isInterrupted"></a>isInterrupted</h2><p>此方法也是线程类的成员方法，作用是返回打断标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether this thread has been interrupted.  The &lt;i&gt;interrupted</span></span><br><span class="line"><span class="comment"> * status&lt;/i&gt; of the thread is unaffected by this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A thread interruption ignored because a thread was not alive</span></span><br><span class="line"><span class="comment"> * at the time of the interrupt will be reflected by this method</span></span><br><span class="line"><span class="comment"> * returning false.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if this thread has been interrupted;</span></span><br><span class="line"><span class="comment"> *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #interrupted()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted"></a>interrupted</h2><p>此方法是Thread的静态方法，作用是重置<strong>当前运行线程的打断标记（就是将打断标记置为false）</strong>，并返回之前的打断标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests whether the current thread has been interrupted.  The</span></span><br><span class="line"><span class="comment">     * &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method.  In</span></span><br><span class="line"><span class="comment">     * other words, if this method were to be called twice in succession, the</span></span><br><span class="line"><span class="comment">     * second call would return false (unless the current thread were</span></span><br><span class="line"><span class="comment">     * interrupted again, after the first call had cleared its interrupted</span></span><br><span class="line"><span class="comment">     * status and before the second call had examined it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread interruption ignored because a thread was not alive</span></span><br><span class="line"><span class="comment">     * at the time of the interrupt will be reflected by this method</span></span><br><span class="line"><span class="comment">     * returning false.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the current thread has been interrupted;</span></span><br><span class="line"><span class="comment">     *          &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #isInterrupted()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-基础</title>
      <link href="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/"/>
      <url>/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-基础"><a href="#Docker-基础" class="headerlink" title="Docker-基础"></a>Docker-基础</h1><h2 id="回顾hello-world"><a href="#回顾hello-world" class="headerlink" title="回顾hello-world"></a>回顾hello-world</h2><p>我们先来回顾一下hello-world的案例</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220713205248995.png" class title="hello-world"><p>下面是完整的流程图</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220713205925422.png" class title="hello-world流程图"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先在本地查找是否存在hello-world镜像</span><br><span class="line">有则直接使用此镜像创建一个容器并运行</span><br><span class="line"></span><br><span class="line">没有则连接镜像服务器查找是否存在hello-world镜像</span><br><span class="line"></span><br><span class="line">如果在镜像服务器查找到了该镜像，则将该镜像下载到本地，然后建一个容器并运行</span><br><span class="line"></span><br><span class="line">如果没有，则报错</span><br></pre></td></tr></table></figure><p>下面介绍关于镜像和容器的命令</p><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker search --help</span></span><br><span class="line"><span class="comment"># 使用说明</span></span><br><span class="line">Usage:  docker search [OPTIONS] TERM</span><br><span class="line"><span class="comment"># 在docker hub上搜索TERM镜像</span></span><br><span class="line">Search the Docker Hub <span class="keyword">for</span> images</span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 过滤</span></span><br><span class="line"><span class="comment"># 栗子 -f=STARS=3000意思的筛选出STARS大于3000的</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line"><span class="comment"># 格式化输出，使用go语言的模板</span></span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line"><span class="comment"># 限制数量</span></span><br><span class="line">      --<span class="built_in">limit</span> int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker pull --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line"><span class="comment"># 从仓库拉取一个镜像或者一个仓库</span></span><br><span class="line">Pull an image or a repository from a registry</span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 下载全部的版本</span></span><br><span class="line">  -a, --all-tags                Download all tagged images <span class="keyword">in</span> the repository</span><br><span class="line"><span class="comment"># 跳过镜像认证，默认开启</span></span><br><span class="line">      --disable-content-trust   Skip image verification (default <span class="literal">true</span>)</span><br><span class="line">      --platform string         Set platform <span class="keyword">if</span> server is multi-platform capable</span><br><span class="line"><span class="comment"># 跳过冗长的输出，等到下载结束后再输出镜像id</span></span><br><span class="line">  -q, --quiet                   Suppress verbose output</span><br></pre></td></tr></table></figure><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker images --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"><span class="comment"># 列举镜像</span></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 展示全部的镜像，默认添加</span></span><br><span class="line">  -a, --all             Show all images (default hides intermediate images)</span><br><span class="line"><span class="comment"># 显示完整的镜像id</span></span><br><span class="line">      --digests         Show digests</span><br><span class="line"><span class="comment"># 过滤</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br><span class="line"><span class="string"># 只显示镜像简写id</span></span><br><span class="line"><span class="string">  -q, --quiet           Only show image IDs</span></span><br></pre></td></tr></table></figure><h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker rmi --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">Remove one or more images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 强制删除</span></span><br><span class="line">  -f, --force      Force removal of the image</span><br><span class="line">      --no-prune   Do not delete untagged parents</span><br></pre></td></tr></table></figure><h3 id="查看镜像层级构建信息"><a href="#查看镜像层级构建信息" class="headerlink" title="查看镜像层级构建信息"></a>查看镜像层级构建信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker history --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker <span class="built_in">history</span> [OPTIONS] IMAGE</span><br><span class="line"><span class="comment"># 展示镜像的历史（构建信息）</span></span><br><span class="line">Show the <span class="built_in">history</span> of an image</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line"><span class="comment"># 以可读化好的方式展示</span></span><br><span class="line">  -H, --human           Print sizes and dates <span class="keyword">in</span> human readable format (default <span class="literal">true</span>)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br><span class="line"><span class="string"># 只显示镜像id</span></span><br><span class="line"><span class="string">  -q, --quiet           Only show image IDs</span></span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker tag --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line"><span class="comment"># 给SOURCE_IMAGE打上新的标签，并使用TARGET_IMAGE保存</span></span><br><span class="line">Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br></pre></td></tr></table></figure><h2 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h2><h3 id="创建一个容器"><a href="#创建一个容器" class="headerlink" title="创建一个容器"></a>创建一个容器</h3><blockquote><p>这里因为可选项太多，我只放一些常用的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker run --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"><span class="comment"># 创建并使用COMMAND运行一个容器</span></span><br><span class="line">Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 后台启动容器</span></span><br><span class="line">  -d, --detach                         Run container <span class="keyword">in</span> background and <span class="built_in">print</span> container ID</span><br><span class="line"><span class="comment"># 保持标准输出流打开</span></span><br><span class="line">  -i, --interactive                    Keep STDIN open even <span class="keyword">if</span> not attached</span><br><span class="line"><span class="comment"># 挂载宿主机文件系统</span></span><br><span class="line">      --mount mount                    Attach a filesystem mount to the container</span><br><span class="line"><span class="comment"># 指定容器名字</span></span><br><span class="line">      --name string                    Assign a name to the container</span><br><span class="line"><span class="comment"># 指定容器所在网络</span></span><br><span class="line">      --network network                Connect a container to a network</span><br><span class="line"><span class="comment"># 给容器登录用户的特权</span></span><br><span class="line">      --privileged                     Give extended privileges to this container</span><br><span class="line"><span class="comment"># 指定端口映射 -p 宿主机端口:容器暴露端口</span></span><br><span class="line">  -p, --publish list                   Publish a container<span class="string">&#x27;s port(s) to the host</span></span><br><span class="line"><span class="string"># 随机指定端口映射</span></span><br><span class="line"><span class="string">  -P, --publish-all                    Publish all exposed ports to random ports</span></span><br><span class="line"><span class="string"># 容器的根文件系统只读</span></span><br><span class="line"><span class="string">      --read-only                      Mount the container&#x27;</span>s root filesystem as <span class="built_in">read</span> only</span><br><span class="line"><span class="comment"># 推出容器的时候，自动删除容器</span></span><br><span class="line">  --rm   Automatically remove the container when it exits</span><br><span class="line"><span class="comment"># 分配一个伪终端并绑定到容器的标准输入上</span></span><br><span class="line">  -t, --tty                            Allocate a pseudo-TTY</span><br><span class="line"><span class="comment"># 数据卷，将容器内的目录挂载到宿主机的目录</span></span><br><span class="line">  -v, --volume list                    Bind mount a volume</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker create --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"><span class="comment"># 创建一个容器，但是不运行</span></span><br><span class="line">Create a new container</span><br><span class="line"></span><br><span class="line">Options: </span><br><span class="line"><span class="comment"># 与docker run 一致，这里不重复了</span></span><br></pre></td></tr></table></figure><h3 id="删除一个容器"><a href="#删除一个容器" class="headerlink" title="删除一个容器"></a>删除一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker rm --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="comment"># 删除一个或者多个容器</span></span><br><span class="line">Remove one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 强制删除，即使它在运行状态</span></span><br><span class="line">  -f, --force     Force the removal of a running container (uses SIGKILL)</span><br><span class="line"><span class="comment"># 删除挂载的宿主机目录</span></span><br><span class="line">  -v, --volumes   Remove anonymous volumes associated with the container</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker ps --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker ps [OPTIONS]</span><br><span class="line"><span class="comment"># 展示容器</span></span><br><span class="line">List containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 展示所有的容器</span></span><br><span class="line">  -a, --all             Show all containers (default shows just running)</span><br><span class="line"><span class="comment"># 条件过滤</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line">      --format string   Pretty-print containers using a Go template</span><br><span class="line"><span class="comment"># 控制显示个数，包括停止的容器</span></span><br><span class="line">  -n, --last int        Show n last created containers (includes all states) (default -1)</span><br><span class="line"><span class="comment"># 显示最近创建的容器，包括停止的容器</span></span><br><span class="line">  -l, --latest          Show the latest created container (includes all states)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br><span class="line"><span class="string"># 只显示容器id</span></span><br><span class="line"><span class="string">  -q, --quiet           Only display container IDs</span></span><br><span class="line"><span class="string"># 显示容器占用内存</span></span><br><span class="line"><span class="string">  -s, --size            Display total file sizes</span></span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker stop --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="comment"># 停止一个或者多个容器</span></span><br><span class="line">Stop one or more running containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 在ints后停止容器</span></span><br><span class="line">  -t, --time int   Seconds to <span class="built_in">wait</span> <span class="keyword">for</span> stop before killing it (default 10)</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker start --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="comment"># 启动一个或者多个已经停止的容器</span></span><br><span class="line">Start one or more stopped containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 启动并进入容器</span></span><br><span class="line">  -a, --attach               Attach STDOUT/STDERR and forward signals</span><br><span class="line"><span class="comment"># 启动并进入容器的标准输出设备</span></span><br><span class="line">  -i, --interactive          Attach container<span class="string">&#x27;s STDIN</span></span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker restart --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Restart one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --time int   Seconds to <span class="built_in">wait</span> <span class="keyword">for</span> stop before killing the container (default 10)</span><br></pre></td></tr></table></figure><h3 id="暂停容器"><a href="#暂停容器" class="headerlink" title="暂停容器"></a>暂停容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker pause --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker pause CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Pause all processes within one or more containers</span><br></pre></td></tr></table></figure><h3 id="取消暂停容器"><a href="#取消暂停容器" class="headerlink" title="取消暂停容器"></a>取消暂停容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker unpause --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker unpause CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Unpause all processes within one or more containers</span><br></pre></td></tr></table></figure><h3 id="查看容器的源数据"><a href="#查看容器的源数据" class="headerlink" title="查看容器的源数据"></a>查看容器的源数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker inspect --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">Return low-level information on Docker objects</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line"><span class="comment"># 展示容器的占用内存</span></span><br><span class="line">  -s, --size            Display total file sizes <span class="keyword">if</span> the <span class="built_in">type</span> is container</span><br><span class="line"><span class="comment"># 将JSON数据转化为特殊类型</span></span><br><span class="line">      --<span class="built_in">type</span> string     Return JSON <span class="keyword">for</span> specified <span class="built_in">type</span></span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker logs --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 显示详细的数据</span></span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line"><span class="comment"># 日志继续输出</span></span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line"><span class="comment"># 只展示尾部n条数据</span></span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default <span class="string">&quot;all&quot;</span>)</span><br><span class="line"><span class="comment"># 展示时间戳</span></span><br><span class="line">  -t, --timestamps     Show timestamps</span><br></pre></td></tr></table></figure><h3 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker attach --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker attach [OPTIONS] CONTAINER</span><br><span class="line"><span class="comment"># 直接进入容器当前正在运行的标准输出</span></span><br><span class="line">Attach <span class="built_in">local</span> standard input, output, and error streams to a running container</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker exec --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"><span class="comment"># 在运行的容器中运行一个新的command</span></span><br><span class="line">Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># 在后台运行command</span></span><br><span class="line">  -d, --detach               Detached mode: run <span class="built_in">command</span> <span class="keyword">in</span> the background</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">  -e, --env list             Set environment variables</span><br><span class="line"><span class="comment"># 读取文件中的环境变量</span></span><br><span class="line">      --env-file list        Read <span class="keyword">in</span> a file of environment variables</span><br><span class="line"><span class="comment"># 保持输出流开启</span></span><br><span class="line">  -i, --interactive          Keep STDIN open even <span class="keyword">if</span> not attached</span><br><span class="line"><span class="comment"># 给予此command登录用户的权力</span></span><br><span class="line">      --privileged           Give extended privileges to the <span class="built_in">command</span></span><br><span class="line"><span class="comment"># 分配一个伪终端</span></span><br><span class="line">  -t, --tty                  Allocate a pseudo-TTY</span><br></pre></td></tr></table></figure><p>一般我们都会使用<code>docker exec -it containerId|containerName /bin/bash</code>进入容器</p><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭当前的输出流，如果容器中没有其他输出流，容器就会自己关闭</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 保持当前输出流开启</span></span><br><span class="line">Ctrl+p+q</span><br></pre></td></tr></table></figure><p>如果容器中没有前台运行的command，则会自动关闭容器</p><h3 id="查看容器开放端口"><a href="#查看容器开放端口" class="headerlink" title="查看容器开放端口"></a>查看容器开放端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker port --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker port CONTAINER [PRIVATE_PORT[/PROTO]]</span><br><span class="line"></span><br><span class="line">List port mappings or a specific mapping <span class="keyword">for</span> the container</span><br></pre></td></tr></table></figure><h3 id="查看容器内进程信息"><a href="#查看容器内进程信息" class="headerlink" title="查看容器内进程信息"></a>查看容器内进程信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker top --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker top CONTAINER [ps OPTIONS]</span><br><span class="line"></span><br><span class="line">Display the running processes of a container</span><br></pre></td></tr></table></figure><h3 id="宿主机和容器内的文件复制"><a href="#宿主机和容器内的文件复制" class="headerlink" title="宿主机和容器内的文件复制"></a>宿主机和容器内的文件复制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima ~]<span class="comment"># docker cp --help</span></span><br><span class="line"></span><br><span class="line">Usage:  </span><br><span class="line"><span class="comment"># 将容器内的文件复制到宿主机内</span></span><br><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line"><span class="comment"># 将宿主机中的文件复制到容器内</span></span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">Copy files/folders between a container and the <span class="built_in">local</span> filesystem</span><br><span class="line"></span><br><span class="line">Use <span class="string">&#x27;-&#x27;</span> as the <span class="built_in">source</span> to <span class="built_in">read</span> a tar archive from stdin</span><br><span class="line">and extract it to a directory destination <span class="keyword">in</span> a container.</span><br><span class="line"></span><br><span class="line">Use <span class="string">&#x27;-&#x27;</span> as the destination to stream a tar archive of a</span><br><span class="line">container <span class="built_in">source</span> to stdout.</span><br></pre></td></tr></table></figure><h2 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h2><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220713123408178.png" class title="总结图"><h2 id="镜像的理解"><a href="#镜像的理解" class="headerlink" title="镜像的理解"></a>镜像的理解</h2><h3 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h3><p>镜像是一种轻量级、可执行的独立软件包</p><p>它包含运行某个软件所需要的所有内容，包括代码，运行时（一个程序在运行或者在被执行的依赖）、库，环境变量和配置文件。</p><h3 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h3><blockquote><p>UnionFS</p></blockquote><p>UnionFS (联合文件系统) 是一种<strong>分层</strong>、轻量级并且高性能的文件系统</p><p>它支持对文件系统的修改作为一次一次的提交做一层层的叠加</p><p>联合加载会把各层文件系统叠加起来,这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>BootFS</p></blockquote><p>BootFS(Boot file system)主要包含Bootloader和Kernel</p><p>Bootloader主要是引导加载Kernel内核，Linux刚启动时会加载Bootfs文件系统</p><p>当Bootloader加载完成之后整个内核就都在内存中了</p><p>此时内存的使用权已由Bootfs转交给内核，系统也会卸载BootFS</p><blockquote><p>RootFS</p></blockquote><p>RootFS (root file system) ，在Bootfs之上。包含的就是典型Linux系统中的&#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc等标准目录和文件。Rootfs就是<br>各种不同的操作系统发行版,比如Ubuntu , Centos等等。</p><blockquote><p>docker的centos镜像为什么那么小？</p></blockquote><p>对于一个精简的OS，RootFS可以很小，只包含一些最基本的命令、工具、库就可以了</p><p>当我们启动了一个容器，它底层可以直接使用宿主机已经加载好的Kernel</p><p>就不需要自己再虚拟一套环境，重新使用BootFS加载一个新的内核，大大节省了开销</p><hr><p>Union 文件系统是Docker镜像的基础。</p><p>镜像可以通过分层来进行继承,基于基础镜像(没有父镜像) , 可以制作各种具体的应用镜像。</p><p>当我们拉取一个镜像</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220714104335032.png" class title="拉取镜像"><p>我们可以发现</p><p>该镜像是一层一层下载的而不是一整个下载的</p><p>这就符合了UnionFS的特性</p><p>前面几层是在我下载其他镜像的时候已经下载过了</p><p>就可以直接拿来使用，不需要再次下载，实现了<strong>资源共享</strong>，极大的节省了内存</p><h4 id="查看镜像分层"><a href="#查看镜像分层" class="headerlink" title="查看镜像分层"></a>查看镜像分层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image inspect imageId|imageName</span><br></pre></td></tr></table></figure><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220714104702049.png" class title="查看镜像分层"><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>Docker镜像都是只读的</p><p>当使用命令启动了一个新的容器的时候</p><p>该镜像先被复制</p><p>接着一个新的可写层被添加到该复制后的镜像的顶层</p><p>这一层就是容器层</p><p>所以当我们新建了一个容器后，如果想将本次修改后的容器打包成一个新的镜像，就需要使用<code>docker commit</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima volumes]<span class="comment"># docker commit --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">Create a new image from a container<span class="string">&#x27;s changes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">  -a, --author string    Author (e.g., &quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;)</span></span><br><span class="line"><span class="string">  -c, --change list      Apply Dockerfile instruction to the created image</span></span><br><span class="line"><span class="string">  -m, --message string   Commit message</span></span><br><span class="line"><span class="string">  -p, --pause            Pause container during commit (default true)</span></span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷技术，说白了，其实就是文件的同步</p><p>我们创建了一个MySQL的容器，我们不对其做任何措施</p><p>如果我们误删除或者有人恶意删除了该容器</p><p>那么里面保存的数据也就随之丢失了</p><p>这是一件十分恶劣的事情</p><p>所以为了防止这种事情</p><p>我们就需要使用一种技术，将容器内保存数据的目录挂载到宿主机上</p><p>这种技术就是数据卷技术</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>这里我们部署一个MySQL来让大家明白如何使用卷技术</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -v 宿主机目录:容器内目录</span></span><br><span class="line"><span class="comment"># -p 宿主机短裤:容器端口</span></span><br><span class="line"><span class="comment"># -d 后台启动</span></span><br><span class="line"><span class="comment"># -e 设置环境变量</span></span><br><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql01 -v /home/mysql:/usr/share/mysql -v /home/mysql/conf:/etc/mysql/conf.d -p 49102:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br><span class="line"></span><br><span class="line">[root@zhima home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                NAMES</span><br><span class="line">d49309c0ab18   mysql          <span class="string">&quot;docker-entrypoint.s…&quot;</span>   6 seconds ago   Up 4 seconds   33060/tcp, 0.0.0.0:49102-&gt;3306/tcp   mysql01</span><br><span class="line">[root@zhima conf]<span class="comment"># cd /home/mysql/data/</span></span><br><span class="line">[root@zhima data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf       binlog.000002  ca-key.pem  client-cert.pem  <span class="comment">#ib_16384_0.dblwr  ib_buffer_pool  ib_logfile0  ibtmp1        mysql      performance_schema  public_key.pem   server-key.pem  undo_001</span></span><br><span class="line">binlog.000001  binlog.index   ca.pem      client-key.pem   <span class="comment">#ib_16384_1.dblwr  ibdata1         ib_logfile1  #innodb_temp  mysql.ibd  private_key.pem     server-cert.pem  sys             undo_002</span></span><br></pre></td></tr></table></figure><img src="/javaEE/Docker/2022/07/13/Docker-%E5%9F%BA%E7%A1%80/image-20220714115412356.png" class title="测试连接"><p>删除容器之后，宿主机中仍然保存着容器内的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima data]<span class="comment"># docker stop mysql01</span></span><br><span class="line">mysql01</span><br><span class="line">[root@zhima data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf       binlog.000002  ca-key.pem  client-cert.pem  <span class="comment">#ib_16384_0.dblwr  ib_buffer_pool  ib_logfile0  #innodb_temp  mysql.ibd           private_key.pem  server-cert.pem  sys       undo_002</span></span><br><span class="line">binlog.000001  binlog.index   ca.pem      client-key.pem   <span class="comment">#ib_16384_1.dblwr  ibdata1         ib_logfile1  mysql         performance_schema  public_key.pem   server-key.pem   undo_001</span></span><br></pre></td></tr></table></figure><h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载，我不指定宿主句的路径，指定容器内的路径</span></span><br><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql01 -v /usr/share/mysql -v /etc/mysql/conf.d -p 49102:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具名挂载，我不指定宿主句的路径，但是指定一个名字，并指定容器内的路径</span></span><br><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql01 -v mysql_data:/usr/share/mysql -v mysql_config:/etc/mysql/conf.d -p 49102:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br></pre></td></tr></table></figure><p>不管是具名挂载还是匿名挂载都是docker自动在<code>/var/lib/docker/volumes</code>目录下创建文件夹</p><p>只不过具名挂载可以自己指定该文件夹的名字</p><h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><p>如何做到多个容器间数据共享呢？ </p><p>那就需要使用数据卷容器技术，其实就是一个可选项，下面看使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql01 -v mysql_data:/usr/share/mysql -v mysql_config/etc/mysql/conf.d -p 49102:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql02 --volumes-from mysql01 -p 49103:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br><span class="line">[root@zhima home]<span class="comment"># docker run --name mysql03 --volumes-from mysql01 -p 49103:3306  -d -e MYSQL_ROOT_PASSWORD=123456  mysql</span></span><br></pre></td></tr></table></figure><p>mysql01就叫数据卷容器</p><p>mysql02、mysql03就会和mysql01的挂载是一样的</p><p>即mysql02和mysql03都和mysql01一样挂载到了宿主机的同个目录</p><p><code>/var/lib/docker/volumes/mysql_data</code>和<code>/var/lib/docker/volumes/mysql_cofig</code></p><h4 id="对数据卷的操作"><a href="#对数据卷的操作" class="headerlink" title="对数据卷的操作"></a>对数据卷的操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对卷的操作</span></span><br><span class="line">[root@zhima etc]<span class="comment"># docker volume --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line"></span><br><span class="line">Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的文件</p><p>1、Dockerfile中的保留关键词使用的时候都必须是大写</p><p>2、指令是从上到下执行的</p><p>3、#表示注释</p><p>4、每一个指令都会创建并提交一层镜像层</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>Dockerfile中的指令</p><table><thead><tr><th align="center">指令</th><th>说明</th></tr></thead><tbody><tr><td align="center">FROM</td><td>说明镜像使用的基础镜像</td></tr><tr><td align="center">MAINTAINER</td><td>设置镜像的作者</td></tr><tr><td align="center">ADD</td><td>构建镜像的时候复制文件到容器内</td></tr><tr><td align="center">COPY</td><td>构建镜像的时候复制文件到容器内</td></tr><tr><td align="center">RUN</td><td>设置容器的启动命令</td></tr><tr><td align="center">ONBUILD</td><td>设置镜像的ONBUILD指令</td></tr><tr><td align="center">WORKDIR</td><td>设置运行RUN CMD ENTRYPOINT COPY ADD指令的工作目录</td></tr><tr><td align="center">USER</td><td>设置运行RUN CMD ENTRYPOINT的用户名</td></tr><tr><td align="center">STOPSIGNAL</td><td>设置容器退出的时候的信号量</td></tr><tr><td align="center">ARG</td><td>设置编译镜像的时候加入的参数</td></tr><tr><td align="center">LABEL</td><td>设置镜像的标签</td></tr><tr><td align="center">CMD</td><td>编译镜像的时候运行的脚本</td></tr><tr><td align="center">ENV</td><td>设置容器的环境变量</td></tr><tr><td align="center">EXPOSE</td><td>设置镜像暴露的端口</td></tr><tr><td align="center">ENTRYPOINT</td><td>设置容器的入口程序</td></tr><tr><td align="center">VOLUME</td><td>设置容器的挂载卷</td></tr></tbody></table><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>自己制作一个带网络配置和vim的centos镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> zhima&lt;<span class="number">1158778689</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面三行RUN命令是为了解决以下这个错误的</span></span><br><span class="line"><span class="comment"># Error: Failed to download metadata for repo &#x27;appstream&#x27;: Cannot prepare internal mirrorlist: No URLs in mirrorlist</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>构建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima home]<span class="comment"># docker build --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">Build an image from a Dockerfile</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"><span class="comment"># Dockerfile的名字</span></span><br><span class="line">  -f, --file string             Name of the Dockerfile (Default is <span class="string">&#x27;PATH/Dockerfile&#x27;</span>)</span><br><span class="line"><span class="comment"># 生成的镜像的标签</span></span><br><span class="line">  -t, --tag list                Name and optionally a tag <span class="keyword">in</span> the <span class="string">&#x27;name:tag&#x27;</span> format</span><br><span class="line">  </span><br><span class="line">docker build -f Dockerfile -t myImageName:tag ./</span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker build -t mycentos:1.0 .</span></span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker run -it --name centos1  mycentos:1.0</span></span><br><span class="line">[root@49ea92e17942 <span class="built_in">local</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h3 id="CMD和ENTRYPOINT"><a href="#CMD和ENTRYPOINT" class="headerlink" title="CMD和ENTRYPOINT"></a>CMD和ENTRYPOINT</h3><p>我们来试一下构建这个Dockerfile，并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure><p>构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker build -t mycentos .</span></span><br><span class="line">Sending build context to Docker daemon  17.92kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"> ---&gt; 5d0da3dc9764</span><br><span class="line">Step 2/2 : CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> a1e70a05d8dd</span><br><span class="line">Removing intermediate container a1e70a05d8dd</span><br><span class="line"> ---&gt; 00433fd4c299</span><br><span class="line">Successfully built 00433fd4c299</span><br><span class="line">Successfully tagged mycentos:latest</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker run -it --name &quot;centos1&quot; mycentos</span></span><br><span class="line">.   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr</span><br><span class="line">..  binetc  lib   lost+found  mnt    proc  run   srvtmp  var</span><br></pre></td></tr></table></figure><p>可以发现，进入容器之后，就执行了<code>ls -a</code>命令</p><p>我们尝试一下在启动的时候加入一些参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker run -it --name &quot;centos2&quot; mycentos -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: <span class="built_in">exec</span>: <span class="string">&quot;-l&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span>: unknown.</span><br></pre></td></tr></table></figure><p>我们发现容器并没有执行<code>ls -al</code>，而是直接报错了</p><p>其实这就是CMD的特性，当我在启动容器的时候添加了一个CMD后</p><p>镜像中定义的CMD就被覆盖掉了</p><p>单独的<code>-l</code>当然会报错了</p><hr><p>我们来看一下使用ENTRYPOINT会怎么样</p><p>修改Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure><p>重新构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker build -t mycentos .</span></span><br><span class="line">Sending build context to Docker daemon  17.92kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"> ---&gt; 5d0da3dc9764</span><br><span class="line">Step 2/2 : ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 22ef40dea625</span><br><span class="line">Removing intermediate container 22ef40dea625</span><br><span class="line"> ---&gt; 73a3d51b4d84</span><br><span class="line">Successfully built 73a3d51b4d84</span><br><span class="line">Successfully tagged mycentos:latest</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@zhima lizhi]<span class="comment"># docker run -it --name &quot;centos1&quot; mycentos -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 14 08:52 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 14 08:52 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Jul 14 08:52 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  360 Jul 14 08:52 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jul 14 08:52 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 191 root root    0 Jul 14 08:52 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Jan 29 10:27 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Sep 15  2021 var</span><br></pre></td></tr></table></figure><p>可以发现，容器执行的是<code>ls -al</code>，<code>-l</code>指令被追加给了ENTRYPOINT定义的语句</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-导言</title>
      <link href="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/"/>
      <url>/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-导言"><a href="#Docker-导言" class="headerlink" title="Docker-导言"></a>Docker-导言</h1><h2 id="Docker出现的原因"><a href="#Docker出现的原因" class="headerlink" title="Docker出现的原因"></a>Docker出现的原因</h2><p>每一款产品的出示都是为了解决一些痛点问题</p><p>相信我们都经历过这种场景</p><p>我们的项目在本地跑起来一点毛病都没有</p><p>开心地将jar包分享给同学</p><p>过了一会，同学一脸嫌弃地找你去看他在服务器上运行后齐刷刷的报错信息，觉得你写的代码不行，跑都跑不起来</p><p>看了报错，发现他没有安装redis，没有安装es，没有安装mysql等等软件</p><p>这时候就很无奈了，只能帮其一步步进行安装，进行配置</p><p>安装完成后，可能还要调一堆的bug，浪费了大量的时间</p><hr><p>我们现在的结构是(Linux + jar + Redis环境 + ES环境 + Mysql环境… )</p><p>这就会导致上面出现的问题，就算他早就安装了这些软件，如果版本和你使用的不一致，那么也有可能报错</p><p>这时候，就希望有样东西可以帮我们解决这个问题</p><p>那么这个东西就是<strong>Docker</strong></p><p>在使用Docker之后，结构就变成了(Linux+（jar + Redis环境 + ES环境 + Mysql环境… ）)</p><p>将jar包和环境一起打包，就不会出现开头出现的问题啦</p><p>下面让我们来学习Docker吧</p><h2 id="认识Docker"><a href="#认识Docker" class="headerlink" title="认识Docker"></a>认识Docker</h2><p>传统运行应用</p><p>所有的应用都是跑在同一个宿主机上</p><p>使用共同的类库（Lib）</p><p>所以请你想象这种场景：</p><p>APP1(将其比作放射物质)+APP2(将其比作食物)</p><p>那么这种情况下，APP2会被APP1破坏</p><p>如果有些应用又依赖APP1，那么就会牵扯很多应用无故躺枪</p><p>导致Linux大环境牵连受损，很难处理</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713201412305.png" class title="传统安装应用"><p>当我们使用了Docker技术之后</p><p>所有的应用都是在Docker的管理下运行的</p><p>这里的应用就要换个名字了，叫容器</p><p>每一个容器都有一套自己的环境，并且不会受到其他容器环境的影响，容器之间是相互隔绝的</p><p>就算有两个水火不容的应用出现在了同一个容器中，也不会影响到其他容器的环境</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713202043674.png" class title="使用Docker"><p>下面看一下Docker官方给出的一张体系架构图</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713203453022.png" class title="Docker体系架构"><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>传统虚拟机技术 VS Docker容器技术</p><p>虚拟机实现资源隔离的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的</p><p>Docker比虚拟机有更少的抽象层，不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源</p><p>而虚拟机加载GuestOs是分钟级启动的</p><p>docker利用的是宿主机的内核，而不需要Guest OS。</p><p>因此，Docker通过镜像新建一个容器的时候，不需要像虚拟机一样重新加载一个虚拟机内核</p><p>我们知道，引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。</p><p>而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟。</p><p>另外，现代操作系统是复杂的系统，在一台物理机上新增加一个操作系统的资源开销是比较大的</p><p>所以docker对比虚拟机在资源消耗上也占有比较大的优势。</p><p>在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载之前的Docker</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment">#下载需要的安装包</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置镜像仓库</span></span><br><span class="line"> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:\\download.docker.com\linux\centos\docker-ce.repo<span class="comment">#默认是国外的</span></span><br><span class="line">    </span><br><span class="line"> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:\\mirrors.aliyun.com\docker-ce\linux\centos\docker-ce.repo<span class="comment">#阿里云的</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 更新yum软件包索引</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Docker引擎 docker-ce  docker-ee</span></span><br><span class="line"> sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line"> sudo systemctl start docker</span><br><span class="line"> </span><br><span class="line"><span class="comment">#测试是否启动成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713204346903.png" class title="测试是否安装成功"><p>如果你购买了阿里云、百度云、腾讯云的服务器，可以配置一个容器镜像加速</p><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713204713156.png" class title="容器镜像服务"><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713204734931.png" class title="点击镜像加速器"><img src="/javaEE/Docker/2022/07/13/Docker-%E5%AF%BC%E8%A8%80/image-20220713204809382.png" class title="参考命令"><blockquote><p>这个镜像加速走的是服务器内网，写我的也没有用哦</p></blockquote><h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载docker依赖</span></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除资源</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家对正则的态度就是</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709110059981.png" alt="就这就这" style="zoom:67%;"><p>但是当每次在需要做校验或者的时候，都会十分狼狈的去百度，去CSDN</p><p>将找到的正则表达式直接copy过来，也不会去看里面写的啥</p><p>直接就信心满满的去运行</p><p>然后就<strong>要么报错，要么啥也没匹配到</strong></p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709110315322.png" class title="生气"><p>看别人写的java代码，我们是痛苦的</p><p>看别人写的正则表达式，我们感受不到痛苦，是绝望的，直接放弃了</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709105729959.png" class title="真实"><p>实在受不了这种<strong>任人宰割</strong>的感觉，所以就花了几天彻彻底底地将正则学了一遍</p><p>最真实地感觉就是，正则不简单，得把它当作一种语言去学</p><p>这样才可以拿出态度去接受它</p><p>下面是学习笔记</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正则表达式是由普通字符（如英文字母）以及特殊字符（也称为元字符）组成的文字模式</p><p>该模式对文本查找时需要匹配的一个或多个字符串描述，给出一个匹配模板。</p><p>它可以大大简化文本识别工作，现已超出了某种语言或某个系统的局限，成为被人们广为使用的工具。</p><p>先给大家介绍一个在线检测正则表达式的网站，十分好用！</p><p>链接如下：<strong><a href="https://regex101.com/">https://regex101.com</a></strong></p><blockquote><p>声明：以下我使用的某些概念在不同网站上，不同视频中，都会有不同的叫法，我会尽量将所有的讲法都标注</p></blockquote><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>下面在开始正题之前，我要先给大家讲一个修饰符的概念。</p><p>我自己在学这个的时候，没有哪一个视频或者教程会将修饰符放到最前面</p><p>但是在我学下来，我觉得如果将这个知识点放在最前面，而且这个知识点也不难，只是一个概念</p><p>这可能会有利于大家的学习，所以我就尝试将此知识点前置</p><p>在正则表达式中有很多修饰符</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709110411805.png" class title="正则修饰符"><p>我们只看常用的四个</p><blockquote><p>大家注意这个地方，这个地方显示的就是当前开启的修饰符</p></blockquote><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111834078.png" class title="当前开启的修饰符"><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709110835523.png" class title="不开启global修饰符"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709110914277.png" class title="开启global修饰符"><p>可以看到这其中的区别就是</p><p>非全局模式只匹配了第一个匹配成功的</p><p>而全局模式则匹配了所有匹配成功的</p><h3 id="multi-line"><a href="#multi-line" class="headerlink" title="multi line"></a>multi line</h3><p>这里只演示<code>^</code>的情况</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111131932.png" class title="不开启multi line"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111247270.png" class title="开启multi line"><p>这里要有个前置知识，就是</p><p><code>^</code>匹配文本开头</p><p><code>$</code>匹配文本结尾</p><p>我们都知道文本只有一个开头和一个结尾</p><p>但是开启了multi line之后</p><p><code>^</code>不仅可以匹配<strong>文本开头</strong>而且可以匹配<strong>行首</strong></p><p><code>$</code>不仅可以匹配<strong>文本结尾</strong>而且可以匹配<strong>行尾</strong></p><h3 id="single-line"><a href="#single-line" class="headerlink" title="single line"></a>single line</h3><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111551979.png" class title="不开启single line"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111620815.png" class title="开启single line"><p>这里也需要有前置知识</p><p><code>.</code>可以匹配除了<code>\n</code>之外的所有字符</p><p>开启了single line之后</p><p><code>.</code>可以匹配所有的字符，包括<code>\n</code></p><h3 id="insensitive"><a href="#insensitive" class="headerlink" title="insensitive"></a>insensitive</h3><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111934100.png" class title="不开启insensitive修饰符"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709111959810.png" class title="开启insensitive修饰符"><p>该修饰符就是关闭大小写敏感</p><p>即<code>a</code>和<code>A</code>是一样的</p><h2 id="简单匹配"><a href="#简单匹配" class="headerlink" title="简单匹配"></a>简单匹配</h2><h3 id="固定字符串"><a href="#固定字符串" class="headerlink" title="固定字符串"></a>固定字符串</h3><p>假如我要在下列文本中匹配export字符串，我们可以这么写</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709104329725.png" class title="匹配export字符串"><p>这就是对固定字符串的匹配，这很简单</p><h3 id="范围字符"><a href="#范围字符" class="headerlink" title="范围字符"></a>范围字符</h3><blockquote><p>又叫元字符</p></blockquote><p>在正则表达式中，我们有以下表示一定范围的字符</p><table><thead><tr><th align="center">符号</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配除 \n 以外的任何一个字符</td></tr><tr><td align="center">\d</td><td align="center">匹配单个数字字符，相当于<code>[0-9]</code></td></tr><tr><td align="center">\D</td><td align="center">匹配单个非数字字符，相当于<code>[^0-9]</code></td></tr><tr><td align="center">\w</td><td align="center">匹配单个数字、大小写字母、下划线字符，相当于<code>[0-9a-zA-Z_]</code></td></tr><tr><td align="center">\W</td><td align="center">匹配单个非数字、非大小写字母字符，非下划线，相当于<code>[^0-9a-zA-Z_]</code></td></tr><tr><td align="center">\s</td><td align="center">匹配任意一个\n、空格、tab</td></tr><tr><td align="center">\S</td><td align="center">与\s匹配的相反</td></tr><tr><td align="center">\b</td><td align="center">匹配每一个单词的前和后</td></tr><tr><td align="center">\B</td><td align="center">与\b匹配的相反</td></tr></tbody></table><blockquote><p>注意：一个范围字符只可以匹配<strong>一个</strong>属于该范围的字符</p><p>​<strong>一个</strong>！<strong>一个</strong>！<strong>一个</strong>！</p><p>​输入.发现除了\n全亮了是因为开启了global修饰符！</p></blockquote><p>这里没什么好说的，背下，下面给一张图帮助记忆</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709164727111.png" class title="范围字符"><h3 id="自定义范围字符"><a href="#自定义范围字符" class="headerlink" title="自定义范围字符"></a>自定义范围字符</h3><p>对于十六进制的颜色，#后面只能出现数字和<code>a-f</code>的字符</p><p>我们发现内置的这些范围字符都不太好用</p><p>这时候就需要使用自定义范围字符</p><p>想要定义自定义范围字符，就需要使用<code>[]</code></p><p>下面我们来写匹配十六进制的自定义范围字符</p><ul><li>自己写全<ul><li><code>[0123456789abcdef]</code></li></ul></li><li>使用<code>-</code>连接符<ul><li><code>[0-9a-f]</code></li></ul></li></ul><p><code>[]</code>还有几种写法，我们使用案例来说明</p><h4 id="栗一"><a href="#栗一" class="headerlink" title="栗一"></a>栗一</h4><p>数据如下，匹配80年代和90年代以外的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">姓名  生日</span><br><span class="line">芝麻 2001-05-22</span><br><span class="line">章一 1993-08-09</span><br><span class="line">沈家怡 1999-05-22</span><br><span class="line">陆力丹 1989-02-19</span><br><span class="line">王子怡 2002-12-15</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709113707311.png" class title="匹配80年代和90年代以外的"><p>在<code>[]</code>内部的开头写<code>^</code>表示匹配<strong>除了</strong>方括号里面出现的字符</p><h4 id="栗二"><a href="#栗二" class="headerlink" title="栗二"></a>栗二</h4><p>匹配特殊字符<code>^</code>或者<code>$</code>或者<code>.</code></p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709113846798.png" class title="匹配特殊字符"><p>但是小伙伴可能写的顺序不是这样的，你可能是这样写的<code>[^$.]</code></p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709114004098.png" class title="顺序不同的匹配结果"><p>这里如果<code>^</code>放在第一位，他就会使用栗一种的功能</p><p>如果我就是想要用这种顺序写，但是还想匹配<code>^</code>特殊字符本身，可不可以呢？</p><p>当然可以啦，这里需要使用转义字符<code>\</code>登场了</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709114240202.png" class title="转义字符登场"><h4 id="栗三"><a href="#栗三" class="headerlink" title="栗三"></a>栗三</h4><p>这个案例就有点难了，我们来匹配正确的车牌号，匹配规则如下</p><p>普通车牌特征：</p><ol><li>第1位是表籍贯的汉字</li><li>第2位是表城市的大写字母，<strong>不包括</strong>I和O。因为容易和数字0和1混淆</li><li>后5位是字母加数字，也<strong>不包括</strong>I和O</li></ol><p>测试数据如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">湘C4ASF7</span><br><span class="line">湘G9AWSE</span><br><span class="line">湘O392LEY</span><br><span class="line">鲁E2S1EF</span><br><span class="line">湘D219U5</span><br><span class="line">湘AS2BKN</span><br><span class="line">皖91L2IZ</span><br><span class="line">鲁I0H8F</span><br><span class="line">鲁R10Y2F</span><br><span class="line">A湘1R9GJ3</span><br><span class="line">鲁REF02H</span><br><span class="line">鲁2319G7</span><br><span class="line">鲁3RGN90</span><br><span class="line">N鲁23G90K</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709115429109.png" class title="测试"><h3 id="基本逻辑控制"><a href="#基本逻辑控制" class="headerlink" title="基本逻辑控制"></a>基本逻辑控制</h3><p>在正则表达式中只有<strong>且</strong>和<strong>或</strong>这两种逻辑关系，我们这里用一个案例来引出<strong>或</strong></p><p>匹配规则：匹配所有的http状态码</p><ul><li>401：未授权</li><li>403：无权限访问</li><li>404：找不到资源</li><li>500：服务内部错误</li></ul><p>测试数据如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">404</span><br><span class="line">500</span><br><span class="line">309</span><br><span class="line">403</span><br><span class="line">230</span><br><span class="line">401</span><br><span class="line">400</span><br><span class="line">234</span><br><span class="line">325</span><br><span class="line">401</span><br><span class="line">923</span><br><span class="line">482</span><br><span class="line">340</span><br><span class="line">325</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709120108767.png" class title="基本逻辑控制"><p>那且呢？</p><p>其实我们早就使用过<code>且</code>了</p><p>就比如我们这个案例中，<code>404</code>不就是<code>且</code>么？</p><p>4并且0并且4</p><p>这三个数字同时满足，才匹配出来404</p><h3 id="数量控制"><a href="#数量控制" class="headerlink" title="数量控制"></a>数量控制</h3><p>我们回顾一下之前的匹配十六进制颜色的案例</p><p>测试数据如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#BC0D13</span></span><br><span class="line">  color: <span class="number">#CCCCCC</span></span><br><span class="line">  line-height: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-aside</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5fe3a1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0086b3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709121650160.png" class title="匹配十六进制颜色"><p><code>&#123;&#125;</code>就是数量控制的语法，我们来看看不使用数量控制的时候应该怎么写</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709121716520.png" class title="不使用数量控制的语法"><p><code>&#123;n&#125;</code>指定出现固定次数</p><p><code>&#123;n,&#125;</code>指定至少出现n次</p><p><code>&#123;n,m&#125;</code>指定出现n到m次</p><h4 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h4><table><thead><tr><th>符号</th><th>等价</th></tr></thead><tbody><tr><td>*</td><td><code>&#123;0,&#125;</code></td></tr><tr><td>+</td><td><code>&#123;1,&#125;</code></td></tr><tr><td>?</td><td><code>&#123;0,1&#125;</code></td></tr></tbody></table><h4 id="懒惰匹配和贪婪匹配"><a href="#懒惰匹配和贪婪匹配" class="headerlink" title="懒惰匹配和贪婪匹配"></a>懒惰匹配和贪婪匹配</h4><p>该知识点我们配合案例来食用</p><p>匹配所有的<code>span</code>标签</p><p>测试数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>kongge<span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们先来尝试一下</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709122414472.png" class title="尝试"><p>我们发现，它竟然<strong>全匹配</strong>了，这是为什么呢？</p><blockquote><p>解释</p></blockquote><p>+会尽量一直往后匹配，一直到无法匹配<code>.</code>为止</p><p>本来匹配到span1后面的<code>&lt;</code>符号的时候，就可以停止匹配了</p><p>但是因为默认开启的是贪婪匹配，啥意思呢？</p><p>就是<code>&lt;</code>还是符合<code>.</code>的吧，那就继续匹配</p><p>直到匹配到span2后面的<code>&lt;</code>的时候，发现如果再匹配span2后面的<code>&lt;</code>了</p><p>那么我们正则表达式中最后的<code>&lt;/span&gt;</code>就没法匹配了，所以<code>.</code>就匹配到span2中的2为止</p><p>那让我们开启懒惰模式看看结果</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709122836416.png" class title="开启懒惰模式"><blockquote><p>解释</p></blockquote><p>+会尽量一直往后匹配，一直到无法匹配为止</p><p>匹配到span1后面的<code>&lt;</code>符号的时候</p><p>发现其实这个<code>&lt;</code>已经可以匹配正则最后的<code>&lt;</code>了</p><p>那就结束匹配吧，所以就匹配出了第一组<code>span</code>标签</p><blockquote><p>注意点：</p></blockquote><p>开启懒惰模式中的<code>?</code>和我们在数量控制中的<code>?</code>是<strong>不一样</strong>的</p><p>懒惰模式中的<code>?</code>只能写在数量控制<code>&#123;&#125;</code>后面</p><p>数量控制<code>&#123;&#125;</code>只可以写在范围字符后面<code>[a-f]</code>或者<code>\d</code>这种</p><p>这里需要好好理解一下</p><h4 id="删除所有的HTML注释"><a href="#删除所有的HTML注释" class="headerlink" title="删除所有的HTML注释"></a>删除所有的HTML注释</h4><p>测试数据如下</p><p>有三种注释哦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &#123;&#123;test&#125;&#125;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">test</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">/*methods: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;,*/</span></span></span><br><span class="line"><span class="javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">test</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">handler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newData,oldData</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(newData);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(oldData);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">// immediate: true</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709160510209.png" class title="匹配HTML注释"><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组指将匹配的内容，使用<code>()</code>划分成多个组块，分好的组可用于在匹配后<strong>提取</strong>、反向<strong>引用</strong>以及<strong>替换</strong>操作。</p><p>下面使用两个案例来做说明</p><h4 id="提取信息转sql"><a href="#提取信息转sql" class="headerlink" title="提取信息转sql"></a>提取信息转sql</h4><p>什么意思呢？就是将提取出来的数据转化为DML语句</p><p>栗：<code>insert into user(name,age,sex,birthday) values(&#39;芝麻&#39;,&#39;19&#39;,&#39;男&#39;,&#39;2001-05-22&#39;)</code></p><p>测试数据如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">芝麻   2001/05/22 19岁  男</span><br><span class="line">章一   1993-08-09 20岁  女</span><br><span class="line">沈家怡 1999.05.22  21岁 女</span><br><span class="line">陆力丹 1989-02-19  19岁 男</span><br><span class="line">王子怡 2002-12-15  19岁 男</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709161650300.png" class title="转sql"><p><code>$组号</code>可以拿到括号中匹配的内容</p><h4 id="匹配正确的自闭和标签"><a href="#匹配正确的自闭和标签" class="headerlink" title="匹配正确的自闭和标签"></a>匹配正确的自闭和标签</h4><p>测试数据如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h22<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h23<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h32<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h11<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>d iv1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>wrong<span class="tag">&lt;/<span class="name">dspan</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709162550488.png" class title="正确的自闭和标签"><p>在正则表达式中使用<code>\组号</code>来<strong>反向引用</strong>前面匹配的组</p><p><code>$0</code>表示整个匹配的字符串</p><p>注意反向引用只用在表达式中引用<strong>之前</strong>的分组</p><h4 id="匹配所有的JavaScript中的字符串"><a href="#匹配所有的JavaScript中的字符串" class="headerlink" title="匹配所有的JavaScript中的字符串"></a>匹配所有的JavaScript中的字符串</h4><p>JavaScript中有三种字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="number">2</span>、<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="number">3</span>、<span class="string">``</span></span><br></pre></td></tr></table></figure><p>测试文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">const fs = require(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">const server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>,(req,resp)=&gt;&#123;</span><br><span class="line">    <span class="built_in">let</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span>(url===<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;</span><br><span class="line">        resp.end();</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    console.log(`访问的网址的<span class="variable">$&#123;url&#125;</span>，访问方法是<span class="variable">$&#123;req.method&#125;</span>`);</span><br><span class="line">    <span class="built_in">let</span> data = fs.readFileSync(path.join(__dirname,url));</span><br><span class="line">    resp.end(data);</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="string">&#x27;80&#x27;</span>,()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;服务启动\&quot;成功\&quot;，80端口&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709173204055.png" class title="匹配所有的JavaScript字符串"><h4 id="下面做个拓展"><a href="#下面做个拓展" class="headerlink" title="下面做个拓展"></a>下面做个拓展</h4><p>分组还有以下四种情况</p><ol><li><code>?&lt;名称&gt;</code>命名分组</li><li><code>(?:)</code>移除分组</li><li><code>(())</code>嵌套分组</li><li><code>(\d)+</code>分组中使用量词</li></ol><h5 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h5><p>默认情况下通过<strong>组号</strong>来取值，此外也可以自定义命名组，语法是<code>(?&lt;名称&gt; )</code></p><p>然后在程序中就可以通过<code>&lt;&gt;</code>中的<code>名称</code>来取值。</p><p>如：<code>&lt;(?&lt;title&gt;(\S+?))&gt;.*&lt;\/\1&gt;</code> 该表达式就命名了一个<strong>title</strong>的组，在js的结果中就可通过<strong>title</strong>属性取值。</p><blockquote><p>注意：</p><p>这种命名组只能用于在程序中提取操作，不能进行反向引用，也不能用在替换操作中。</p><p>也正因为这种局限性所以命名组使用的很少。</p></blockquote><h5 id="移除分组"><a href="#移除分组" class="headerlink" title="移除分组"></a>移除分组</h5><p><code>()</code>即用于子表达式，同时也是一个分组。</p><p>如果只想用作子表达式，而不想用于分组就可以使用<code>(?: )</code>从分组列表中移除。</p><p>比如<code>(?:\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</code> 该表达式就只存在两个组，月<code>$1</code>和日<code>$2</code>。</p><h5 id="嵌套分组"><a href="#嵌套分组" class="headerlink" title="嵌套分组"></a>嵌套分组</h5><p>比如：<code>((\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;))</code> 其组号的命名顺序是以<strong>开括号</strong>出现顺序为准。</p><p><code>$1</code>指的是一个整体</p><p><code>$2</code>指的是年</p><p><code>$3</code>指的是月</p><p><code>$4</code>指的是日</p><p>按照<code>(</code>的顺序进行编组</p><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h5><p>在Idea、VS Code、Sublime、Notepad++等工具进行替换操作时，还可以使用下表中操作符进行大小写转换</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\u 单个转大写</td><td align="left">转换下一个字符为<strong>大</strong>写</td></tr><tr><td align="left">\U 全部转大写</td><td align="left">转换<code>\U</code>后所有字符转<strong>大</strong>写</td></tr><tr><td align="left">\U…\E 区间转大写</td><td align="left"><code>\U</code>与<code>\E</code>区间的内容转<strong>大</strong>写</td></tr><tr><td align="left">\l 单个转小写</td><td align="left">转换一下个字符为小写</td></tr><tr><td align="left">\L 全部转小写</td><td align="left">转换<code>\L</code>后所有字符转小写</td></tr><tr><td align="left">\L…\E 区间转小写</td><td align="left"><code>\L</code>与<code>\U</code>区间的内容转小写</td></tr></tbody></table><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709173819679.png" class title="vscode使用正则查找"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709173840070.png" class title="替换"><h3 id="边界断言"><a href="#边界断言" class="headerlink" title="边界断言"></a>边界断言</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>是边界断言让正则表达式有了<strong>条件</strong>判断的能力</p><p>先来看个栗子感受一下</p><p>匹配所以姓名，不能带着表头中的姓名</p><p>测试数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">姓名生日年龄 性别</span><br><span class="line">芝麻   2001/05/22 19岁  男</span><br><span class="line">章一   1993-08-09 20岁  女</span><br><span class="line">沈家怡 1999.05.22  21岁 女</span><br><span class="line">陆力丹 1989-02-19  19岁 男</span><br><span class="line">王子怡 2002-12-15  19岁 男</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709163732036.png" class title="不带表头的姓名"><p>这里面的<code>(?!)</code>就是前置否定断言</p><p>在断言这里，网上的，视频的教程对其的称呼真的是层出不穷，</p><table><thead><tr><th align="left">表达式</th><th align="left">环视</th><th align="left">预查</th><th align="left">边界断言</th><th align="left">零宽断言</th></tr></thead><tbody><tr><td align="left"><code>(?= )</code></td><td align="left">向前肯定环视</td><td align="left">正向肯定预查</td><td align="left">边界前置肯定断言</td><td align="left">零宽度正预测先行断言</td></tr><tr><td align="left"><code>(?! )</code></td><td align="left">向前否定环视</td><td align="left">正向否定预查</td><td align="left">边界前置否定断言</td><td align="left">零宽度负预测先行断言</td></tr><tr><td align="left"><code>(?&lt;= )</code></td><td align="left">向后肯定环视</td><td align="left">反向肯定预查</td><td align="left">边界后置肯定断言</td><td align="left">零宽度正回顾后发断言</td></tr><tr><td align="left"><code>(?&lt;! )</code></td><td align="left">向后否定环视</td><td align="left">反向否定预查</td><td align="left">边界后置否定断言</td><td align="left">零宽度负回顾后发断言</td></tr></tbody></table><p>管他叫什么呢，反正我们只要知道它是断言，然后怎么使用就行了</p><p>这里只需要四组图就可以记住这四个断言的作用了</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709165118860.png" class title="向前肯定环视"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709165144128.png" class title="向前否定环视"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709165353187.png" class title="向后肯定环视"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709165336692.png" class title="向后否定环视"><p><code>(?=芝)</code>就是芝前面的那个地方</p><p><code>(?!芝)</code>就是除了芝前面地方的其他所有地方</p><p><code>(?=芝)</code>就是芝后面的那个地方</p><p><code>(?!芝)</code>就是除了芝后面地方的其他所有地方</p><p>虽然案例很简陋，但是只要理解了这四句话，边界断言就轻轻松松拿下</p><h4 id="匹配错误的十六进制颜色"><a href="#匹配错误的十六进制颜色" class="headerlink" title="匹配错误的十六进制颜色"></a>匹配错误的十六进制颜色</h4><p>测试数据如下</p><p>正确的16进制颜色规则</p><p>1、#开头</p><p>2、6个16进制数字或者3个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BC0D13</span></span><br><span class="line"><span class="comment">#a3e32d</span></span><br><span class="line"><span class="comment">#a656e3</span></span><br><span class="line"><span class="comment">#e00</span></span><br><span class="line"><span class="comment">#91e376</span></span><br><span class="line"><span class="comment">#as</span></span><br><span class="line">sdas<span class="comment">#</span></span><br><span class="line"><span class="comment">#14e3ce</span></span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709170751838.png" class title="匹配错误格式的颜色"><p>实现这种题目的步骤就是</p><p>先找到符合要求的16进制颜色</p><p>然后使用向前否定环视</p><p>即可找到不符合要求的16进制颜色</p><h4 id="找出所有符合条件的密码"><a href="#找出所有符合条件的密码" class="headerlink" title="找出所有符合条件的密码"></a>找出所有符合条件的密码</h4><ol><li>密码长度是8-20位</li><li>大小写字母以及数字必须都有一个。</li></ol><p>测试数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e3c3d2D3223</span><br><span class="line">86e374W2</span><br><span class="line">e3a34fDas</span><br><span class="line">213498h9</span><br><span class="line">4DIOJ239830239ur23u90asdasasd</span><br><span class="line">5fe362IKds</span><br><span class="line">2ab93F</span><br><span class="line">bf45bbaSd9</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709171629176.png" class title="匹配符合要求的密码"><h4 id="提取JavaScript中的合法变量名"><a href="#提取JavaScript中的合法变量名" class="headerlink" title="提取JavaScript中的合法变量名"></a>提取JavaScript中的合法变量名</h4><p>测试数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> 1server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,resp</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span>(url===<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;</span><br><span class="line">        resp.end();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`访问的网址的<span class="subst">$&#123;url&#125;</span>，访问方法是<span class="subst">$&#123;req.method&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">let</span> _data = fs.readFileSync(path.join(__dirname,url));</span><br><span class="line">    resp.end(data);</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="string">&#x27;80&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;服务启动成功，80端口&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709172624342.png" class title="匹配合法JavaScript变量"><h4 id="添加千分号"><a href="#添加千分号" class="headerlink" title="添加千分号"></a>添加千分号</h4><p>每三位加入一个<code>,</code>做分割</p><p>测试数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">12349978</span><br><span class="line">13241230981240941270</span><br><span class="line">4912771</span><br><span class="line">240912470</span><br><span class="line">143874131299</span><br><span class="line">329087234</span><br><span class="line">51972</span><br></pre></td></tr></table></figure><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/07/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220709174523626.png" class title="添加千分号"><h2 id="JAVA中的正则"><a href="#JAVA中的正则" class="headerlink" title="JAVA中的正则"></a>JAVA中的正则</h2><p><code>java.util.regex </code>是一个用正则表达式所定制的模式来对字符串进行匹配工作的类库包</p><p>它主要包括两个类：<code>Pattern</code> 和 <code>Matcher</code> 。</p><ul><li>Pattern： <strong>一个 Pattern 是一个正则表达式经编译后的表现模式。</strong></li><li>Matcher：<strong>一个 Matcher 对象是一个状态机器，它依据 Pattern 对象做为匹配模式对字符串展开匹配检查。</strong></li></ul><p>首先一个 <code>Pattern</code> 实例定制了一个所用语法与 <code>PERL</code> 类似的正则表达式经编译后的模式</p><p>然后一个 <code>Matcher</code> 实例在这个给定的 <code>Pattern</code> 实例的模式控制下进行字符串匹配后的后续工作，比如替换啊</p><h4 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h4><p>Pattern 的主要方法如下</p><table><thead><tr><th>方法名称</th><th>解释</th></tr></thead><tbody><tr><td>static Pattern compile(String regex)</td><td>将给定的正则表达式编译并赋予给 <code>Pattern</code> 类</td></tr><tr><td>static Pattern compile(String regex, int flags)</td><td>对指定字符串的截取，参数配置如下</td></tr><tr><td>int flags()</td><td>返回当前 <code>Pattern</code> 的匹配 <code>flag</code> 参数</td></tr><tr><td>Matcher matcher(CharSequence input)</td><td>生成一个给定命名的 <code>Matcher</code> 对象</td></tr><tr><td>static boolean matches(String regex, CharSequence input)</td><td>编译给定的正则表达式并对输入的字串以该正则表达式为模开展匹配</td></tr><tr><td>String pattern()</td><td>返回该Patter对象所编译的正则表达式</td></tr></tbody></table><p>一个正则表达式，也就是一串有特定意义的字符</p><p>可以首先要编译成为一个 <code>Pattern</code> 类的实例</p><p>这个 <code>Pattern</code> 对象可以使用 <code>matcher(String str)</code> 方法来生成一个 <code>Matcher</code> 实例</p><p>接着便可以使用该 <code>Matcher</code> 实例对目标字符串进行匹配后的后续工作</p><p>现在我们先来看一个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个 Pattern，同时编译一个正则表达式</span></span><br><span class="line">Pattern p = Pattern.compile(<span class="string">&quot;[/\\]+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用 Pattern 的 split() 方法把字符串按 &quot;/&quot; 和 &quot;\&quot;分割</span></span><br><span class="line">String[] result = p.split(</span><br><span class="line">    <span class="string">&quot;Kevin has seen《LEON》seveal times,because it is a good film.&quot;</span></span><br><span class="line">    +<span class="string">&quot;/ 凯文已经看过《这个杀手不太冷》几次了\因为它是一部&quot;</span></span><br><span class="line">    +<span class="string">&quot;好电影。/名词:凯文。&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++)&#123;</span><br><span class="line">    System.out.println(result[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码的运行结果为：</p><p>Kevin has seen《LEON》seveal times,because it is a good film.<br>凯文已经看过《这个杀手不太冷》几次了，因为它是一部好电影。<br>名词:凯文。</p></blockquote><h4 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h4><p><code>Matcher</code> 对象是一个状态机器，它<strong>依据 Pattern 对象做为匹配模式对字符串展开匹配检查</strong>。</p><blockquote><p>例：下面是一个对单词 <code>dog</code> 出现在输入字符串中出现次数进行计数的例子：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String regex = <span class="string">&quot;\\bdog\\b&quot;</span>;</span><br><span class="line">String input = <span class="string">&quot;dog dog dogtie&quot;</span>;</span><br><span class="line">Pattern p = Pattern.compile(regex);</span><br><span class="line">Matcher m = p.matcher(input); <span class="comment">// 获取 matcher 对象</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    System.out.println(<span class="string">&quot;Match number &quot;</span> + count);</span><br><span class="line">    System.out.println(<span class="string">&quot;start(): &quot;</span> + m.start());</span><br><span class="line">    System.out.println(<span class="string">&quot;end(): &quot;</span> + m.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码的执行结果为：</p><p>Match number 1     &#x2F;&#x2F; 第一次出现 （下标 0-2）<br>start(): 0            &#x2F;&#x2F; 开始下标 0<br>end(): 3            &#x2F;&#x2F; 结束下标 3<br>Match number 2     &#x2F;&#x2F; 第二次出现（下标 4-6）<br>start(): 4            &#x2F;&#x2F; 开始下标 4<br>end(): 7            &#x2F;&#x2F; 结束下标 7</p></blockquote><p><code>dogtie</code>中的dog没有被匹配是因为我们要的是单独的单词<code>dog</code>而不是在其他单词中的<code>dog</code></p><blockquote><p><code>matches</code> 和 <code>lookingAt</code> </p></blockquote><p>这两个方法都用来尝试匹配一个输入序列模式。</p><p>它们的不同是 <code>matches</code> 要求整个序列都匹配</p><p>而<code>lookingAt</code> 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String regex = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">String input = <span class="string">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class="line">String input2 = <span class="string">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class="line"></span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(input);</span><br><span class="line">Matcher matcher2 = pattern.matcher(input2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;lookingAt(): &quot;</span> + matcher.lookingAt());</span><br><span class="line">System.out.println(<span class="string">&quot;matches(): &quot;</span> + matcher.matches());</span><br><span class="line">System.out.println(<span class="string">&quot;lookingAt(): &quot;</span> + matcher2.lookingAt());</span><br></pre></td></tr></table></figure><blockquote><p>上述代码的执行结果为：</p><p>lookingAt(): true<br>matches(): false<br>lookingAt(): false</p></blockquote><blockquote><p><code>replaceFirst</code> 和 <code>replaceAll</code> </p></blockquote><p>这两个方法用来替换匹配正则表达式的文本。</p><p>不同的是，<code>replaceFirst</code> 只会替换第一次匹配</p><p><code>replaceAll</code> 替换所有匹配。</p><blockquote><p>下面的例子来解释这个功能：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String regex = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">String input1 = <span class="string">&quot;The dog says meow. All dogs say meow.&quot;</span>;</span><br><span class="line">String input2 = <span class="string">&quot;The dog says meow. All dogs say meow.&quot;</span>;</span><br><span class="line">String replace = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"></span><br><span class="line">Pattern p = Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">Matcher m1 = p.matcher(input1);</span><br><span class="line">Matcher m2 = p.matcher(input2);</span><br><span class="line"></span><br><span class="line">input1 = m1.replaceAll(replace);</span><br><span class="line">input2 = m2.replaceFirst(replace);</span><br><span class="line"></span><br><span class="line">System.out.println(input1);</span><br><span class="line">System.out.println(input2);</span><br></pre></td></tr></table></figure><blockquote><p>上述代码的执行结果为：</p><p>The cat says meow. All cats say meow.<br>The cat says meow. All dogs say meow.</p></blockquote><p>从上面的结果，我们可以发现，<code>replaceFirst</code> 方法只将第一个 <code>dog</code> 替换成了 <code>cat</code>。而 <code>replaceAll</code> 方法却将两个 <code>dog</code> 都替换成了 <code>cat</code>。</p><p>好啦，结束了</p><p>正则差不多就这些内容了</p><p>如果你发现了错误</p><p>望留言批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-基础5</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2-基础5"><a href="#Vue2-基础5" class="headerlink" title="Vue2-基础5"></a>Vue2-基础5</h2><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>在隐藏元素之前执行一段动画</p><p>在显示元素之前显示一段动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;come&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Hello，World！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Test&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.come-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">animation</span>: move <span class="number">1s</span> linear;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.come-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">animation</span>: move <span class="number">1s</span> linear reverse;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">300px</span></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !isShow&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!show&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">show</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> <span class="comment">/* 进入的起点、离开的终点 */</span></span></span><br><span class="line"><span class="css"> <span class="selector-class">.hello-enter</span>,<span class="selector-class">.hello-leave-to</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.hello-enter-active</span>,<span class="selector-class">.hello-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"> <span class="comment">/* 进入的终点、离开的起点 */</span></span></span><br><span class="line"><span class="css"> <span class="selector-class">.hello-enter-to</span>,<span class="selector-class">.hello-leave</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>发起网络请求我们有以下四种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.xhrwindow上的对象，原生</span><br><span class="line">2.jQuery内置了ajax请求，但是本身注重的是DOM节点操作</span><br><span class="line">3.axios封装了chr，十分轻量，promise风格</span><br><span class="line">4.fetchwindow上的对象，原生，包装了两层promise</span><br></pre></td></tr></table></figure><p>这里我们使用<code>axios</code>来做网络请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><blockquote><p>CORS(Cross-Origin Resource Sharing )</p></blockquote><p>前端中发出ajax请求的时候经常会出现的一种错误，叫做跨域请求</p><p>这是因为违背了同源策略</p><p>1、同协议</p><p>2、主机名</p><p>3、端口号</p><blockquote><p>解决方案</p></blockquote><p>1、后端返回数据的时候，加上一些特殊的响应头即可</p><p>2、配置代理服务器</p><p>服务器之间互相访问是不受同源策略的限制的</p><p>所以我们可以配置一个和我们自己的端口号一致的代理服务器</p><p>将请求转发给它</p><p>让它去请求其他端口上的服务器得到数据后再将其返回</p><p>我们可以使用nginx或者借助vue-cli来配置一个代理服务器</p><p>这里我们借助vue-cli</p><blockquote><p>开启代理服务器（方式一）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#x27;http:<span class="comment">//localhost:5000&#x27;</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><blockquote><p>开启代理服务器（方式二）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">proxy: &#123;</span><br><span class="line">&#x27;/hello&#x27;: &#123;</span><br><span class="line">target: &#x27;http:<span class="comment">//localhost:5000&#x27;,</span></span><br><span class="line"><span class="comment">// ws: true, //用于支持websocket</span></span><br><span class="line"><span class="comment">// changeOrigin: true //用于控制请求头中的host值</span></span><br><span class="line">&#125;,</span><br><span class="line">&#x27;/demo&#x27;: &#123;</span><br><span class="line">target: &#x27;http:<span class="comment">//localhost:5001&#x27;,</span></span><br><span class="line"><span class="comment">// ws: true, //用于支持websocket</span></span><br><span class="line"><span class="comment">// changeOrigin: true //用于控制请求头中的host值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p><h4 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h4><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>作用：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</p><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Category&gt;</span><br><span class="line">   &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">      &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">   &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">      &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">      &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>每一个Vue的大型项目都会用到路由，所以这部分十分重要</p><p>无路由，无SPA应用</p><hr><p>我们回顾一下以前写的web应用的结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- index.html</span><br><span class="line">- user.html</span><br><span class="line">- pay.html</span><br><span class="line">- category.html</span><br></pre></td></tr></table></figure><p>然后每个页面中又有链接可以实现互相跳转，这就是典型的多页面应用</p><h4 id="SPA应用"><a href="#SPA应用" class="headerlink" title="SPA应用"></a>SPA应用</h4><p>（Single page web application）：单页面应用</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703114758168.png" class title="单页面应用"><p>只要点击侧边栏的目录，功能区就会<strong>切换</strong>到特定的页面，不会刷新页面，实现局部刷新，这就是单页面应用</p><p>路由就是用来实现这个切换，路由器就是用来管理这些路由的</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>路由就是一组key-value的对应关系</p><p>多个路由，由一个路由器统一管理</p><h4 id="路由分类"><a href="#路由分类" class="headerlink" title="路由分类"></a>路由分类</h4><blockquote><p>后端路由</p></blockquote><p>key就是路径</p><p>value就是函数，函数返回对这次请求响应的数据</p><blockquote><p>前端路由</p></blockquote><p>key就是理解</p><p>value就是组件，什么样的路径，展示什么样的组件</p><h4 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h4><p>实现以下功能</p><ol><li>默认显示<code>pageA</code>组件</li><li>点击<code>pageA</code>按钮，切换<code>pageA</code>组件</li><li>点击<code>pageB</code>按钮切换<code>pageB</code>组件</li></ol><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703122000210.png" class title="案例"><p>安装Vue-router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">router</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建pageA和pageB组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是pageA的内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageA&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是pageB的内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageB&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>/router</code>文件夹并创建<code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> PageA <span class="keyword">from</span> <span class="string">&quot;@/components/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageB <span class="keyword">from</span> <span class="string">&quot;@/components/PageB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: PageA</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageA&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageA</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageB&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageB</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们先写<strong>声明式路由</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>点以下按钮切换页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 30px;display: flex;width: 120px;justify-content: space-between&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/pageA&quot;</span>&gt;</span>PageA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/pageB&quot;</span>&gt;</span>PageB<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.被切换走的组件实际上是被销毁了</span><br><span class="line"></span><br><span class="line">2.router-link经过编译后，实际上生成的是a标签，这是声明式路由的一个小弊端</span><br><span class="line">我们后面会使用编程式路由来实现跳转功能，会更加灵活</span><br><span class="line"></span><br><span class="line">3.pageA和pageB的实例上都多了两个属性<span class="variable">$route</span>和<span class="variable">$router</span></span><br><span class="line"><span class="variable">$route</span>指的是自身的路由规则和状况</span><br><span class="line"><span class="variable">$router</span>是全局的路由器</span><br><span class="line"></span><br><span class="line">4.路由组件（pageA和pageB这种需要路由规则才会显示的组件）一般放在pages文件夹下</span><br><span class="line">一般组件放在components文件夹下</span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703132208207.png" class title="效果图"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> PageA <span class="keyword">from</span> <span class="string">&quot;@/components/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageB <span class="keyword">from</span> <span class="string">&quot;@/components/PageB&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAA <span class="keyword">from</span> <span class="string">&quot;@/components/PageAA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAB <span class="keyword">from</span> <span class="string">&quot;@/components/PageAB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: PageA</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageA&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageA,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAA&quot;</span>,<span class="comment">//这里千万不要加上/</span></span><br><span class="line">                    <span class="attr">component</span>: PageAA</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAB&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>: PageAB</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageB&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageB</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>PageA.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是pageA的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里要写完整的路径，因为我们有可能会跳转到其他页面去，所以我们必须得写完整的路径--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/pageA/pageAA&quot;</span>&gt;</span>pageAA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/pageA/pageAB&quot;</span>&gt;</span>pageAB<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageA&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>在创建路由器的时候，为路由起名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> PageA <span class="keyword">from</span> <span class="string">&quot;@/components/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageB <span class="keyword">from</span> <span class="string">&quot;@/components/PageB&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAA <span class="keyword">from</span> <span class="string">&quot;@/components/PageAA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAB <span class="keyword">from</span> <span class="string">&quot;@/components/PageAB&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageContent <span class="keyword">from</span> <span class="string">&quot;@/components/PageContent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: PageA</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageA&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageA,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAA&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>: PageAA,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAB&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>: PageAB,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//起名</span></span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;detailRoute&quot;</span>,</span><br><span class="line">                            <span class="attr">path</span>: <span class="string">&quot;pageContent&quot;</span>,</span><br><span class="line">                            <span class="attr">component</span>: PageContent</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageB&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageB</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么在切换的时候，就可以使用名字来选择路由了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">  name: &#x27;detailRoute&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">  query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    pageDetail: p</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是pageAB的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in pageList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">          path: &#x27;/pageA/pageAB/pageContent&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">          query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            pageDetail: p</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">        &#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;p.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageAB&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">pageList</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">content</span>: <span class="string">&#x27;我是pageABA的内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">title</span>: <span class="string">&#x27;pageABA&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">content</span>: <span class="string">&#x27;我是pageABB的内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">title</span>: <span class="string">&#x27;pageABB&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">content</span>: <span class="string">&#x27;我是pageABC的内容&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">title</span>: <span class="string">&#x27;pageABC&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.query.pageDetail.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.query.pageDetail.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.query.pageDetail.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageContent&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;p in pageList&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &lt;router-link exact-active-class=&quot;active&quot;</span><br><span class="line">                 :to=&quot;`/pageA/pageAB/pageContent/$&#123;p.id&#125;/$&#123;p.title&#125;/$&#123;p.content&#125;`&quot;&gt;</span><br><span class="line">        &#123;&#123;p.title&#125;&#125;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--或者这样写--&gt;</span><br><span class="line">&lt;li v-for=&quot;p in pageList&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">    &lt;!--这里必须使用name参数来指定路由，不然会失效--&gt;</span><br><span class="line">    &lt;router-link :to=&quot;&#123;</span><br><span class="line">                      name: &#x27;detailRoute&#x27;,</span><br><span class="line">                      params: &#123;</span><br><span class="line">                          id: p.id,</span><br><span class="line">                          title: p.title,</span><br><span class="line">                          content: p.title</span><br><span class="line">                      &#125;</span><br><span class="line">                     &#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;p.title&#125;&#125;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> PageA <span class="keyword">from</span> <span class="string">&quot;@/components/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageB <span class="keyword">from</span> <span class="string">&quot;@/components/PageB&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAA <span class="keyword">from</span> <span class="string">&quot;@/components/PageAA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageAB <span class="keyword">from</span> <span class="string">&quot;@/components/PageAB&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageContent <span class="keyword">from</span> <span class="string">&quot;@/components/PageContent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: PageA</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageA&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageA,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAA&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>: PageAA,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&quot;pageAB&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>: PageAB,</span><br><span class="line">                    <span class="attr">children</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;detailRoute&quot;</span>,</span><br><span class="line">                            <span class="attr">path</span>: <span class="string">&quot;pageContent/:id/:title/:content&quot;</span>,</span><br><span class="line">                            <span class="attr">component</span>: PageContent,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/pageB&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:PageB</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.params.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$route.params.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageContent&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>query和params的区别</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.query的对象写法中，path可以是路径也可以是路由名</span><br><span class="line">但是params必须是路由名</span><br><span class="line"></span><br><span class="line">2.params需要在路由器的配置文件中提前声明</span><br></pre></td></tr></table></figure><h4 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h4><p>我们发现读取<code>query</code>和<code>params</code>传过来的参数的时候</p><p>需要不断使用<code>$route.query.xxx</code>或者<code>$route.params.xxx</code>，十分繁琐</p><p>如果需要简化，则需要使用<code>props</code>配置项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;pageAB&quot;</span>,</span><br><span class="line">    component: PageAB,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&quot;detailRoute&quot;</span>,</span><br><span class="line">            path: <span class="string">&quot;pageContent/:id/:title/:content&quot;</span>,</span><br><span class="line">            component: PageContent,</span><br><span class="line">            <span class="comment">//第一种写法，该对象的所有kv都会以props的形式传给该组件</span></span><br><span class="line">            <span class="comment">// props: &#123;</span></span><br><span class="line">            <span class="comment">//     a: &#x27;a&#x27;,</span></span><br><span class="line">            <span class="comment">//     b: &#x27;b&#x27;,</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给该组件。</span></span><br><span class="line">            <span class="comment">//props: true,</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//props的第三种写法，值为函数,推荐</span></span><br><span class="line">            props($route)&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    id:$route.query.id,</span><br><span class="line">                    title:$route.query.title,</span><br><span class="line">                    content:$route.query.content</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="replace属性"><a href="#replace属性" class="headerlink" title="replace属性"></a>replace属性</h4><p>使用router-link标签实现跳转，浏览器对于历史记录的存储是这样的</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703163112143.png" class title="push模式"><p>这种模式叫push模式</p><p>它将一条条记录压入栈中</p><hr><p>如果我们想实现以下这种模式</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703163419925.png" class title="replace模式"><p>这种模式叫replace模式</p><p>它将上一条记录覆盖下一条记录</p><hr><p>router-link默认是push模式</p><p>增加replace属性以使用replace模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">replace</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/pageA&quot;</span>&gt;</span>PageA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h4><p>修改以上案例</p><p>1、切换pageA、pageB的a改为button</p><p>2、以push模式切换pageA</p><p>3、以replace模式切换pageB</p><p>4、前进、后退</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703164316248.png" class title="效果图"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>点以下按钮切换页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goForward&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoPageA&quot;</span>&gt;</span>PageA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoPageB&quot;</span>&gt;</span>PageB<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link class=&quot;item&quot; replace active-class=&quot;active&quot; to=&quot;/pageA&quot;&gt;PageA&lt;/router-link&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link class=&quot;item&quot; active-class=&quot;active&quot; to=&quot;/pageB&quot;&gt;PageB&lt;/router-link&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">gotoPageA</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(<span class="string">&quot;/pageA&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">gotoPageB</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.replace(<span class="string">&quot;/pageB&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">goBack</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.back();</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">goForward</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.forward();</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编程式路由导航就是不通过router-link实现</p><p>而是手动使用router控制的路由跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 如果要传入参数，就不能使用字符串了，而是要使用对象写法</span><br><span class="line">gotoDetail(p)&#123;</span><br><span class="line">    this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">        name: <span class="string">&#x27;detailRoute&#x27;</span>,</span><br><span class="line">        params: &#123;</span><br><span class="line">            id: p.id,</span><br><span class="line">            title: p.title,</span><br><span class="line">            content: p.title</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2. 编程式路由会更加灵活，不是说router-link不好</span><br></pre></td></tr></table></figure><h4 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h4><p>现在再加一个需求在下图出加入一个input组件，然后再pageAA和pageAB之间跳转的时候，input中的数据不会丢失</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703165658585.png" class title="加入input组件"><p>之前我们说过，组件被切换走后，会被销毁</p><p>那么我们如何阻止这次的销毁呢</p><p>只要在pageA的组件中将router-view用keep-alive包裹即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是pageA的内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/pageA/pageAA&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>pageAA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/pageA/pageAB&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>pageAB<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;PageAB&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        这里也可以这样写，缓存这个路由视图中的PageAB组件</span></span><br><span class="line"><span class="comment">            &lt;keep-alive :include=&quot;[&#x27;PageAB&#x27;]&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="comment">            &lt;/keep-alive&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        这里不写inclue属性的话，这个视图中所有的组件都会被缓存</span></span><br><span class="line"><span class="comment">            &lt;keep-alive&gt;</span></span><br><span class="line"><span class="comment">            &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="comment">            &lt;/keep-alive&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;PageA&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新的生命周期钩子"><a href="#新的生命周期钩子" class="headerlink" title="新的生命周期钩子"></a>新的生命周期钩子</h4><p>在这个地方展示一个透明度一直发生改变的文字</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703170854860.png" class title="案例"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span></span><br><span class="line">  加油！！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后开启一个定时器，对opacity的值进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.opacity-=<span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.opacity&lt;=<span class="number">0</span>) <span class="built_in">this</span>.opacity=<span class="number">1</span></span><br><span class="line">  &#125;,<span class="number">16</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实就出现了问题</p><p>我们已经将其设置为了缓存路由</p><p>那么当我们切换到其他组件的时候</p><p>该定时器还在周而复始的跑，这是不对的</p><p>这时候就需要两个新的路由钩子</p><p>这是路由独有的两个钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 当切换到该组件，则该回调被调用</span></span><br><span class="line">  <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.opacity-=<span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.opacity&lt;=<span class="number">0</span>) <span class="built_in">this</span>.opacity=<span class="number">1</span></span><br><span class="line">  &#125;,<span class="number">16</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 当该组件被切换走，则调用该回调</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><h5 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用，使用next()放行</span></span><br><span class="line"><span class="comment">// to和from都是route信息</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>,next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h5><p>在路由器的路由规则中配置以下逻辑</p><p><strong>独享路由守卫没有后置的守卫</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;detailRoute&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;pageContent&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:News,</span><br><span class="line">   <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;独享前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="组件路由守卫"><a href="#组件路由守卫" class="headerlink" title="组件路由守卫"></a>组件路由守卫</h5><p>在组件中加入以下逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;beforeRouteEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;beforeRouteLeave&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个路由守卫可以配合使用哦</p><h4 id="history模式和hash模式"><a href="#history模式和hash模式" class="headerlink" title="history模式和hash模式"></a>history模式和hash模式</h4><p>我们看到地址栏中始终有#号</p><p>#后面的路径都不会发送给服务器</p><p>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</p><p>那么如何切换模式呢？</p><p>vue-router默认开启的是hash模式，如果想要切换模式，只需要在创建路由器的时候，传入一个配置项<code>mode: &#39;history&#39;</code></p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703183849938.png" class title="history模式"><p>这时候你会发现地址栏的#都不见了</p><p>讲到这里，有的小伙伴肯定要说了，那我肯定要使用history模式，这样的路径看着才舒服</p><p>history模式下，路径确实舒服，但是hash模式的兼容性比较好，history涉及到一个项目上线的问题</p><p>我们使用<code>npm run build</code>打包</p><p>然后你就发现了出现了一个特殊的文件夹</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703184315610.png" class title="dist文件夹"><h5 id="history模式部署上线"><a href="#history模式部署上线" class="headerlink" title="history模式部署上线"></a>history模式部署上线</h5><p>我们使用express搭建一个微型的服务器来部署我们的前端项目</p><p>1、新建文件夹</p><p><code>mkdir server</code></p><p>2、初始化项目</p><p><code>npm init</code></p><p>3、安装express</p><p><code>npm i express</code></p><p>4、创建static文件夹将dist目录下的所有文件放到其中</p><p>5、创建<code>server.js</code>并编写服务器端代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname+<span class="string">&#x27;/static&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>6、启动服务器</p><p><code>node server.js</code></p><p>7、访问<code>localhost:5005</code>并点击</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703185204295.png" class title="image-20220703185204295"><h5 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h5><p>这时候这个大问题就出现了，我们刷新页面</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703185253092.png" class width="404"><p>我们发现了404错误，这是为什么呢？因为服务器并没有该资源</p><h5 id="hash模式部署上线"><a href="#hash模式部署上线" class="headerlink" title="hash模式部署上线"></a>hash模式部署上线</h5><p>那我们使用hash模式再次build，访问尝试</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/07/01/Vue2-%E5%9F%BA%E7%A1%805/image-20220703185441610.png" class title="hash模式再次部署"><p>再次刷新，发现并没有出现404</p><h5 id="解决history模式的问题"><a href="#解决history模式的问题" class="headerlink" title="解决history模式的问题"></a>解决history模式的问题</h5><p>我们再次回到history模式，来解决该问题</p><p>这个问题需要后端来配合</p><p>我们这里使用nodejs做后端，所以我们使用nodejs的技术来解决问题</p><p>安装一个库<code>npm install --save connect-history-api-fallback </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(history())</span><br><span class="line">app.use(express.static(__dirname+<span class="string">&#x27;/static&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h3><p>我们真正开发项目的时候，我们不会所有的页面结构都是自己写，我们会使用第三方的组件库，接下来我来介绍几个比较常用的组件库</p><ul><li>移动端<ul><li>Vant<a href="https://2x.antdv.com/components/overview-cn">https://2x.antdv.com/components/overview-cn</a></li><li>CubeUI   <a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a></li><li>MintUI    <a href="http://mint-ui.github.io/#!/zh-cn">http://mint-ui.github.io/#!/zh-cn</a></li><li>nutUI      <a href="https://nutui.jd.com/#/zh-CN/component/button">https://nutui.jd.com/#/zh-CN/component/button</a>               京东打造</li></ul></li><li>PC端<ul><li>Ant Design <a href="https://2x.antdv.com/components/overview-cn">https://2x.antdv.com/components/overview-cn</a>               蚂蚁金服打造</li><li>ElementUI <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a>                                      饿了么打造</li></ul></li></ul><p>如果想使用这些组件库，我们只需要去这些官网查看官方文档即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-基础4</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2基础4"><a href="#Vue2基础4" class="headerlink" title="Vue2基础4"></a>Vue2基础4</h2><h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><p>通过<code>vue inspect &gt; output.js</code>可以查看Vue脚手架的默认配置</p><p>创建<code>vue.config.js</code></p><p>可选配置项可以去<a href="https://cli.vuejs.org/zh/config/">官网</a>查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: &#123;</span><br><span class="line">            <span class="comment">// page 的入口</span></span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDOM&quot;</span>&gt;</span>点我输出按钮的DOM元素和School的Vc对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>:&#123;School&#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">showDOM</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.btn) <span class="comment">//真实DOM元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.sch) <span class="comment">//School组件的实例对象（vc）</span></span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被用来给元素或子组件注册引用信息（id的替代者）</p><p>应用在html标签上获取的是真实DOM元素</p><p>应用在组件标签上是组件实例对象（vc）</p><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><p>父组件想给子组件传数据，即可通过props配置项来实现</p><blockquote><p>Student.vue</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//简单声明接收</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>] </span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用该组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">name</span>=<span class="string">&#x27;zs&#x27;</span> <span class="attr">age</span>=<span class="string">18</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们来观察一下props接收到的数据放在了哪里</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220628170638171.png" class title="观察vc"><p>可以看到，使用props接收到的数据都被放在了vc对象上</p><p>我们还发现<code>_data</code>中并没有这些数据</p><blockquote><p>props接收的数据不可修改</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateAge&quot;</span>&gt;</span>尝试修改收到的年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"><span class="function"><span class="title">updateAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.age++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220628170902398.png" class title="修改props接收到的数据"><p>如果一定想修改，则需要使用data配置一下数据做个中转</p><p>并且展示的时候也使用data中中转的那个变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;myAge&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">myAge</span>: <span class="built_in">this</span>.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>接收的同时对数据进行类型限制</p></blockquote><p>如果要对类型做限制，需要通过以下写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">Number</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="built_in">String</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>传入数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;芝麻&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果是这样传入的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;芝麻&quot;</span> <span class="attr">age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220628171804173.png" class title="报错"><hr><blockquote><p>接收的同时对数据：进行类型限制+默认值的指定+必要性的限制</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>, <span class="comment">//name的类型是字符串</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要的，父亲组件一定要传该数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">age</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">Number</span>,</span><br><span class="line"><span class="attr">default</span>:<span class="number">99</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">sex</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h3><p>就是子组件可以共享mixin中配置的配置项</p><p>达到全局共享的效果，达到复用的目的，减少代码重复性</p><p>混合文件就是我们在构造vc的时候传入的配置项</p><p>只不过单独将其拿了出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hooks = &#123;</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据代理、数据劫持已完成&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;挂载完成！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局混入（全局配置）：<code>Vue.mixin(xxx)</code></p><p>局部混入（配置项）：<code>mixin: [&#39;aaa&#39;]</code></p><p>注意点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、钩子以外的配置项</span><br><span class="line">    如果混合中有，则以配置项中优先级高</span><br><span class="line">    如果混合中没有，则整合进配置项中</span><br><span class="line">2、将两者的生命周期组合在一起</span><br><span class="line">    先执行自己的钩子，然后执行mixin中的钩子</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>我们在平时生活工作中，一款好用的插件可以极大地提高我们的生产效率，在Vue中也有这样的插件</p><p>我们来定义一个插件试一试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//...代表使用插件的时候传入的参数</span></span><br><span class="line">   <span class="function"><span class="title">install</span>(<span class="params">Vue,...</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//全局过滤器</span></span><br><span class="line">      Vue.filter(<span class="string">&#x27;filterName&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> ...</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义全局指令</span></span><br><span class="line">      Vue.directive(<span class="string">&#x27;directiveName&#x27;</span>,&#123;</span><br><span class="line">         <span class="comment">//指令与元素成功绑定时</span></span><br><span class="line">         <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">         <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">         <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义混入</span></span><br><span class="line">      Vue.mixin(&#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line">      Vue.prototype.hello = <span class="function">()=&gt;</span>&#123;alert(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main.js中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(plugins)</span><br></pre></td></tr></table></figure><h3 id="style标签"><a href="#style标签" class="headerlink" title="style标签"></a>style标签</h3><h4 id="scoped属性"><a href="#scoped属性" class="headerlink" title="scoped属性"></a>scoped属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">在这个里面写的css样式只会作用于该文件的结构</span><br><span class="line">    如果不加scoped则会作用于所有符合条件的html结构</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a>lang属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">    如果你想使用Less或者Scss来写css则需要下载编译工具</span><br><span class="line">    npm i less-loader</span><br><span class="line">    npm i scss-loader</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Todos案例"><a href="#Todos案例" class="headerlink" title="Todos案例"></a>Todos案例</h3><blockquote><p>提前声明：此案例会循序渐进地讲到<strong>很多</strong>知识点，请务必不要跳过</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220629112045224.png" class title="Todos"><h4 id="静态页面代码"><a href="#静态页面代码" class="headerlink" title="静态页面代码"></a>静态页面代码</h4><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;task&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入待办事项，回车确认添加&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;task&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todos&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteSelf(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;update&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateSelf(todo.id)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteSelf(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;update&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateSelf(todo.id)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteSelf(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;update&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateSelf(todo.id)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 10px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>已经完成0/全部3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.todos</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.task</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-sizing</span>: border-box</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">40px</span> auto</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="number">#4dd9d5</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.delete</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.update</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="number">#2e6da4</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态数据"><a href="#动态数据" class="headerlink" title="动态数据"></a>动态数据</h4><p>现在将数据放到data中，再补充一点逻辑吧</p><blockquote><p>接下来就不写style标签啦</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;task&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入待办事项，回车确认添加&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;task&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;insertNewTask&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todos&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteSelf(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;update&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateSelf(todo.id)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 10px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>已经完成&#123;&#123;hasDone&#125;&#125;/全部&#123;&#123;totalSum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">task</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">todos</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,<span class="attr">content</span>: <span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,<span class="attr">content</span>: <span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,<span class="attr">content</span>: <span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,<span class="attr">content</span>: <span class="string">&#x27;刷抖音&#x27;</span>,<span class="attr">done</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">      <span class="attr">hasDone</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.hasDone = <span class="built_in">this</span>.todos.filter(<span class="function"><span class="params">t</span>=&gt;</span>t.done).length;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">deleteSelf</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updateSelf</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">insertNewTask</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">totalSum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.todos.length;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="抽离组件"><a href="#抽离组件" class="headerlink" title="抽离组件"></a>抽离组件</h4><p>App作为王者居然写了这么多结构代码，哪里有什么组件化的思想，所以我们抽离出一个个组件</p><p>Top.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span>Todos<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;task&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入待办事项，回车确认添加&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;task&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;insertNewTask&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Top&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">task</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">insertNewTask</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.task</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-sizing</span>: border-box</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ShowTodosContainer.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todos&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;choose(todo.id)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.done&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteSelf(todo.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;update&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateSelf(todo.id)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;ShowTodosContainer&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&#x27;todos&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">todos</span>: <span class="built_in">this</span>.todos</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">deleteSelf</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updateSelf</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">choose</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.todos.forEach(<span class="function"><span class="params">t</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(t.id===id)&#123;</span></span><br><span class="line"><span class="javascript">          t.done=!t.done;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.todos</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.todo</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="number">#4dd9d5</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.delete</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.update</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="number">#2e6da4</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里补充一个知识点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对于&lt;input <span class="built_in">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line"></span><br><span class="line">2.配置input的value属性:</span><br><span class="line">      (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line">      (2)v-model的初始值是数组，那么收集的的就是value组成的数组</span><br></pre></td></tr></table></figure><p>PageFooter.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 10px&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;allHasDone&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>已经完成&#123;&#123;hasDone&#125;&#125;/全部&#123;&#123;totalSum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;deleteAll&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteAllTodos&quot;</span>&gt;</span></span><br><span class="line">      删除所有代办</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;PageFooter&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&#x27;todos&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">allHasDone</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">totalSum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.todos.length;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">hasDone</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> length = <span class="built_in">this</span>.todos.filter(<span class="function"><span class="params">t</span>=&gt;</span>t.done).length;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.allHasDone = length === <span class="built_in">this</span>.todos.length;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> length;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">deleteAllTodos</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.deleteAll</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>:pointer;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#4dd9d5</span></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实现所有功能"><a href="#实现所有功能" class="headerlink" title="实现所有功能"></a>实现所有功能</h4><h5 id="插入新代办"><a href="#插入新代办" class="headerlink" title="插入新代办"></a>插入新代办</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">insertNewTask</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span>.task === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> alert(<span class="string">&#x27;请不要输入空的代办！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.todos.push(&#123;</span><br><span class="line">    <span class="attr">id</span>:nanoid(),</span><br><span class="line">    <span class="attr">content</span>: <span class="built_in">this</span>.task,</span><br><span class="line">    <span class="attr">hasDone</span>: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.task=<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除单个代办"><a href="#删除单个代办" class="headerlink" title="删除单个代办"></a>删除单个代办</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deleteSelf</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.todoList.splice(<span class="number">0</span>,<span class="built_in">this</span>.todoList.length,...this.todoList.filter(<span class="function"><span class="params">t</span>=&gt;</span>t.id!==id));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="删除所有代办"><a href="#删除所有代办" class="headerlink" title="删除所有代办"></a>删除所有代办</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deleteAllTodos</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.todoList.splice(<span class="number">0</span>,<span class="built_in">this</span>.totalSum,...this.todoList.filter(<span class="function"><span class="params">t</span>=&gt;</span>!t.done))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="勾选"><a href="#勾选" class="headerlink" title="勾选"></a>勾选</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 10px&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;allHasDone&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;chooseAll&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">chooseAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.todoList.forEach(<span class="function"><span class="params">t</span>=&gt;</span>t.done=!<span class="built_in">this</span>.allHasDone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：先处理点击事件，然后数据才更新，所以要取反</p><h5 id="更新代办"><a href="#更新代办" class="headerlink" title="更新代办"></a>更新代办</h5><p>这个有点麻烦，需要再添加一个组件，使用动态样式来控制其显示</p><p>UpdateDialog.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span><span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;clear&#x27;:showDialog&#125;&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>请修改代办<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;close&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;updatedTaskContent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 20px&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateTask&quot;</span>&gt;</span></span><br><span class="line">        修改</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        取消</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;UpdateDialog&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&#x27;task&#x27;</span>,<span class="string">&#x27;showDialog&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">updatedTaskContent</span>: <span class="built_in">this</span>.task.content,</span></span><br><span class="line"><span class="javascript">      <span class="attr">propTask</span>: <span class="built_in">this</span>.task</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">close</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;closeDialog&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updateTask</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.propTask.content=<span class="built_in">this</span>.updatedTaskContent</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.dialog</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.form</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: beige;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.close</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.clear</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用的自定义事件</p><p>我在使用该组件的时候传入一个函数，然后组件内部就可以使用<code>this.$emit(&#39;自定义事件名&#39;)</code>来调用该事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UpdateDialog</span> <span class="attr">:showDialog</span>=<span class="string">&quot;showUpdateDialog&quot;</span> <span class="attr">:task</span>=<span class="string">&quot;choosedTask&quot;</span> @<span class="attr">closeDialog</span>=<span class="string">&quot;closeDialog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个如果这样写会产生一个问题，就是我的task确实是动态传的，但是因为我可能会取消本次更新操作</p><p>所以我不可以这样写，这样写的话，取消按钮就是一个小丑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;task.content&quot;&gt;</span><br></pre></td></tr></table></figure><p>所以就必须得先存一份传入的值是吧，所以就应该像我刚刚那么写</p><p>但是你会发现还是有问题，检查之后发现是我存储的数据是固定在第一次传入的数据，可是我什么时候改变data中的数据呢？</p><h6 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h6><p>我们监视一下task，当其发生了改变，将其覆盖data中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="function"><span class="title">task</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.updatedTaskContent=<span class="built_in">this</span>.task.content;</span><br><span class="line">    <span class="built_in">this</span>.propTask = <span class="built_in">this</span>.task;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用v-if配合使用"><a href="#使用v-if配合使用" class="headerlink" title="使用v-if配合使用"></a>使用v-if配合使用</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UpdateDialog</span> <span class="attr">v-if</span>=<span class="string">&quot;JSON.stringify(choosedTask)!==&#x27;&#123;&#125;&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:showDialog</span>=<span class="string">&quot;showUpdateDialog&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:task</span>=<span class="string">&quot;choosedTask&quot;</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">closeDialog</span>=<span class="string">&quot;closeDialog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用这种方法的话，我在closeDialog中需要将choosedTask赋值为空对象</p><h6 id="自动获取焦点"><a href="#自动获取焦点" class="headerlink" title="自动获取焦点"></a>自动获取焦点</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;updatedTaskContent&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;updateTask&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是监视属性实现的话</p><p>需要在监视方法中加入以下逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">task</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.updatedTaskContent=<span class="built_in">this</span>.task.content;</span><br><span class="line">    <span class="built_in">this</span>.propTask = <span class="built_in">this</span>.task;</span><br><span class="line">    <span class="comment">//当页面解析完成之后再执行回调函数</span></span><br><span class="line">    <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$refs.input.focus();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是v-if实现的话</p><p>需要再挂载的时候加入以下逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.$refs.input.focus();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p>在App中封装一个save函数，将其传递给子组件，在所有对数组造成更新的地方都使用<code>this.$emit(&#39;save&#39;)</code>调用该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">save</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">&quot;todos&quot;</span>,<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.todos))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p> 这个是相对于js中内置事件（keyup、click等等）的存在</p><p>js内置事件是给HTML元素使用的</p><p>自定义事件是给组件用的</p><p>主要作用就是实现<strong>父子组件之间的通信</strong></p><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生姓名是:&#123;&#123;studentName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Teacher</span> <span class="attr">:getSchoolName</span>=<span class="string">&quot;getSchoolName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">getStudentName</span>=<span class="string">&quot;getStudentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/Student&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;School,Student&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">studentName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">getTeacherName</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;App收到了学校名：&#x27;</span>,name)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">getStudentName</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;App收到了学生名：&#x27;</span>,name)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.studentName = name</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.app</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>绑定事件的另一种方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.student.$on(<span class="string">&#x27;getStudentName&#x27;</span>,<span class="built_in">this</span>.getStudentName) <span class="comment">//绑定自定义事件    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p>School.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendSchoolName&quot;</span>&gt;</span>把学校名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>:[<span class="string">&#x27;getSchoolName&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">sendSchoolName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.getSchoolName(<span class="built_in">this</span>.name)</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.school</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentlName&quot;</span>&gt;</span>把学生名给App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="title">sendStudentlName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//触发Student组件实例身上的getStudentName事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;getStudentName&#x27;</span>,<span class="built_in">this</span>.name)</span></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.student</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义事件的触发本质还是由html的原生事件触发后，我们自己决定触发哪一个自定义事件的</p><blockquote><p>props实现和自定义事件实现的区别：props需要手动接收</p></blockquote><h4 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$off(<span class="string">&#x27;getStudentName&#x27;</span>) <span class="comment">//解绑一个自定义事件</span></span><br></pre></td></tr></table></figure><h4 id="组件使用js原生事件"><a href="#组件使用js原生事件" class="headerlink" title="组件使用js原生事件"></a>组件使用js原生事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Student ref=&quot;student&quot; @click.native=&quot;show&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p>我们发现，组件之间的通信十分地重要，我们来理一理到现在我们学会了那些组件之间通信的方法，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.props===》适用于父给子传递数据和函数===》特点：需要手动接收，并且传递地如果是数据则不能修改</span><br><span class="line"></span><br><span class="line">2.自定义事件===》适用于子给父传递数据===》特点：使用<span class="variable">$emit</span>调用</span><br></pre></td></tr></table></figure><p>我们发现如果两个兄弟之间想要通信</p><p>则只能将数据状态提升</p><p>将数据放到两者共同地父组件上面去</p><p>然后父组件使用上述方法向两者传递信息</p><p>如果嵌套层级比较多，则需要多次多层传递数据，会比较麻烦</p><p>难道就只能这样了吗？NO！接下来我会讲解三种强大的方法实现任意组件之间的通信</p><h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><p>全局事件总线其实十分简单，就是使用自定义事件来实现的</p><p>只不过我们事件全部绑定在vm对象上</p><h5 id="安装全局事件总线"><a href="#安装全局事件总线" class="headerlink" title="安装全局事件总线"></a>安装全局事件总线</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">   <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不是一定要叫<code>$bus</code></p></blockquote><h5 id="绑定事件-1"><a href="#绑定事件-1" class="headerlink" title="绑定事件"></a>绑定事件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="触发事件-1"><a href="#触发事件-1" class="headerlink" title="触发事件"></a>触发事件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="built_in">this</span>.name)</span><br></pre></td></tr></table></figure><h5 id="解绑事件-1"><a href="#解绑事件-1" class="headerlink" title="解绑事件"></a>解绑事件</h5><p>在<code>beforeDestroy</code>钩子中，用$off去解绑当前组件所用到的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>1、自定义事件</p><p>2、<code>VueComponent.prototype.__proto__ === Vue.prototype</code></p><h4 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h4><p>消息发布与订阅是一种思想，具体实现有很多种，我们这里选用<code>pubsub-js</code>库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure><h5 id="订阅和取消订阅消息"><a href="#订阅和取消订阅消息" class="headerlink" title="订阅和取消订阅消息"></a>订阅和取消订阅消息</h5><p>即设置事件和回调</p><p>即需要数据的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pubId = pubsub.subscribe(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">msgName,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">        <span class="comment">// console.log(&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;,msgName,data)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   pubsub.unsubscribe(<span class="built_in">this</span>.pubId)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h5><p>即发送数据的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pubsub.publish(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span><br></pre></td></tr></table></figure><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><p>它是专门在Vue中实现<strong>集中式状态管理</strong>的一个插件，对Vue应用中多个组件的共享状态进行集中式的管理，也是一种任意组件间通信的方式</p><p>状态其实指的就是数据</p><p>x是所有组件都需要使用的，所以我们将x存入Vuex中</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220701080122741.png" class title="Vuex"><h5 id="Vuex原理图"><a href="#Vuex原理图" class="headerlink" title="Vuex原理图"></a>Vuex原理图</h5><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220701082140195.png" class title="Vuex原理图"><blockquote><p>此图摘自官网</p></blockquote><p>我们可以看到该图被虚线包起来的部分即Vuex的三大重要的工具，<code>Actions</code>，<code>Mutations</code>，<code>State</code></p><p>State译为状态，我们将需要共享的数据放入其中</p><p>Actions译为行为，我们会将对于数据的前置操作放入其中，比如条件判断，发出Ajax请求等</p><p>Mutations译为加工，我们真正对于数据的修改就是在这里进行的</p><p>Vue组件和Vuex工具之间的通信，有以下API，<code>dispatch</code>，<code>commit</code>，<code>mutate</code>，<code>render</code></p><p>只有<code>dispatch</code>和<code>commit</code>是我们手动调用的，其他两个都是由Vuex帮我们调用的，无需我们操心</p><p><code>dispatch</code>是我们在组件内调用的，发出对数据操作的请求</p><p><code>commit</code>是我们在<code>actions</code>或者Vue组件中调用的，让其对数据做出真正的改变</p><p>接下来我们直接使用案例来驱动</p><h5 id="求和案例"><a href="#求和案例" class="headerlink" title="求和案例"></a>求和案例</h5><p>效果图</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220701081158755.png" class title="求和案例"><p>我们先将这个功能实现</p><p>因为还没有到组件共享的时候，所以现在先不使用Vuex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;step&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stepSelect&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;step&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addOnCondition&quot;</span>&gt;</span>当前为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addAfter&quot;</span>&gt;</span>过一秒再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Count&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">sum</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">step</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.sum+=<span class="built_in">this</span>.step;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.sum-=<span class="built_in">this</span>.step;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addOnCondition</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(<span class="built_in">this</span>.sum % <span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.add();</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addAfter</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.add();</span></span><br><span class="line"><span class="javascript">      &#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>接下来我们做些使用Vuex前的准备</p><p>创建<code>store/index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中引入该文件并并在创建vm的时候传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>接下来我们新建一个组件ShowSum组件，该组件的功能就是用来展示Count组件中的sum，现在我们就使用Vuex来实现此功能</p><p>先将数据都交给Vuex管理</p><p>Count.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;step&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stepSelect&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;step&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addOnCondition&quot;</span>&gt;</span>当前为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addAfter&quot;</span>&gt;</span>过一秒再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;Count&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">step</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;add&#x27;</span>,<span class="built_in">this</span>.step);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;sub&#x27;</span>,<span class="built_in">this</span>.step)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addOnCondition</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;addOnCondition&#x27;</span>,<span class="built_in">this</span>.step)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addAfter</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;addAfter&#x27;</span>,<span class="built_in">this</span>.step)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;INCREASE&#x27;</span>,value);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">sub</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;DECREASE&#x27;</span>,value)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">addOnCondition</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value%<span class="number">2</span>!==<span class="number">0</span>)&#123;</span><br><span class="line">                context.commit(<span class="string">&#x27;INCREASE&#x27;</span>,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">addAfter</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                context.commit(<span class="string">&#x27;INCREASE&#x27;</span>,value)</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">INCREASE</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">            state.sum+=value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">DECREASE</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">            state.sum-=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ShowSum.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">  Count组件的sum值是：&#123;&#123;$store.state.sum&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;ShowSum&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们想要拿到state中的数据的时候，需要使用<code>$store.state.xxx</code>，十分麻烦，所以Vuex就为我们提供了工具<code>mapState</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">  Count组件的sum值是：&#123;&#123;sum&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;ShowSum&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">    ...mapState([<span class="string">&#x27;sum&#x27;</span>])</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>1、<code>getters</code>的使用</p><p>getters我们可以理解为计算属性，就是将state中的数据加工后返回给用户</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.sum*<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、<code>mapGetters</code>，<code>mapActions</code>，<code>mapMutations</code>工具</p><p>我们对于<code>state</code>中的数据可以使用<code>mapState</code>来将其方便地从Vuex中拿出来</p><p>对于<code>getters</code>、<code>actions</code>、<code>mutations</code>中的方法和数据我们也有对应的工具将其从Vuex中拿出</p><p>3、模块化开发</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220701101329545.png" class title="模块化开发"><p>如果数据还有分类，我们就可以使用模块化开发</p><p><code>store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> teacher <span class="keyword">from</span> <span class="string">&quot;@/store/roles/teacher&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> student <span class="keyword">from</span> <span class="string">&quot;@/store/roles/student&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enterprise <span class="keyword">from</span> <span class="string">&quot;@/store/roles/enterprise&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">&#x27;@/store/log&#x27;</span></span><br><span class="line"><span class="keyword">import</span> constant <span class="keyword">from</span> <span class="string">&quot;@/store/constant&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> common <span class="keyword">from</span> <span class="string">&quot;@/store/common&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">   <span class="attr">modules</span>: &#123;</span><br><span class="line">      log,</span><br><span class="line">      constant,</span><br><span class="line">      common,</span><br><span class="line">      teacher,</span><br><span class="line">      student,</span><br><span class="line">      enterprise</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>使用模块化开发要注意一个点，就是在各个文件中需要开启命名空间</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/28/Vue2-%E5%9F%BA%E7%A1%804/image-20220701101526138.png" class title="开启命名空间"><p>采用模块化开发使用后，<code>mapXXX</code>工具的使用方法就发生了改变，改变如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...mapState(<span class="string">&#x27;模块名&#x27;</span>,[<span class="string">&#x27;state参数名&#x27;</span>]),</span><br><span class="line">...mapGetters(<span class="string">&#x27;模块名&#x27;</span>,[<span class="string">&#x27;getters参数名&#x27;</span>]),</span><br><span class="line">...mapActions(<span class="string">&#x27;模块名&#x27;</span>,[<span class="string">&#x27;actions函数名&#x27;</span>]),</span><br><span class="line">...mapMutations(<span class="string">&#x27;模块名&#x27;</span>,[<span class="string">&#x27;mutations函数名&#x27;</span>]),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-基础3</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2基础3"><a href="#Vue2基础3" class="headerlink" title="Vue2基础3"></a>Vue2基础3</h2><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>案例：如图</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622155952374.png" class title="案例"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622160006306.png" class title="案例"><h4 id="使用v-if"><a href="#使用v-if" class="headerlink" title="使用v-if"></a>使用v-if</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>现在的n值是&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n--&quot;</span>&gt;</span>点我n自减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n&lt;3&quot;</span>&gt;</span>我在n小于3的时候出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n&lt;7&quot;</span>&gt;</span>我在n大于3小于7的时候出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>我在n&gt;7的时候显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">n</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用v-show"><a href="#使用v-show" class="headerlink" title="使用v-show"></a>使用v-show</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>现在的n值是&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n--&quot;</span>&gt;</span>点我n自减1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;n&lt;3&quot;</span>&gt;</span>我在n小于3的时候出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;n&gt;=3&quot;</span>&gt;</span>我在n大于3的时候出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">n</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.v-show的原理是将被此指令标记的DOM元素的display属性设置为none，从而实现隐藏的效果</span><br><span class="line">v-if的原理是直接将此DOM元素直接从DOM树中删除</span><br><span class="line">2.如果这个元素会频繁切换显示隐藏，则使用v-show，不需要频繁创建节点</span><br><span class="line">如果这个元素不会频繁切换显示隐藏，只是在初始化的时候进行判断显示隐藏，则使用v-if</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><blockquote><p>案例：将数组数据展示在页面上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">people</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;芝麻&#x27;</span>,<span class="attr">age</span>: <span class="number">20</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>: <span class="number">17</span>,<span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用v-for指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in people&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;-&#123;&#123;item.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就完成了最基本的遍历，如果我需要得到每一次遍历的索引，只需要加入一个形参即可</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in people&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;-&#123;&#123;item.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>OK，这里其实遗漏了一个很重要很重要的一个属性<code>key</code>，这个<code>key</code>就是每一个节点的标识，所以可以直接使用数组每一个对象的<code>id</code>属性，或者是<code>index</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;li v-for=&quot;(item,index) in people&quot; :key=&quot;index&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in people&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;-&#123;&#123;item.sex&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个key是干嘛的呢？这就要好好扒一扒了，来吧，整活！</p><h4 id="虚拟DOM的DIFF算法"><a href="#虚拟DOM的DIFF算法" class="headerlink" title="虚拟DOM的DIFF算法"></a>虚拟DOM的DIFF算法</h4><p>啥啊这是，怎么从key直接跳到了什么虚拟DOM的DIFF算法了？走错片场了？</p><p>没有没有，要解释key就要先知道这个知识</p><p>现在的代码，很简单，就是比刚刚多了一个添加一个人的按钮和一个input框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;addPerson&quot;</span>&gt;</span>添加一个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in people&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;-&#123;&#123;item.sex&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">people</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;芝麻&#x27;</span>,<span class="attr">age</span>: <span class="number">20</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>: <span class="number">17</span>,<span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">addPerson</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.people.unshift(&#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;小马&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明问题</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622165732907.png" class title="添加一个人之前先把信息复制到输入框"><p>然后点击添加一个人，你会发现一个很严重的错误，输入塌陷</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622165812965.png" class title="出现错误"><p>加入<code>:key=&quot;index&quot;</code>之后，一样出现这个错误</p><p>加入<code>:key=&quot;item.id&quot;</code>之后，我们发现，这个错误就消失了</p><p>既然意识到了错误和解决错误的方法，那我们就来好好捋一下为什么，下面看图，图有点乱，请仔细观看</p><h5 id="key为index的情况"><a href="#key为index的情况" class="headerlink" title="key为index的情况"></a>key为index的情况</h5><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622175851804.png" class title="key为index"><p>解释几个点吧：</p><p>1、粉色的×表示匹配失败，不可以复用，蓝色的√表示匹配成功，可以复用</p><p>2、左下角的橙色的删除号表示该元素直接删除</p><p>3、下半部分的橙色箭头表示直接复用之前生成的真实DOM节点</p><p>4、左半部分的绿色箭头表示需要从虚拟节点重新生成真实DOM节点</p><h5 id="key为id的情况"><a href="#key为id的情况" class="headerlink" title="key为id的情况"></a>key为id的情况</h5><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220622175136447.png" class title="key为id"><h5 id="key不写的情况"><a href="#key不写的情况" class="headerlink" title="key不写的情况"></a>key不写的情况</h5><p>如果不写key的话，Vue默认将index作为key，所以这种情况和key为index的情况是一样的</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、key的作用</span><br><span class="line">作为每一个DOM虚拟节点的唯一性标识，当数据发生改变的时</span><br><span class="line">在Diff算法时，新虚拟DOM节点找到与自身key相同的旧虚拟DOM节点进行比较</span><br><span class="line">如果相同，则直接将旧虚拟DOM节点生成的真实DOM节点直接拿来复用</span><br><span class="line">如果不同，则将新虚拟DOM节点生成新真实DOM节点</span><br><span class="line"></span><br><span class="line">2、用index做key会出现的问题</span><br><span class="line">(1)如果出现了对顺序改变的操作，则会导致旧真实DOM无法复用，效率降低</span><br><span class="line">(2)如果有输入类控件，则会出现输入塌陷的问题</span><br><span class="line"></span><br><span class="line">3、如何设置key</span><br><span class="line">(1)如果只是展示，不会产生逆序插入，逆序删除等会影响顺序的情况，则使用index即可</span><br><span class="line">(2)如果会对顺序造成影响，则不能使用index作为key，而是需要使用唯一性标识</span><br></pre></td></tr></table></figure><h4 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h4><blockquote><p>需求：输入姓关键词，回车出现名字中带有该关键词的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓关键词&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;filterData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in people&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.name&#125;&#125;-&#123;&#123;item.age&#125;&#125;-&#123;&#123;item.sex&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">people</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;芝麻&#x27;</span>,<span class="attr">age</span>: <span class="number">20</span>,<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>: <span class="number">17</span>,<span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                ],</span></span><br><span class="line"><span class="javascript">                <span class="attr">showData</span>: people</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filterData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.showData = <span class="built_in">this</span>.people.filter(<span class="function"><span class="params">p</span>=&gt;</span>p.name.indexOf(<span class="built_in">this</span>.keyword)!==-<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortByAge&quot;</span>&gt;</span>按年龄排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    sortByAge()&#123;</span><br><span class="line">    this.showData = this.people.sort((p1,p2)=&gt;p2.age-p1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改列表第一个人的信息-奏效"><a href="#修改列表第一个人的信息-奏效" class="headerlink" title="修改列表第一个人的信息(奏效)"></a>修改列表第一个人的信息(奏效)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updatePerson&quot;</span>&gt;</span>修改第一个人的年龄为20<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    updatePerson()&#123;</span><br><span class="line">    this.people[0].age = 20;</span><br><span class="line">this.showData = this.people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="彻底修改列表一个人的信息-失效"><a href="#彻底修改列表一个人的信息-失效" class="headerlink" title="彻底修改列表一个人的信息(失效)"></a>彻底修改列表一个人的信息(失效)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updatePersonComplete&quot;</span>&gt;</span>彻底修改一个人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">updatePersonComplete()&#123;</span><br><span class="line">    this.people[0] = &#123;id: &#x27;004&#x27;,name: &#x27;老马&#x27;,age: 18,sex: &#x27;女&#x27;&#125;;</span><br><span class="line">this.showData = this.people;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这种方式修改数据，Vue没有检测到呢？</p><p>这就要讲到Vue监测数据变化(响应式)的原理了</p><h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><p>之前我在讲数据代理的时候，其实已经讲到了Vue响应式的原理，现在我们来正式给小伙伴讲一讲</p><p>Vue监测数据分为两种，一种是数组，还有一种是对象。我们先从监测对象开始，然后再讲监测数组。</p><h4 id="监测对象"><a href="#监测对象" class="headerlink" title="监测对象"></a>监测对象</h4><p>前期准备</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>学校：&#123;&#123;school&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&#x27;zhima&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">hobbies</span>: [<span class="string">&#x27;王者&#x27;</span>,<span class="string">&#x27;原神&#x27;</span>,<span class="string">&#x27;睡觉&#x27;</span>,<span class="string">&#x27;干饭&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;南京某高校&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">address</span>: <span class="string">&#x27;南京&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们先来回顾一下数据代理是什么</p><p>先输出一下<code>vm</code>对象</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220623131348023.png" class title="vm对象"><p>我们在<code>data</code>中配置的对象先经过<code>Vue</code>加工变成<code>Observer</code>对象</p><p>然后将其放到<code>vm</code>对象上的<code>_data</code>属性中</p><p>然后将<code>_data</code>中的数据全部代理到<code>vm</code>对象上</p><p>让我们可以直接使用<code>&#123;&#123;&#125;&#125;</code>读取<code>vm</code>身上的属性</p><p>这就是<strong>数据代理</strong></p><p>我们修改了<code>vm</code>身上的属性实际上修改的是<code>_data</code>中的数据 , 然后页面就更新成了修改后的新的数据</p><p>或者直接修改<code>_data</code>中的数据,页面也会更新为修改后的数据</p><p>这样看来,响应式数据的原理是在<code>_data</code>中.还记得我之前提到的<strong>数据劫持</strong>吗?</p><p>Vue的响应式就是通过<strong>数据劫持</strong>来实现的,而数据劫持又是通过<code>Object.defineProperty</code>实现的,<code>_data</code>的每一个属性都有一个setter函数,当<code>_data</code>中任何一个数据</p><p>发生了改变,都会走这个setter方法,那么在这个时候,我就可以执行一遍重新渲染页面的方法,从而使得页面数据更新</p><h4 id="监测数组"><a href="#监测数组" class="headerlink" title="监测数组"></a>监测数组</h4><p>我们先来观察一下<code>_data</code>中的hobbies数组的样子,我们发现它没有给每一个元素设置一个getter&#x2F;setter,那它是怎么实现响应式的呢</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220623184216302.png" class title="观察_data中的数组"><p>这里就不绕弯了</p><p>Vue里面对于数组的监测是</p><p>通过包装数组方法,先对页面进行更新,然后再调用原生的数组上的方法对数组进行更改</p><p>有以下这几种</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><blockquote><p>Vue中的push不是原生的push</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220623191749590.png" class title="Vue中的push不是原生的push"><p>所以只有当你使用以上这些方法的时候,Vue才会监测到,然后对页面进行更新,这就解释了先前的那个案例,直接将数组第一个元素替换的时候,Vue并没有监测到.</p><p>但如果数组元素是对象,它一样还是会有getter&#x2F;setter</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220623192149849.png" class title="数组元素是对象"><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>功能：先将数据作出处理再将数据进行显示</p><blockquote><p>案例：显示格式化后的时间</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220627065518988.png" class title="效果图"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        时间戳：&#123;&#123;nowTime&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        计算属性格式化后的时间是：&#123;&#123;fmtTime&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        方法格式化后的时间是:&#123;&#123;getFmtTime()&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        过滤器格式化后的时间：&#123;&#123;nowTime | timeFormatter&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">nowTime</span>: <span class="built_in">Date</span>.now()</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fmtTime</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> dayjs(<span class="built_in">this</span>.nowTime).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">getFmtTime</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> dayjs(value).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">timeFormatter</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> dayjs(value).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上这个过滤器叫局部过滤器，还有一种过滤器，叫全局过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的过滤器第一个传入的参数永远是待处理的数据，这里传入的就直接是第二个参数第三个第四个参数--&gt;</span></span><br><span class="line">        过滤器格式化后的时间：&#123;&#123;nowTime | globalTimeFormatter(&#x27;YYYY-MM-DD&#x27;)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;globalTimeFormatter&#x27;</span>,<span class="function">(<span class="params">value,formatStr=<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span></span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> dayjs(value).format(formatStr);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：过滤器不是必要的，因为我们使用计算属性或者方法都可以实现，这只是一种方式</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><blockquote><p>指令是什么？</p></blockquote><p>指令就是v-on开头的一些语法，就是自己封装一些逻辑</p><blockquote><p>需求1：定义一个v-big指令，会把绑定的数值放大10倍。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// big函数何时会被调用？</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.指令与元素成功绑定时。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.指令所在的模板被重新解析时。</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;big&#x27;</span>,<span class="built_in">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value * <span class="number">10</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    element.focus()</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这两个都是局部指令，我们来看看全局指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> Vue.directive(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">   <span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">      element.value = binding.value</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">      element.focus()</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">   <span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span><br><span class="line">      element.value = binding.value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>注意点：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指令定义时不加v-，但使用时要加v-；</span><br><span class="line"></span><br><span class="line">指令名如果是多个单词，要使用kebab-<span class="keyword">case</span>命名方式，不要用camelCase命名。</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>定义：Vue中每一个生命周期都对应着一个钩子（函数），当Vue走到该生命周期阶段的时候，就会自己调用该钩子。</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220627181736326.png" class title="生命周期流程图"><p>黄色的标签是我加的注释，其他的流程都是从Vue官网查看的</p><p>最常用的就是<code>mounted</code>和<code>destoryed</code></p><p>一般在<code>mounted</code>钩子中初始化数据（Ajax请求），在<code>destoryed</code>钩子中删除定时器，解绑自定义事件等收尾工作</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><blockquote><p>模块化的概念</p></blockquote><p>如果所有的js代码都在一个文件中，那么后期维护和更新会非常吃力。所以就有了模块化的概念了，这里可以看看我之前写的<a href="#">JavaScript的模块化规范</a></p><blockquote><p>组件的定义</p></blockquote><p>用来实现局部功能效果的所有代码和资源的集合（HTML、CSS、JavaScript）</p><h4 id="传统开发"><a href="#传统开发" class="headerlink" title="传统开发"></a>传统开发</h4><p>我们先来看看传统开发的结构</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628095008282.png" class title="传统开发"><p>其存在的问题是</p><p>1、代码复用率不高</p><p>2、依赖关系混乱，后期难以维护</p><h4 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h4><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628100230354.png" class title="组件化开发"><p>我们来看看官网给我们的图</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628100527543.png" class title="官网"><p>最上层的就是vm对象，它管理所有的组件对象</p><p>在Vue中有两种使用组件化开发的思路</p><p>1、非单文件组件</p><p>2、单文件组件</p><h4 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h4><h5 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = Vue.extend(&#123;</span><br><span class="line">   <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;  </span></span><br><span class="line"><span class="string">         &lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">   `</span>,</span><br><span class="line">   <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的data配置项我们说过可以写成两种形式</p><p>1、函数式</p><p>2、对象式</p><p>到了组件开发，这个data配置项就必须是函数式</p><p>避免组件被复用时，数据存在引用关系。</p><h5 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h5><blockquote><p>局部注册</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="comment">//第二步：注册组件（局部注册）</span></span><br><span class="line">   <span class="attr">components</span>:&#123;</span><br><span class="line">       hello</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>全局注册</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;hello&#x27;</span>,hello)</span><br></pre></td></tr></table></figure><h5 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1.关于组件名:</span><br><span class="line">    一个单词组成：</span><br><span class="line">        第一种写法(首字母小写)：school</span><br><span class="line">        第二种写法(首字母大写)：School</span><br><span class="line">    多个单词组成：</span><br><span class="line">        第一种写法(kebab-case命名)：my-school</span><br><span class="line">        第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</span><br><span class="line">    备注：</span><br><span class="line">        (1)组件名尽可能回避HTML中已有的元素名称</span><br><span class="line">        (2)可以使用name配置项指定组件在开发者工具中呈现的名字</span><br><span class="line"></span><br><span class="line">2.关于组件标签:</span><br><span class="line">    第一种写法：&lt;school&gt;&lt;/school&gt;</span><br><span class="line">    第二种写法：&lt;school/&gt;不用使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染。</span><br><span class="line"></span><br><span class="line">3.关于VueComponent：</span><br><span class="line">school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</span><br><span class="line"></span><br><span class="line">我们只需要写&lt;school/&gt;或&lt;school&gt;&lt;/school&gt;，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</span><br><span class="line"></span><br><span class="line">4.关于this指向：</span><br><span class="line">(1).组件配置中：</span><br><span class="line">data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</span><br><span class="line">(2).new Vue(options)配置中：</span><br><span class="line">data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</span><br><span class="line"></span><br><span class="line">5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。</span><br><span class="line">Vue的实例对象，以后简称vm。</span><br><span class="line"></span><br><span class="line">6.Vc和Vm的区别</span><br><span class="line">两者最大的差别就是vc没有el配置项，vc只能依附vm</span><br><span class="line">其他的配置项可以说是一样的</span><br><span class="line"></span><br><span class="line">7.重要的内置关系</span><br><span class="line">函数上的prototype属性叫显示原型属性</span><br><span class="line">对象上的__proto__属性叫隐式原型属性</span><br><span class="line">两者指向的都是同一个原型对象</span><br><span class="line">实例对象的隐式原型属性指向自己缔造者的原型对象</span><br><span class="line">VueComponent.prototype.__proto__ === Vue.prototype</span><br><span class="line">让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628122156213.png" class title="内置关系"><h4 id="单文件组件（脚手架）"><a href="#单文件组件（脚手架）" class="headerlink" title="单文件组件（脚手架）"></a>单文件组件（脚手架）</h4><p>这里我们就可以使用脚手架（Vue CLI）啦！</p><p>CLI（Command Line Interface）命令行接口，我们就叫它脚手架</p><p>首先，你必须要有node和gitbash的环境</p><p>在gitbash的命令行中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载脚手架</span></span><br><span class="line">npm i @vue/cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Vue项目</span></span><br><span class="line">vue create 项目名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Vue项目</span></span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>如果你是在idea中的终端运行的<code>vue create 项目名</code>报了以下错误，有以下两种解决方案</p><p>1、以管理员身份打开idea</p><p>2、使用命令行到当前目录下使用该命令</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628140018186.png" class title="报错"><p>这是正常启动成功的界面</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628140244913.png" class title="启动成功"><p>脚手架的HelloWorld案例界面</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628140331669.png" class title="脚手架的HelloWorld"><p>观察项目结构</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628140538722.png" class title="项目结构"><h5 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入App根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 关闭生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 创建vm对象</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们之前是这么写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;App&#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们运行，发现报错了，报错如下</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/22/Vue2-%E5%9F%BA%E7%A1%803/image-20220628142906442.png" class title="报错咯"><p>大概意思是脚手架使用的运行时版本的Vue，它没有模板解析器</p><p>你可以将模板放入render函数中，或者使用完整版的Vue</p><p>来解决问题</p><h6 id="使用完整版Vue"><a href="#使用完整版Vue" class="headerlink" title="使用完整版Vue"></a>使用完整版Vue</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue/dist/vue&#x27;</span></span><br></pre></td></tr></table></figure><p>发现不报错了，页面也正常显示了</p><h6 id="使用render函数"><a href="#使用render函数" class="headerlink" title="使用render函数"></a>使用render函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(App)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一个参数省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">createElement</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(App)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>直接写返回语句省略花括号和return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">createElement</span> =&gt;</span> createElement(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>换个参数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>为什么要使用残缺版的Vue呢？</p></blockquote><p>模板解析器占了Vuejs源码的1&#x2F;3的体积，为了减少打包后的体积，所以就将模板解析器删去，用更小的render函数来完成该任务</p><h5 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            HelloWorld</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #app &#123;</span><br><span class="line">        font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">        -webkit-font-smoothing: antialiased;</span><br><span class="line">        -moz-osx-font-smoothing: grayscale;</span><br><span class="line">        text-align: center;</span><br><span class="line">        color: #2c3e50;</span><br><span class="line">        margin-top: 60px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到一个vue文件可以分为三部分</p><p>第一部分是用来写HTML结构的</p><p>第二部分是用来写JavaScript的</p><p>第三部分是用来写样式的</p><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--针对IE，让IE浏览器最高级别渲染页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引入页面图标&lt;%= BASE_URL %&gt;可以拿到项目根路径，就是public文件夹--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置网站名字，拿着package.json中配置的name作为网站名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--当网站不支持JavaScript的时候，显示noscript中的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-基础2</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2基础2"><a href="#Vue2基础2" class="headerlink" title="Vue2基础2"></a>Vue2基础2</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>这里我们要接触一个全新的配置项<code>methods</code>和一个新的指令语法<code>v-on</code>，我们以需求为导向来学习这一节</p><blockquote><p>需求一：点击按钮，控制台显示欢迎信息</p></blockquote><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按钮绑定点击事件，回调函数是welcome--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;kerwin&#x27;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;坚持很难，但很酷&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">welcome</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Hello,<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里有几个知识点</p><p>1、模板字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">被``包裹的字符串被叫做模板字符串，它的特点是，在其中可以使用<span class="variable">$&#123;&#125;</span>语法读取变量</span><br></pre></td></tr></table></figure><p>2、methods中配置的函数，this指的应该是vm对象，这就对应着前面我说的一句话</p><p>所有被Vue管理的函数(不能是箭头函数)，其内部的this都是vm对象，所以可以使用this.xxx直接获取属性的值</p><p>3、观察vm对象，发现在methods中配置的函数，都出现在了vm身上</p><p>4、简写形式，<strong>常用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需求二：点击按钮，提示当前鼠标位置</p></blockquote><p>这就需要使用事件参数，其实在welcome方法的参数列表中，Vue默认为咱们传递了一个参数，只不过刚刚我们没有使用而已，我们接收打印一下看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">welcome</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220621162114463.png" class title="$event参数"><p>既然有了这个对象($event)，那我获取当前鼠标位置，只需要读取该对象的pageX属性和pageY属性即可</p><p>这里也可以不叫$event，叫它a啊b啊都可以，但是习惯起见，我就以$event来接收它了</p><blockquote><p>需求3：我想将name传参进去，而不是使用this去读取</p></blockquote><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;welcome($event,name)&quot;</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">welcome</span>(<span class="params">$event,name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello,<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个注意点，如果我在这里是这样写的<code>&lt;button v-on:click=&quot;welcome(name)&quot;&gt;欢迎&lt;/button&gt;</code></p><p>那么welcome函数只有一个入参，那就是name，点击事件对象就没了</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><blockquote><p>需求1：点击一个a标签，然后提示弹窗，但是不跳转页面</p></blockquote><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我跳转百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里面的prevent就是事件修饰符。</p><p>Vue为我们提供了6种事件修饰符，用的都不是很多，大家过个眼就行</p><table><thead><tr><th align="center">事件修饰符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">prevent</td><td align="center">阻止默认事件（常用）</td></tr><tr><td align="center">stop</td><td align="center">阻止事件冒泡（常用）</td></tr><tr><td align="center">once</td><td align="center">事件只触发一次（常用）</td></tr><tr><td align="center">capture</td><td align="center">使用事件的捕获模式</td></tr><tr><td align="center">self</td><td align="center">只有event.target是当前操作的元素时才触发事件</td></tr><tr><td align="center">passive</td><td align="center">事件的默认行为立即执行，无需等待事件回调执行完毕</td></tr></tbody></table><p>这里讲一下passive的作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;bigWork&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    wheel事件</span></span><br><span class="line"><span class="comment">    当鼠标滚轮滚动，则触发该事件，并且当滚动条到达边界后，滚动也会触发该事件</span></span><br><span class="line"><span class="comment">    scroll事件</span></span><br><span class="line"><span class="comment">    当滚动条滚动则触发该事件，滚动条到了边界后，再滚动就不会触发该事件了</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">bigWork</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;===&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;活终于干完了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在滚动鼠标滚轮的时候，滚动条就会卡住不动，当我加上passive后，即变正常。这是为什么呢？</p><p>当触发滚轮事件后，先执行事件回调，然后再执行默认事件，如果任务量很大，则默认事件就会堆积，导致页面卡顿</p><p>但是当我换成scroll的时候，就算我不加passive修饰符，滚动条依旧正常。</p><p>passive在pc端用的很少，在移动端用的较多一点</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p>键盘事件最常用的就两个事件<code>keydown</code>和<code>keyup</code></p><p>前者是当按键按下后触发，后者是当按键回弹起来后触发</p><blockquote><p>案例1：输入文字，当按下回车控制台打印</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        简写模式</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.enter=&quot;showInfo&quot;&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">`输入框中的句子是<span class="subst">$&#123;<span class="built_in">this</span>.msg&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.Vue中常用的按键别名：</span><br><span class="line">         回车 =&gt; enter</span><br><span class="line">         删除 =&gt; delete、backspace  (包括“删除”和“退格”键)</span><br><span class="line">         退出 =&gt; esc</span><br><span class="line">         空格 =&gt; space</span><br><span class="line">         换行 =&gt; tab (特殊，必须配合keydown去使用)</span><br><span class="line">         上 =&gt; up</span><br><span class="line">         下 =&gt; down</span><br><span class="line">         左 =&gt; left</span><br><span class="line">         右 =&gt; right</span><br><span class="line"></span><br><span class="line">2.系统修饰键（用法特殊）：ctrl、alt、<span class="built_in">shift</span>、meta(win)</span><br><span class="line">         (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</span><br><span class="line">         (2).配合keydown使用：正常触发事件。</span><br><span class="line"></span><br><span class="line">3.当按下Ctrl+y的时候，再触发事件</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;msg&quot;</span> @keyup.ctrl.y=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h3><blockquote><p>案例：根据输入的姓和名展示姓名</p></blockquote><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622084356095.png" class title="效果图"><h4 id="插值语法实现"><a href="#插值语法实现" class="headerlink" title="插值语法实现"></a>插值语法实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;firstName&#125;&#125;-&#123;&#123;secondName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="methods实现"><a href="#methods实现" class="headerlink" title="methods实现"></a>methods实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里的方法必须加上小括号，不然读取的就是方法的源码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.secondName&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这里需要注意一个点：当data中的数据发生了改变，就会重新解析模板，所以所有在插值语法中的函数都会再执行一遍</p><h4 id="计算属性实现"><a href="#计算属性实现" class="headerlink" title="计算属性实现"></a>计算属性实现</h4><h5 id="全写"><a href="#全写" class="headerlink" title="全写"></a>全写</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.secondName&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.firstName = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、get何时被调用？</span><br><span class="line">(1)页面加载好后，对此变量初次读取</span><br><span class="line">(2)get中使用到的任何变量发生变化的时候</span><br><span class="line">2、<span class="built_in">set</span>何时被调用</span><br><span class="line">(1)当fullName被修改时</span><br><span class="line">3、计算属性会被放到vm上</span><br></pre></td></tr></table></figure><h5 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h5><p>在只读不写的情况下才可以使用简写模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.secondName&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性是一个名词，不是动词</p><p>这一点搞明白之后，就可以理解计算属性的作用其实就是拿着我现有的东西加工后再展示在页面上</p><p>既然插值语法和methods都可以实现该功能，为什么还要学一个计算属性呢？这不是经典白学吗？</p><p>NO！大NO特NO</p><p>计算属性的优势有两点</p><p>1、职责分明</p><p>2、与methods实现相比，内部有<strong>缓存</strong>机制（复用），效率更高，调试方便。</p><blockquote><p>证明：计算属性有缓存</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我被读取了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.secondName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面上多次使用<code>fullName</code></p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622093329400.png" class title="初始化的时候"><p>修改姓</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622093408662.png" class title="修改姓"><p>由此可以证明计算属性具有缓存</p><p>缓存什么时候刷新呢？当get中使用到的任何变量发生变化的时候</p><h4 id="监视实现"><a href="#监视实现" class="headerlink" title="监视实现"></a>监视实现</h4><p>监视是一个全新的配置项，作用是监视一个属性的变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;李&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.secondName</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">secondName</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + newValue</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样写就有一个问题，当<code>firstName</code>和<code>secondName</code>有初始值的情况下，页面加载后，<code>fullName</code>是没有值的</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622101002642.png" class title="fullName"><p>这时候就需要使用一个配置项<code>immediate</code>，使得页面加载后立即执行一次监视的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="attr">firstName</span>:&#123;</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.secondName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">secondName</span>: &#123;</span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候小马觉得所有的数据直接写在data中不太好，他想使用一个对象来放这些数据，所以他把data改成了这样，然后他想监视person的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">firstName</span>:<span class="string">&#x27;李&#x27;</span>,</span><br><span class="line">            <span class="attr">secondName</span>: <span class="string">&#x27;四&#x27;</span>,</span><br><span class="line">            <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">school</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;南京某大学&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>于是乎页面就成了这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    学校名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.school.name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">person</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstName</span>:<span class="string">&#x27;李&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">secondName</span>: <span class="string">&#x27;四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;南京某大学&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">person</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;我被修改了&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(newValue);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小马开心的修改了学校名，发现控制台啥也没有，又修改了姓和名，发现控制台都没有输出，</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622101930985.png" class title="出现问题"><p>其实这不是小马的错，这时候就需要另一个配置项了<code>deep</code>，开启对对象的深度监视</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="attr">person</span>:&#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我被修改了&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小马发现这样写完之后，就又可以监视这个person对象了</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622102111819.png" class title="问题解决"><h5 id="简写模式"><a href="#简写模式" class="headerlink" title="简写模式"></a>简写模式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名：&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">firstName</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.secondName</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">secondName</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + newValue</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> vm.$watch(<span class="string">&#x27;firstName&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">   <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">   <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;firstName被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//简写形式，所有被vm所管理的函数，都不要写成箭头函数</span></span><br><span class="line"> vm.$watch(<span class="string">&#x27;secondName&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;secondName被修改了&#x27;</span>,newValue,oldValue,<span class="built_in">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>计算属性和监视的区别</p><p>就按照这个案例看的话，好像计算属性比监视好多了，但是如果我再加一个需求：姓名输入防抖动</p><blockquote><p>防抖动：就是一段时间内不展示结果，等到用户输入完毕后，再将结果放到页面中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;李&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">fullName</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">timer</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.fullName = newValue + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.secondName;</span></span><br><span class="line"><span class="javascript">                    &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">secondName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + newValue;</span></span><br><span class="line"><span class="javascript">                    &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里大家可能会有个疑惑</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622114519631.png" class title="疑惑"><p>这里如果不写成箭头函数的话，函数里面的this就是window</p><p>但是写成箭头函数的话，在2s过后，vs引擎执行此回调的时候，就会在函数中找this，没有找到</p><p>然后向外找，就找到了handler函数，这里面的this就是vm，那么就可以找到data中的属性了</p><hr><p>这时候就有人说了，那我也可以用计算属性啊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;secondName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;李&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">secondName</span>: <span class="string">&#x27;四&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.secondName;                    </span></span><br><span class="line"><span class="javascript">                &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当你写下这个代码的时候，你得反思一下基本功了</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/21/Vue2-%E5%9F%BA%E7%A1%802/image-20220622114133385.png" class title="函数返回值"><p>这个函数的返回值会返回到哪里去？</p><p>所以，当需要使用异步计算的时候，就需要使用属性监视</p><blockquote><p>小总结</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed和watch之间的区别：</span><br><span class="line">    1.computed能完成的功能，watch都可以完成。</span><br><span class="line">    2.watch能完成的功能，computed不一定能完成，例如：watch可以对数据进行异步的操作。</span><br><span class="line">两个重要的小原则：</span><br><span class="line">    1.所被Vue管理的函数，最好写成普通函数的形式，这样this的指向才是vm或组件实例对象。</span><br><span class="line">    2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数）</span><br><span class="line">    最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</span><br></pre></td></tr></table></figure><h3 id="绑定style与class"><a href="#绑定style与class" class="headerlink" title="绑定style与class"></a>绑定style与class</h3><p>这里就不写案例了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. class样式</span><br><span class="line">    写法:class=<span class="string">&quot;xxx&quot;</span> xxx可以是字符串、对象、数组。</span><br><span class="line">    :class=<span class="string">&quot;&quot;</span> 字符串写法适用于：类名不确定，要动态获取。</span><br><span class="line">    :class=<span class="string">&quot;&#123;classA:xxx,classB:xxx&#125;&quot;</span> 对象写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用，xxx是布尔值</span><br><span class="line">    :class=<span class="string">&quot;[&#x27;classA&#x27;]&quot;</span>数组写法适用于：要绑定多个样式，个数不确定，名字也不确定</span><br><span class="line">2. style样式</span><br><span class="line">    :style=<span class="string">&quot;&#123;fontSize: xxx&#125;&quot;</span>其中xxx是动态值。</span><br><span class="line">    :style=<span class="string">&quot;[a,b]&quot;</span>其中a、b是样式对象。</span><br><span class="line">    :style=<span class="string">&quot;obj&quot;</span>其中obj是样式对象或者数组</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-基础1</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2基础1"><a href="#Vue2基础1" class="headerlink" title="Vue2基础1"></a>Vue2基础1</h2><p>官网地址：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>相信大家学习什么都是以HelloWorld开头的，那我们就以一个HelloWorld的栗子开启我们的Vue学习吧</p><h3 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h3><h4 id="安装Vue"><a href="#安装Vue" class="headerlink" title="安装Vue"></a>安装Vue</h4><blockquote><p>这里大家要注意，不要使用CLI创建Vue项目</p><p>新手阶段最好使用标签静态引入CDN的方式来安装Vue</p></blockquote><blockquote><p>这里补充一个知识点：</p><p>script标签的src属性可以写成<code>./???.js</code>的形式</p><p>也可以写成一个网址，为了使用这种方式引入的加载速度更快一点，所以使用了CDN加速</p></blockquote><p>这是官网提供的两种Vue.js，两者有什么区别呢？</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220620221739016.png" class title="官网提供的Vue.js"><p>开发版本的体积比生产版本的体积大，其中包含了完整的警告和调试模式，在学习阶段，我们使用开发版本的即可</p><p>引入Vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a>安装开发者工具</h4><p>它是一个谷歌插件，如果你可以访问外网，可以直接在谷歌插件商场直接搜索下载，如果没有的话，我也在这里提供插件的文件，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/18AFI8MpW397L6obmKnAZCw </span><br><span class="line">提取码：iupu</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220620222517656.png" class title="谷歌拓展插件"><p>点击开发者模式</p><p>如果使用的是我提供的文件的话，直接将crx文件拖入该页面即可安装开发者工具</p><h4 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个Vue页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--这里的&#123;&#123;&#125;&#125;是Vue中的插值语法，可以读取data配置项中配置的数据--&gt;</span></span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">         Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//关闭vue的生产提示。</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>, <span class="comment">//el用于指定当前创建的Vue实例为哪个容器服务，值为css选择器。</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123; <span class="comment">//data中用于存储我们需要用到的数据，数据供el所指定的容器去使用，值是一个对象。</span></span></span><br><span class="line"><span class="javascript">               <span class="attr">msg</span>:<span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1、&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</span><br><span class="line">    js表达式 VS js语句</span><br><span class="line">    (1)js表达式是一个值</span><br><span class="line">    (2)js语句是一个语句，控制代码走向</span><br><span class="line">        <span class="function"><span class="title">if</span></span>()&#123;&#125;</span><br><span class="line">        <span class="function"><span class="title">for</span></span>()&#123;&#125;</span><br><span class="line">        <span class="function"><span class="title">switch</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">2、容器和Vue实例的关系是一对一的</span><br><span class="line"></span><br><span class="line">3、id为app的容器内部的代码就是模板</span><br><span class="line"></span><br><span class="line">4、一旦data中的数据发生改变，页面中使用到该数据的地方都会自动更新</span><br><span class="line"></span><br><span class="line">5、el的两种写法，该配置的作用叫挂载，就是将创建的Vue实例与HTML元素绑定在一起</span><br><span class="line">(1) el:<span class="string">&#x27;#app&#x27;</span></span><br><span class="line">(2) new Vue(&#123;</span><br><span class="line">            data:&#123;</span><br><span class="line">               msg:<span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;).<span class="variable">$mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">这个<span class="variable">$mount</span>是Vue原型对象上提供的</span><br><span class="line"></span><br><span class="line">6、data的两种写法</span><br><span class="line">(1) 对象式，data是一个对象</span><br><span class="line">        data:&#123; </span><br><span class="line">            msg:<span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">(2) 函数式，data是个函数，返回的是一个对象</span><br><span class="line"><span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">            <span class="built_in">return</span> &#123;</span><br><span class="line">            msg: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">(3) 只要是Vue管理的函数，其中的this对象都是自己创建的Vue实例对象，**前提是不能是箭头函数**</span><br><span class="line">(4) 我们最常使用的是函数式的，大家要多写这种形式的，具体原因的话，这里埋个伏笔，以后在讲组件的时候解释</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不使用new关键词创建Vue对象的话会怎么样呢？</p></blockquote><p>控制台就会出现报错</p><p>开发版</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220620233358806.png" class title="开发板Vue"><p>生产版</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220620233450024.png" class title="生产板Vue"><p>这里可以体现生产版本和开发版本之间的区别</p><p>我们来看下Vue的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//先判断当前调用函数的是否是Vue的实例，如果不是，则在控制台报错</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</span><br><span class="line">    warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>刚刚我们在写HelloWorld案例的时候使用的<code>&#123;&#123;&#125;&#125;</code>叫插值语法</p><p>模板语法一共两种，插值语法就是其中的一种，另一种模板语法叫指令语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">插值语法：</span><br><span class="line">      作用：解析标签体内的内容</span><br><span class="line">      写法：&#123;&#123;xxx&#125;&#125;双括号内是js表达式，可以直接读取到data中的所有属性。</span><br><span class="line">      </span><br><span class="line">指令语法：</span><br><span class="line">      功能：解析标签（包括：标签属性、标签体内容、绑定事件.....）。</span><br><span class="line">      写法：v-xxx(xxx为具体指令)</span><br></pre></td></tr></table></figure><p>我们来看看<strong>指令语法</strong>是个什么东东</p><blockquote><p>为了节省代码量，这里只写核心代码</p></blockquote><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>这个最简单，其作用就是插值语法，将其指定的内容<strong>替换</strong>标签体内的所有内容，不解析HTML</p><p>与之对应的还有一个指令<code>v-html</code>，那这个指令就是将内容放入标签体内后，如果内容有HTML元素，它也会解析</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>主要使用在给HTML元素属性动态赋值的时候使用</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我去&#123;&#123;name&#125;&#125;学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是v-bind的简写模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我去&#123;&#123;name&#125;&#125;学习2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>bind的英文意思是绑定，这里先理解一下这个名词的意思，这里的v-bind是单向绑定</p><p>什么叫单向绑定？</p><p>就是我在Vue实例中的data中的数据发生了改变，页面中的数据就会跟着更新，</p><p>但是页面中的数据发送了改变，data中的数据不会发生改变</p><blockquote><p>证明：</p><p>因为我们还没学其他可以修改data中的数据的方法，我们这里就使用开发者工具开帮我们完成该任务</p></blockquote><p>修改data中数据，页面更新</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621083431759.png" class title="使用Vue开发者工具"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621083545171.png" class title="点击文字及可编辑"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621083604631.png" class title="页面数据更新"><p>修改页面数据，data不更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).children[<span class="number">0</span>].href=<span class="string">&#x27;https://juejin.cn/&#x27;</span></span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621083933243.png" class title="页面修改成功"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621083959761.png" class title="data中的数据未更新"><p>这就是单向绑定了</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621084904056.png" class title="单向绑定"><p>既然有单向绑定，那肯定与之对应的还有一个双向绑定啦，下面我们来看看双向绑定</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>只使用在一些<strong>表单类</strong>的HTML标签</p><p>这个指令十分十分十分的重要，请一定要理解这个指令<strong>双向绑定</strong>的作用</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将input的value属性和data中的name属性双向绑定起来--&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;芝麻芝麻&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>单向绑定，是页面中的数据修改后，data中的数据不会更新</p><p>那双向绑定的情况下，是不是就会更新了？是的</p><p>我们来证明一下这一点</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621085156601.png" class title="证明页面元素发生改变，data实例中的数据也会发生改变"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621085339003.png" class title="双向绑定"><p>说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、简写模式</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">2、作用范围</span><br><span class="line">只可以作用在表单元素上</span><br></pre></td></tr></table></figure><h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M:模型(Model)对应data中的数据</span><br><span class="line">V:视图/模板(View)HTML元素</span><br><span class="line">VM:视图模型(ViewModel)托管数据的Vue实例，所以以后我们叫Vue的实例对象就叫vm对象</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621093346382.png" class title="MVVM模型"><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621094422071.png" class title="MVVM模型与Vue中的对应关系"><p>我们来输出一下vm来看看它长啥样</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621094743570.png" class title="vm对象"><p>我们发现，橙色框中就是我们data中配置的数据，奇怪的是，它是三个点，但是点开看确实是我们刚刚配置的数据</p><p>Vue经过一些操作（我可不会告诉你这叫数据代理），将咱们在data中配置的数据直接放到了vm实例对象上</p><p>其实插值语法中可以看到vm身上所有的属性，所以可以直接写我们在data中配置的属性</p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="回顾Object-defineProperty"><a href="#回顾Object-defineProperty" class="headerlink" title="回顾Object.defineProperty()"></a>回顾Object.defineProperty()</h4><p>在说这个之前，我们先来回顾一下Object上的一个方法<code>defineProperty</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我要给person对象上添加一个属性age</p><p>第一种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.age=<span class="number">18</span></span><br></pre></td></tr></table></figure><p>第二种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那有人就要说了，谁选第二种方式啊，第一种方式那么简单，此言差矣</p><p>第二种写的方式定义的age属性有两个特性</p><blockquote><p>第一个，他无法被遍历，删除，修改</p></blockquote><p>无法被遍历，是什么意思？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历person中的所有属性</span></span><br><span class="line"><span class="keyword">for</span>(p <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拿到person中的属性数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person))</span><br><span class="line"><span class="comment">// 除了age属性，其他的属性都可以被遍历到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用Object.defineProperty定义的数据有很多限制，但是可以通过一些配置项来使其解除限制</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,<span class="comment">//可被遍历，默认值是false</span></span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//可以被修改，默认值是false</span></span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">//可以被删除，默认值是false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>第二个，它可以做<strong>数据劫持</strong></p></blockquote><p>这就需要一些其他的配置项了，即<code>get</code>和<code>set</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 当有人读取person的age的时候，即点了那三个点的时候</span></span><br><span class="line">    <span class="comment">// 就会将这个函数的返回值作为person.age的值展示出来</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;嘿嘿，旧数据被我劫持了！！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当有人修改person的age的时候</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;嘿嘿，新数据被我劫持了！！我要做坏事了&#x27;</span>)</span><br><span class="line">        number = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>给数据代理下个定义：通过一个对象代理对另一个对象中属性的操作（R&#x2F;W）</p><p>我们看一下Vue中的数据代理</p><p><strong>vm实例对象代理了data中配置的属性</strong></p><p>我们先来证明一个事情：我们传入的data配置项和vm身上的_data是同一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;芝麻芝麻&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/Vue2-%E5%9F%BA%E7%A1%801%5Cimage-20220621103356629.png" alt="证明"></p><blockquote><p>这里我们观察到data已经不是原来的那个对象了，它已经被Vue加工过了</p></blockquote><p>那么Vue中的数据代理就是<strong>vm代理了_data中的数据修改</strong></p><p>当<code>_data</code>中的数据发生了修改，<code>_data</code>就会检测到这次的修改（数据劫持），页面中使用到该数据的地方都会发生更新</p><h4 id="模拟Vue中的数据代理和数据劫持"><a href="#模拟Vue中的数据代理和数据劫持" class="headerlink" title="模拟Vue中的数据代理和数据劫持"></a>模拟Vue中的数据代理和数据劫持</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 我的Vue的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyVue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 拿到配置项传入的data</span></span><br><span class="line">        <span class="keyword">let</span> data = options[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">        <span class="comment">// 数据代理，将data中出现的属性代理给实例对象</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,p,&#123;</span><br><span class="line">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> data[p];</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">                    data[p] = newValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 数据劫持</span></span><br><span class="line">    <span class="comment">// 将data进行一些加工，使其可以检测属性的变化，当属性变化的时候，对页面做出更新</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,p,&#123;</span><br><span class="line">                    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;有人读取配置项中的数据&#x27;</span>);</span><br><span class="line">                        <span class="keyword">return</span> data[p];</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;有人修改配置项中的数据，我要更新页面了&#x27;</span>);</span><br><span class="line">                        data[p]=newValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 对传入的data数据进行加工，并将其赋值给_data</span></span><br><span class="line">        <span class="built_in">this</span>._data=<span class="keyword">new</span> Observer(data);</span><br><span class="line">    options.data=<span class="built_in">this</span>._data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> MyVue(&#123;</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhima&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>证明：</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/20/Vue2-%E5%9F%BA%E7%A1%801/image-20220621110015248.png" class title="模拟Vue中的数据代理"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题一</span></span><br><span class="line"><span class="comment">// 对于嵌套类型的对象,是无效的,因为我没有写递归语句,源码是写了递归语句,将对象的每一层都加了getter/setter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题二</span></span><br><span class="line"><span class="comment">// 这里的_data对象和传入的data对象是不一致的</span></span><br><span class="line"><span class="comment">// 这里我不知道怎么实现这一点，有会的大佬可以发一下评论区 </span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhima&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> MyVue(&#123;</span><br><span class="line">    data</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//console</span></span><br><span class="line">vm._data===data</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的代码看不懂不要紧哦，我接下来还会再提一遍的，慢慢地会懂的</p><p>加油加油💪</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2-导言</title>
      <link href="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/18/Vue2-%E5%AF%BC%E8%A8%80/"/>
      <url>/%E5%89%8D%E7%AB%AF/Vue2/2022/06/18/Vue2-%E5%AF%BC%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>学习Vue之前，我们先来看三个问题</p><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><h4 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h4><p>这是官网的介绍</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/18/Vue2-%E5%AF%BC%E8%A8%80/image-20220618213535715.png" class title="官网介绍"><blockquote><p>构建用户界面</p></blockquote><p>即将数据展示在页面上，给用户看</p><blockquote><p>渐进式框架</p></blockquote><p>渐进即<strong>逐渐递进</strong>，简单来说就是</p><p>在简单应用中，可以只需要一个小巧的库</p><p>在复杂应用中，可以引入各种各样复杂的<strong>组件</strong></p><p>就是一种可以从易到难开发的一种框架</p><h4 id="谁开发的"><a href="#谁开发的" class="headerlink" title="谁开发的"></a>谁开发的</h4><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/18/Vue2-%E5%AF%BC%E8%A8%80/image-20220619081309416.png" class title="作者"><h4 id="它有什么特点"><a href="#它有什么特点" class="headerlink" title="它有什么特点"></a>它有什么特点</h4><p><strong>Angular.js</strong>的特点是模块化开发</p><p><strong>React.js</strong>的特点是虚拟DOM</p><p>Vue则是集两家之长，它具有以下特点</p><h5 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a><strong>组件</strong>化开发</h5><p>提高代码复用率和维护性</p><img src="/%E5%89%8D%E7%AB%AF/Vue2/2022/06/18/Vue2-%E5%AF%BC%E8%A8%80/image-20220619083027302.png" class title="组件化开发"><p>每一个框就是一个组件，就是一个文件</p><p>当我需要修改哪一块的界面，我只需要到哪个文件去修改即可</p><h5 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a><strong>声明式编程</strong></h5><p>让编码人员无需直接操作DOM，提高开发效率</p><p>需求：将下列数据显示在一个列表(<code>&lt;ul id=&quot;container&quot;&gt;&lt;/ul&gt;</code>)中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let persons = </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        id: &#x27;<span class="number">1</span>&#x27;,</span><br><span class="line">        name: &#x27;zhima&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: &#x27;<span class="number">2</span>&#x27;,</span><br><span class="line">        name: &#x27;lizhi&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        id: &#x27;<span class="number">3</span>&#x27;,</span><br><span class="line">        name: &#x27;kerwin&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>命令式编程</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line">persons.forEach(<span class="function"><span class="params">p</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> li=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    li.innerHtml=<span class="string">`id:<span class="subst">$&#123;p.id&#125;</span>-name:<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">    list.append(li);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>声明式编程</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span>&gt;</span></span><br><span class="line">        id:&#123;&#123;p.id&#125;&#125;-name:&#123;&#123;p.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><p>优秀的DIFF算法，提高DOM的复用率</p><p>这就有点让人摸不着头脑了，DOM还有复用率？</p><p>还是刚才那个案例，如果我的数据变成了这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> persons = </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhima&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lizhi&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;txy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>传统的使用JavaScript进行命令式操作的话，直接将数据转化为页面真实DOM（Real-DOM），确实和DOM的复用率没有啥关系</p><hr><p>但是在Vue里面，在数据变成页面上的DOM节点的之前，它会在内存中生成虚拟DOM（Virtual-DOM）</p><p>然后使用DIFF算法，比较<strong>新旧虚拟DOM</strong>，如果有一样的，则直接复用之前已经生成好的虚拟DOM，从而提高了DOM的复用率。</p><p>那么通过什么来判断两个虚拟DOM是否相同呢？</p><p>这就要说说刚刚写的代码的一处错误了，下面看正确的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">        id:&#123;&#123;p.id&#125;&#125;-name:&#123;&#123;p.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到，上面的代码就是加了一处地方，就是<code>:key=&quot;p.id&quot;</code>，就是给每一个遍历的元素加上了唯一性标识</p><p>具体的DIFF算法，我们后面讲到虚拟DOM 的时候再说</p><h4 id="学之前要掌握什么知识"><a href="#学之前要掌握什么知识" class="headerlink" title="学之前要掌握什么知识"></a>学之前要掌握什么知识</h4><ol><li><a href="http://li-zhi.net.cn/javaEE/JavaScript/2022/03/16/JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/">ES6模块化开发规范</a></li><li>包管理器NPM</li><li>数组常用方法</li><li>axios</li><li>promise</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二叉树（纲领）</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/05/07/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E7%BA%B2%E9%A2%86%EF%BC%89/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/05/07/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E7%BA%B2%E9%A2%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树（纲领）"><a href="#二叉树（纲领）" class="headerlink" title="二叉树（纲领）"></a>二叉树（纲领）</h2><p>二叉树的解题思路有两个方向</p><blockquote><p>通过遍历一棵树得到答案，即<strong>遍历</strong>的思想</p></blockquote><blockquote><p>通过递归，将整个问题分解为子问题推导出问题的答案，即<strong>分解</strong>的思想</p></blockquote><p>首先我们来回顾以下二叉树的几种遍历方式</p><ul><li>前序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层次遍历</li></ul><p>大家在课内学习的时候，应该是这么背的</p><p>前序是<code>根左右</code>，中序是<code>左根右</code>，后序是<code>左右根</code>，层次遍历就是一层一层写</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/05/07/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E7%BA%B2%E9%A2%86%EF%BC%89/example.png" class title="栗图"><p>前序遍历集合：<code>ABDHIECFG</code></p><p>中序遍历集合：<code>HDIBEAFCG</code></p><p>后序遍历集合：<code>HIDEBFGCA</code></p><p>层次遍历集合：<code>ABCDEFGHI</code></p><p>相信这个对于大家来说都没有难度，理解前中后序对于做二叉树问题十分重要，这里给出遍历二叉树的模板代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前序位置</span></span><br><span class="line">    traverse(root.left);</span><br><span class="line">    <span class="comment">// 中序位置</span></span><br><span class="line">    traverse(root.right);</span><br><span class="line">    <span class="comment">// 后序位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面请你对照这段模板，看下面这张图</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/05/07/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E7%BA%B2%E9%A2%86%EF%BC%89/%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E4%BD%8D%E7%BD%AE.png" class title="前中后序位置"><p>你会发现，每个节点都会有唯一属于自己的前中后序位置，前中后序其实对应就是处理每一个节点的三个特殊时间点。</p><p>二叉树的问题，其实就是在这三个时间点注入自己的代码逻辑，只需要单独考虑每一个节点在每个时间点该做些什么，其他的交给二叉树遍历框架即可。</p><h3 id="前序输出集合"><a href="#前序输出集合" class="headerlink" title="前序输出集合"></a>前序输出集合</h3><p>我们来写一下前序遍历，方法签名如下<code>public List&lt;TreeNOde&gt; getPreorderList(TreeNOde root)&#123;&#125;</code></p><h4 id="一、遍历"><a href="#一、遍历" class="headerlink" title="一、遍历"></a>一、遍历</h4><p>借助traverse函数和一个外部变量即可完成</p><p>在进入一个节点的时候将其加入到结果集中去，最后将结果集返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNOde&gt; <span class="title">getPreorderList</span><span class="params">(TreeNOde root)</span> </span>&#123;</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(root);</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、分解问题"><a href="#二、分解问题" class="headerlink" title="二、分解问题"></a>二、分解问题</h4><p>求一整个树的前序遍历即求其子树的前序遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getPreorderList</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将当前节点放入集合</span></span><br><span class="line">    res.add(root);</span><br><span class="line">    <span class="comment">// 将左节点的前序遍历放入集合</span></span><br><span class="line">    res.addAll(getPreorderList(root.left));</span><br><span class="line">    <span class="comment">// 将右节点的前序遍历放入集合</span></span><br><span class="line">    res.addAll(getPreorderList(root.right));</span><br><span class="line">    <span class="comment">// 讲结果集返回</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></h3><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><code>说明: 叶子节点是指没有子节点的节点。</code></p><blockquote><p>示例：</p></blockquote><p>给定二叉树 [3,9,20,null,null,15,7]</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回它的最大深度 3 。</p><p>我们来使用两种上述思维来看这道题</p><h4 id="一、遍历-1"><a href="#一、遍历-1" class="headerlink" title="一、遍历"></a>一、遍历</h4><p>如何得到最大深度，即得到每一个节点的深度，在叶子节点处将当前深度和当前最大深度取最大，然后将最大的深度返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前序位置</span></span><br><span class="line">        depth++;</span><br><span class="line">        <span class="comment">// 在叶子节点处更新最大深度</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            max = Math.max(max, depth);</span><br><span class="line">        &#125;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        <span class="comment">// 中序位置</span></span><br><span class="line">        traverse(root.right);</span><br><span class="line">        <span class="comment">// 后序位置</span></span><br><span class="line">        depth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前序位置是进入一个节点的时候，中序位置是从左子树切到右子树的时候，后序位置是离开一个节点返回其父母节点的时候</p><p>depth记录着当前深度，max记录着最大深度</p><p>在进入一个新的节点的时候，depth自增1，在离开这个节点的时候，depth自减1</p><h4 id="二、分解问题-1"><a href="#二、分解问题-1" class="headerlink" title="二、分解问题"></a>二、分解问题</h4><p>求树的最大深度即求树的高度</p><p>求树的高度即可分解问题，分解到由子树高度推导出完整的树的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左子树的高度</span></span><br><span class="line">    <span class="keyword">int</span> left = maxDepth(root.left);</span><br><span class="line">    <span class="comment">// 右子树的高度</span></span><br><span class="line">    <span class="keyword">int</span> right = maxDepth(root.right);</span><br><span class="line">    <span class="comment">// 返回自身高度</span></span><br><span class="line">    <span class="keyword">int</span> max = Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【19-Medium】删除链表的倒数第N个节点</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/05/01/%E3%80%9019-Medium%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/05/01/%E3%80%9019-Medium%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1</strong>：</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/05/01/%E3%80%9019-Medium%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/example.jpg" class title="example"><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1,2,3,4</span>,<span class="number">5</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1,2,3,5</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="comment">[1]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="comment">[1,2]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[1]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><ul><li>Related Topics</li><li>链表</li><li>双指针</li></ul><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>这道题典型的用快慢指针法来解决</p><p>将<code>slow</code>和<code>fast</code>指向头部，将<code>fast</code>指针先往后走n步</p><p>然后两者齐头并进，当<code>fast.next</code>为<code>null</code>的时候，<code>slow</code>已经在倒数第n-1个节点的位置了，此时进行删除操作</p><p>该方法的原理是利用<strong>步长</strong>，fast先走的那几步，在<code>fast</code>到了链表末尾的<code>null</code>的时候，<code>slow</code>则表示的是倒数第n个节点，</p><p>因为这里需要执行删除操作，所以需要将<code>fast</code>走到链表末尾即可</p><blockquote><p>示例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存分区</title>
      <link href="/javaEE/JVM/2022/03/18/JVM-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
      <url>/javaEE/JVM/2022/03/18/JVM-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存分区"><a href="#JVM内存分区" class="headerlink" title="JVM内存分区"></a>JVM内存分区</h2><p>内存分区和内存模型是两个概念</p><p>操作系统内存分区</p><ul><li>栈（Stack）</li><li>堆（Heap）</li><li>未初始化数据段（BSS）</li><li>数据段（Data Segment）</li><li>文本段（Literal Segment）</li><li>代码段（Code Segment）</li></ul><p>JVM内存分区</p><ul><li>程序计数器（PC）</li><li>虚拟机栈（JVM Stack）</li><li>本地方法栈（Native Method Stack）</li><li>堆（Heap）</li><li>方法区（Method Area）</li></ul><img src="/javaEE/JVM/2022/03/18/JVM-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/JVM%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA.png" class title="JVM内存分区"><p>橙色虚线包裹的就是线程共享的，被红色实现包裹的是线程隔离的</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>在硬件层面，程序计数器是寄存器，是用来存储指令地址给处理器执行，</p><p>在JVM中，它的作用就是用来存储字节码指令的地址，提供给执行引擎去执行</p><p>这里我们从侧面去查看该特新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后先编译<code>javac Demo.java</code>反编译<code>javap -l -c  Demo.class</code></p><p>得到以下字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;Demo.java&quot;</span></span><br><span class="line">public class com.lizhi.Demo &#123;</span><br><span class="line">  public com.lizhi.Demo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       4: <span class="built_in">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 3: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    Code:</span><br><span class="line">    // 这里的数字就是字节码指令的偏移量</span><br><span class="line">       0: iconst_0</span><br><span class="line">       1: istore_1</span><br><span class="line">       2: iload_1</span><br><span class="line">       3: bipush        10</span><br><span class="line">       5: if_icmpge     21</span><br><span class="line">       8: getstatic     <span class="comment">#2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      11: iload_1</span><br><span class="line">      12: invokevirtual <span class="comment">#3                  // Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">      15: iinc          1, 1</span><br><span class="line">      18: goto          2</span><br><span class="line">      21: <span class="built_in">return</span></span><br><span class="line">      // 这里可以解释断点的原理，将源码行数和字节码行数进行映射</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 5: 0</span><br><span class="line">      line 6: 8</span><br><span class="line">      line 5: 15</span><br><span class="line">      line 8: 21</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>也叫java方法栈，java方法的调用对应着<strong>栈帧</strong>的入栈与出栈。</p><p>3个重点：</p><ol><li>栈帧</li><li>栈帧出现时机</li><li>栈帧的构成</li></ol><h4 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h4><p>栈帧主要有四部分组成：局部变量表、操作数栈、动态连接、返回地址</p><ul><li><strong>局部变量表</strong></li></ul><ol><li>主要存储方法的参数、定义在方法内的局部变量，包括基本数据类型（8大）对象的引用地址，返回值地址。</li><li>局部变量表中存储的基本单元为变量槽（Slot），32位（4字节）以内的数据类型占一个slot，64位（long，double）的占两个slot。</li><li>局部变量表是一个数字数组，byte、short、char都会被转化为int,boolean类型也会被转化为int，O代表false、非0代表true。局部变量表的大小是在编译期间决定下来的，所以在运行时它的大小是不会变的。</li><li>局部变量表中含有直接或者间接指向的引用类型变量时，不会被垃圾回收处理。</li></ol><ul><li><strong>操作数栈</strong></li></ul><p>就是用来存储操作数的栈，这里的操作数大部分就是方法内的变量</p><p>作用：</p><ol><li>存储操作数</li><li>操作数栈可以方便指令顺序读取操作数</li></ol><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>iload</td><td>int型变量入栈</td></tr><tr><td>istore</td><td>栈顶数值存入局部变量</td></tr><tr><td>iadd</td><td>弹出栈顶两个操作数，并将求和的int值压入栈中</td></tr></tbody></table><ul><li><strong>动态连接</strong></li></ul><p>java中的多态就是通过动态连接实现的</p><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用都是为了支持方法调用过程中的动态连接</p><p>连接是将部分符号引用替换为直接引用，对于有些方法，JVM并不能判断它们的具体实现，只有在真正运行的时候，才可以根据实际类型进行连接，这就是动态连接</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法是由非java语言实现的函数，一般是一些和操作系统底层相关的函数</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-模块化开发</title>
      <link href="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/16/JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/16/JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="javaScript模块化"><a href="#javaScript模块化" class="headerlink" title="javaScript模块化"></a>javaScript模块化</h2><blockquote><p>什么是模块化？</p></blockquote><p>即将一个复杂的程序依据一定的规则(规范)封装成几个块(文件)，并用规定语法将其组合在一起，块的内部数据&#x2F;实现是私有的,只是向外部暴露一些接口(方法)与外部其他模块通信</p><p>以前的代码</p><hr><p>全局模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong>所有的函数都被绑定在了<code>window</code>上，容易产生命名冲突和产生对<code>window</code>的污染</p><hr><p>namespace模式</p><p>将函数或者数据绑定在对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">k</span>: <span class="string">&#x27;asd&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.k)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong>对象中的数据可以随意被修改，所以数据不安全</p><hr><p>IIFE(Immedicately-invoked-function-expression)</p><p>该方法就是利用函数的作用域和即使函数的特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">window</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.module=&#123;foo&#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="built_in">module</span>.foo();</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">window</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ooo&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.module=foo</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="built_in">module</span>();</span><br></pre></td></tr></table></figure><p><strong>IIFE</strong>就是现代化模块化的基石</p><p>模块化的好处</p><ol><li>避免命名冲突</li><li>根据功能点进行更好的分离</li><li>更高的复用性</li><li>高可维护性</li></ol><p>但是以此同时就出现了问题</p><ul><li>一个页面需要引入多个js文件，如果多个文件之间有依赖关系，先后顺序的错误就会导致报错</li><li>请求过多</li><li>依赖模糊</li><li>难以维护</li></ul><p>这时候我们就需要引入一种模块化的规范来避免这种问题，下面我们来看看有哪些模块化规范</p><h3 id="模块化的规范"><a href="#模块化的规范" class="headerlink" title="模块化的规范"></a>模块化的规范</h3><ol><li><strong>CommonJS（nodejs就是基于这种规范）</strong></li><li>AMD （用的少）</li><li>CMD（阿里的人写的。用的少）</li><li><strong>ES6</strong></li></ol><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><p>说明：</p><ol><li>每一个文件都是一个模块</li><li>服务器端：模块的加载是运行时同步加载的</li><li>浏览器端：需要自己编译打包将所有的模块js合并到一个js中</li></ol><p>定义模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;&#125;</span><br><span class="line">---</span><br><span class="line">expoets.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.n = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>引入模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> module1 = <span class="built_in">require</span>(..)</span><br><span class="line"><span class="comment">// 这里的..</span></span><br><span class="line"><span class="comment">// 引入第三方的包   直接写包名</span></span><br><span class="line"><span class="comment">// 引入自己写的js   写路径</span></span><br></pre></td></tr></table></figure><hr><p>服务器端例子：</p><p>先创建项目结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-modules</span><br><span class="line"> --module1.js</span><br><span class="line"> --module2.js</span><br><span class="line"> --module3.js</span><br><span class="line">-app.js</span><br><span class="line">-package.json</span><br></pre></td></tr></table></figure><p><code>module1.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`&#x27;module1&#x27;s foo()`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>module2.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`&#x27;module2&#x27;s foo()`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.abc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`&#x27;module2&#x27;s abc()`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>module3.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`&#x27;module3&#x27;s foo()`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> module1 = <span class="built_in">require</span>(<span class="string">&#x27;./modules/module1.js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> module2 = <span class="built_in">require</span>(<span class="string">&#x27;./modules/module2.js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> module3 = <span class="built_in">require</span>(<span class="string">&#x27;./modules/module3.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">module1.foo()</span><br><span class="line">module2.foo()</span><br><span class="line">module2.abc()</span><br><span class="line">module3()</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;applicationname&#x27;,<span class="comment">// 这里写项目名字，不能有大写字母，不能有中文</span></span><br><span class="line">    version: &#x27;<span class="number">1.0</span><span class="number">.0</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<code>npm init</code>生成该文件</p><hr><p>客户端例子：</p><p>结构树如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">test</span></span><br><span class="line">--dist</span><br><span class="line">    --src</span><br><span class="line">    ---module1.js</span><br><span class="line">    ---module2.js</span><br><span class="line">    ---module3.js</span><br><span class="line">    ---app.js</span><br><span class="line">    --index.html</span><br><span class="line">    --package.json</span><br></pre></td></tr></table></figure><p>js代码如上</p><p>下载编译工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install browserify -g<span class="comment"># 全局安装</span></span><br><span class="line">npm install browserify --save-dev<span class="comment"># 开发依赖，在上线阶段不需要此工具了</span></span><br></pre></td></tr></table></figure><p>使用该工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify src/app.js -o dist/budle.js</span><br></pre></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./dist/budle.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>说明：AMD(（Asynchronous Module Definition）)专门用户浏览器端，模块的加载是异步的</p><p>此规范依赖于一个<code>Require.js</code></p><p>基本语法：</p><p>定义模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有依赖其他模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>引入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line">    使用m1/m2</span><br><span class="line">&#125;)</span><br><span class="line">requirejs([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line">    使用m1/m2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例子：</p><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">test</span></span><br><span class="line">--js</span><br><span class="line">        ---libs</span><br><span class="line">            ----require.js//这是引入的第三方js</span><br><span class="line">        ---modules</span><br><span class="line">            ----module1.js</span><br><span class="line">            ----module2.js</span><br><span class="line">            ----modlue3.js</span><br><span class="line">        ---main.js</span><br><span class="line">--index.html</span><br></pre></td></tr></table></figure><p><code>mudule1.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    lett msg = <span class="string">&#x27;module1&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;foo&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>module2.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">&#x27;module1&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;module2.js&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.lopg(msg,m1.foo())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;foo&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>.config(&#123;</span><br><span class="line">        <span class="attr">baseUrl</span>: <span class="string">&#x27;js/&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: &#123;</span><br><span class="line">            <span class="attr">module1</span>: <span class="string">&#x27;./modules/module1.js&#x27;</span>,</span><br><span class="line">            <span class="attr">module2</span>: <span class="string">&#x27;./modules/module2.js&#x27;</span></span><br><span class="line">            <span class="attr">jquery</span>: <span class="string">&#x27;./libs/jquery.js&#x27;</span><span class="comment">//引入第三方库，不是所有的第三方库都支持AMD语法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    requirejs([<span class="string">&#x27;module1&#x27;</span>,<span class="string">&#x27;module2&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line">        m1.foo();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>页面中只要引入该标签即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">&quot;js/main.js&quot;</span> <span class="attr">src</span>=<span class="string">js/libs/require.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ES6规范"><a href="#ES6规范" class="headerlink" title="ES6规范"></a>ES6规范</h4><p>说明：该规范也需要编译打包处理，先使用<code>babel</code>将ES6转化为ES5，然后使用<code>browserify</code>将其并为一个js文件</p><p>基本语法：</p><p>导出模板： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo,abc&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入模块： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 常规导出，这边用对象接</span><br><span class="line">import &#123;&#125; from <span class="string">&#x27;路径&#x27;</span> //自己的js</span><br><span class="line"></span><br><span class="line">// 默认导出，这边用变量来接</span><br><span class="line">impoet module from <span class="string">&#x27;路径&#x27;</span></span><br></pre></td></tr></table></figure><p>例子：</p><p>项目结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">test</span></span><br><span class="line">--js</span><br><span class="line">---dist</span><br><span class="line">---build</span><br><span class="line">---src</span><br><span class="line">----module1.js</span><br><span class="line">----module2.js</span><br><span class="line">----module3.js</span><br><span class="line">----main.js</span><br><span class="line">--index.html</span><br><span class="line">--.babelrc</span><br><span class="line">--package.json</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install browserify --save-dev</span><br><span class="line"></span><br><span class="line">npm install babel-cli -g</span><br><span class="line"></span><br><span class="line">npm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure><p>创建<code>.babelrc</code></p><blockquote><p>rc就是run control运行时控制文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;presets&quot;</span>:[<span class="string">&quot;es2015&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>module1.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>module2.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;f1,f2&#125;</span><br></pre></td></tr></table></figure><p><code>module3.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo,abc&#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;f1,f2&#125; <span class="keyword">from</span> <span class="string">&#x27;./module2.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> module3 <span class="keyword">from</span> <span class="string">&#x27;./module3.js&#x27;</span></span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">abc();</span><br><span class="line">f1();</span><br><span class="line">module3.d1();</span><br><span class="line">module3.d2();</span><br></pre></td></tr></table></figure><p>es6转es5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel js/src -d js/build</span><br></pre></td></tr></table></figure><p>这里如果出现这个错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel : 无法加载文件 C:\Users\win\AppData\Roaming\npm\babel.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/ go.micros</span><br></pre></td></tr></table></figure><p>那么你输入以下命令一定是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get-ExecutionPolicy</span><br><span class="line"><span class="comment"># restricted</span></span><br></pre></td></tr></table></figure><p>这时候，先使用管理员身份打开<code>Windows Powershell</code>然后输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br><span class="line">然后输入y回车</span><br></pre></td></tr></table></figure><p>合并文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify js/build/main.js -o js/dist/bundle.js</span><br></pre></td></tr></table></figure><p><code>index.html</code>导入js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/src/dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存模型</title>
      <link href="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><h3 id="硬件的内存模型"><a href="#硬件的内存模型" class="headerlink" title="硬件的内存模型"></a>硬件的内存模型</h3><p>在讲java内存模型之前，先来看看硬件的内存模型</p><img src="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E5%8D%95CPU.png" class title="单CPU"><p>CPU的处理速度和内存的读写不是一个数量级的，所以在CPU和主存之间加上了一层缓存</p><p>这种结构在单CPU的时候，处理的很好</p><p>但是当多CPU的时候，</p><img src="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E5%A4%9ACPU.png" class title="多CPU"><p>这时候就会出现缓存一致性问题</p><p>当CPUA读取主存中的数据之后，对其进行修改，在将其刷新回主存的之前，CPUB读取主存中的数据，对其进行修改，将其刷新回主存，这时候CPUA也同时将其修改后的数据刷新回主存，那么这个数据到底以哪一个为准，这个就是缓存一致性问题</p><img src="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98.png" class title="缓存一致性问题"><p>针对这个问题，就出现了缓存一致性协议</p><p>1、窥探性</p><p>2、目录型</p><p>有了这一层协议，在硬件层面，就解决了缓存一致性问题，即汇编语言能够运行在一个具有缓存一致性的内存视图中</p><h3 id="Java的内存模型"><a href="#Java的内存模型" class="headerlink" title="Java的内存模型"></a>Java的内存模型</h3><p>设计编程语言的内存模型是为了能够该语言也可以拥有一个内存一致性的视图，于是在硬件内存模型之上，就有了高级语言的内存模型</p><p>Java内存模型就屏蔽了各种硬件的操作系统的内存差异，使得java可以正常的运行在各大操作系统上</p><img src="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" class title="java内存模型"><p><strong>虚拟机栈</strong>也可以叫做java方法栈，该栈中存放8大基础类型的数据和对象的引用</p><p><strong>堆</strong>中存放着所有的java对象</p><p>内存读写指令</p><table><thead><tr><th align="center">作用于主存</th><th align="center">作用于工作内存</th></tr></thead><tbody><tr><td align="center">lock：锁定</td><td align="center">load：加载数据</td></tr><tr><td align="center">unlock：解锁</td><td align="center">store：存储数据</td></tr><tr><td align="center">read：读取</td><td align="center">use：使用数据</td></tr><tr><td align="center">write：写入</td><td align="center">assign：赋值</td></tr></tbody></table><img src="/javaEE/JVM/2022/03/12/JVM-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E7%90%86%E6%83%B3%E7%8A%B6%E6%80%81.png" class title="理想状态"><p>上面的图只是一种理想状态，会出现以下两种问题</p><p>1、可见性</p><p>当线程A将本地内存中的数据修改后，刷新回主存后，线程B直接使用本地内存中的数据，没有使用刷新后的数据，这就是可见性问题</p><p>2、原子性</p><p>当线程A修改了数据，还没刷新回主存，线程B也修改了数据，也要刷新回主存，那么这时候主存中应该刷新成哪个线程修改后的值呢</p><p>线程通信之间的同步问题，当多个线程在并发操作同一个数据的时候，会引发很多的问题，这些问题被总结为并发三要素</p><p>1、可见性</p><p>2、原子性</p><p>3、有序性</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当一个线程修改了共享变量的值之后，其他所有使用该变量的线程都应该立刻得知此修改</p><p>两层含义</p><blockquote><p>第一种含义</p></blockquote><p>线程A修改了数据X，线程B需要使用到最新的数据X（这是线程B没有重新读取主存导致的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台不会返回响应码，而是一直死循环。</p><p>当<code>thread1</code>开始循环的时候，本地内存中<code>a=1</code>，当<code>thread2</code>修改了a为0的时候，<code>thread1</code>并不知道，而是一直使用着<code>a=1</code>，所以会一直循环</p><p>两种解决方法</p><p><strong>1、将<code>a</code>变量加一个修饰词<code>volatile</code></strong></p><p>如果一个共享变量被<code>volatile</code>修饰，那么该共享变量被修改后，将会直接写入主存，当其他线程读取该共享变量的时候，也会直接从主存中读取</p><p><strong>2、使用<code>synchronized</code>包裹，并使用该数据</strong></p><p><code>synchronized</code>块中读写变量会隐式调用<code>lock</code>和<code>unlock</code>指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> b = a + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二层含义</p></blockquote><p>线程B需要读取到线程A修改后的数据x，但是因为指令重排，在线程A未修改数据x之前，线程B读到了数据x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> b =<span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>;<span class="comment">//1</span></span><br><span class="line">            b = <span class="keyword">true</span>;<span class="comment">//2</span></span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;<span class="comment">//3</span></span><br><span class="line">                <span class="keyword">int</span> x = a;<span class="comment">// 4  // 这个x一定是1吗?</span></span><br><span class="line">                System.out.println(x); <span class="comment">// 5</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在硬件内存模型的时候就说过，在底层会存在指令重排的情况，</p><p>我们觉得的顺序应该是</p><p>1-&gt;2-&gt;3-&gt;4</p><p>但是在编译后顺序有可能就变成了</p><p>2-&gt;3-&gt;4-&gt;1</p><p>这也是一种可见性的问题</p><p>同样的这里我们也可以使用上述两种方法来解决这种问题</p><p><code>volatile</code>是禁止了当前变量与之前的代码语句进行指令重排</p><p><code>synchronized</code>就是将两段代码分别捆绑在一起，那么无论在<code>thread1</code>中怎么指令重排，都不会影响<code>thread2</code>对于变量的读取</p><h5 id="Happens-Before原则"><a href="#Happens-Before原则" class="headerlink" title="Happens-Before原则"></a>Happens-Before原则</h5><p>我们平时很少遇到可见性问题，因为我们站在了前人的肩膀上，设计内存模型的前辈已经帮我们解决了此问题，这就是Happens-Before原则</p><p>定义：对于两个操作A和操作B，这两个操作可以在不同的线程中执行，如果A Happens-Before B（即A先于B执行），那么可以保证当A操作执行完后，A操作的执行结果对B操作是可见的</p><ol><li>程序顺序原则</li><li>锁定原则</li><li>volatile原则</li><li>线程启动原则</li><li>线程结束原则</li><li>中断规则</li><li>终结器规则</li><li>传递性原则</li></ol><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>一个操作要么全部执行成功，要么全部执行失败</p><p>1、单指令原子操作</p><p>2、利用锁的组合指令原子操作</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>指令重排在单线程环境下不会出现什么问题，但是在多线程环境下，可能导致有的代码执行顺序修改后可能会导致与顺序执行的结果不同</p><p>这里可以使用<code>Happens-Before原则</code>来解决问题</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-类加载器</title>
      <link href="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>类的加载过程分三个阶段</p><p>类的加载 &#x3D;&#x3D;》类的链接 &#x3D;&#x3D;》类的初始化</p><img src="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" class title="类加载过程"><ul><li><strong>类的加载：</strong>将Class文件字节码加载到内存中，并将这些静态数据转换为方法区的运行时数据结构，然后在堆中（方法区）生成一个代表该类的Class对象，作为类数据的访问入口，可以使用反射获取该类的所有信息。</li><li><strong>类的链接：</strong>将Java类的二进制代码合并到JVM中<ul><li>验证：确保加载的类符合JVM规范</li><li>准备：为静态变量分配内存并设置成员变量的默认值</li><li>解析：JVM常量池内的符号引用（常量名）替换为直接引用（地址）的过程</li></ul></li><li><strong>类的初始化：</strong>执行类构造器&lt; clinit &gt;()方法的过程<ul><li>类构造器方法是由编译期按顺序收集类中所有类变量的赋值动作和静态代码块中的语句合并而成的（类构造器是构造类信息的，不是对象构造器）</li><li>当初始化一个类的时候，如果其父类为初始化，则先初始化其父类</li><li>JVM会保证类构造器在多线程环境下被正确加锁</li></ul></li></ul><p>类的链接为黑盒实现</p><h4 id="类的主动引用（一定会发生类的初始化）"><a href="#类的主动引用（一定会发生类的初始化）" class="headerlink" title="类的主动引用（一定会发生类的初始化）"></a>类的主动引用（一定会发生类的初始化）</h4><ul><li>当JVM启动的时候，先初始化main方法所在的类</li><li>new 一个类的对象</li><li>调用该类的静态成员（除了final）和静态方法</li><li>使用反射对其类进行反射调用</li><li>当初始化一个类时，其父类若没有初始化，则先初始化其父类</li></ul><h4 id="类的被动引用（不会发生类的初始化）"><a href="#类的被动引用（不会发生类的初始化）" class="headerlink" title="类的被动引用（不会发生类的初始化）"></a>类的被动引用（不会发生类的初始化）</h4><ul><li>当访问一个静态域的时候，只有真正声明该域的类才会被初始化。举个栗子：当通过子类调用父类的静态变量，该子类是不会被初始化的</li><li>通过数组定义类引用，不会导致初始化</li><li>引用常量不会导致初始化</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>市面上有三种JVM，不同的JVM对类加载器的实现是不同的，我们主要学习的并且使用的是Sun公司的HotSpot</p><img src="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E4%B8%89%E7%A7%8DJVM.png" class title="三种JVM"><p>类加载器的作用就是将类（class）装进内存的</p><img src="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A81.png" class title="类加载器1"><p>JVM规定了以下类型的加载器</p><img src="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" class title="类加载器"><p><strong>引导类加载器：</strong>用<strong>C++<strong>编写的，是JVM自带的类加载器，</strong>负责java平台的核心库</strong>，用来装载核心类库，该加载器无法直接获取（获取的时候会是null）</p><p><strong>扩展类加载器（ExtClassLoader）：</strong>负责**<JAVA_HOME>&#x2F;lib&#x2F;etc**目录下的jar包户或者 -d java.ext.dirs指定目录下的jar包装入工作库</JAVA_HOME></p><p><strong>系统类加载器（AppClassLoader）：</strong>负责<strong>java -classpath</strong>或者<strong>java.class.path</strong>指定目录下的类与jar包</p><p><strong>用户加载器（User ClassLoader）：</strong>用户自定义的加载器</p><p>扩展类加载器、系统类加载器、用户加载器都是继承自<code>java.lang.ClassLoader</code></p><p>JVM规范：每个类加载器都有属于自己的命名空间</p><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>检查顺序从下至上，加载顺序从顶至下</p><p>举个栗子：我写了一个Student类，我要加载它需要经过以下过程</p><ol><li>先将该任务委托给AppClassLoader</li><li>AppClassLoader很懒，它不想加载，将任务向上委托给ExtClassLoader</li><li>ExtClassLoader也很懒，它不想加载，继续将任务向上委托给BootStrapClassLoader</li><li>BootStrapClassLoader没法偷懒了，只能自己加载，但是在自己管理的lib目录下并没有找到该类，只能将任务再次交给ExtClassLoader去加载</li><li>那ExtClassLoader没法偷懒了，只能在自己管理的ext目录下找该类，但是也没有找到，只能将任务继续向下转交给AppClassLoader</li><li>AppClassLoader不得不自己去尝试加载该类，于是加载成功</li></ol><blockquote><p>既然最后还是AppClassLoader去加载Student类何必绕一个大圈子呢？</p></blockquote><p>这是为了防止原始类被用户写的类所覆盖。</p><p>再举个栗子：我自己写了一个String类，我要加载它会经历以下过程</p><ol><li>先将该任务委托给AppClassLoader</li><li>ExtClassLoader也很懒，它不想加载，继续将任务向上委托给BootStrapClassLoader</li><li>BootStrapClassLoader没法偷懒了，只能自己加载，于是在自己管理的lib目录下找到该类并加载，将加载结果向下一直传递到用户</li></ol><h3 id="对双亲委派模型的破坏"><a href="#对双亲委派模型的破坏" class="headerlink" title="对双亲委派模型的破坏"></a>对双亲委派模型的破坏</h3><p>1、自定义类加载器</p><p>我们写一个类继承<code>java.lang.ClassLoader</code>，重写loadClass方法，双亲委派的逻辑就在这个方法中，但是我自定义的类加载器可以不这么写，也就破坏了双亲委派。在jdk1.2之后，jdk增加了一个<code>findClass</code>方法提供给上层重写，也就有效地防止了双亲委派被破坏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">    ClassLoader myClassLoader = <span class="keyword">new</span> ClassLoader()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                String fileName = name.substring(name.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>)+<span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                InputStream is = getClass().getResourceAsStream(fileName);</span><br><span class="line">                <span class="keyword">if</span>(is==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">                is.read(buffer);</span><br><span class="line">                <span class="keyword">return</span> defineClass(name,buffer,<span class="number">0</span>, buffer.length);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Object o = myClassLoader.loadClass(<span class="string">&quot;com.test.A&quot;</span>).newInstance();</span><br><span class="line">    System.out.println(o.getClass());</span><br><span class="line">    System.out.println(o <span class="keyword">instanceof</span> com.test.A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class com.test.A</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这不仅破坏了双亲委派，并且证明了每个类加载器都有自己的命名空间</p><p>2、SPI（Service Provider Interface）服务发现机制</p><p>JDK中定义了JDBC的接口，规范各大厂家。对于JDK中的接口，使用的是<code>BootstrapClassLoader</code>但是对于各大厂家的实现类，使用的是<code>ApplClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Driver <span class="title">getDriver</span><span class="params">(String url)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;DriverManager.getDriver(\&quot;&quot;</span> + url + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ensureDriversInitialized();</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; callerClass = Reflection.getCallerClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Walk through the loaded registeredDrivers attempting to locate someone</span></span><br><span class="line">    <span class="comment">// who understands the given URL.</span></span><br><span class="line">    <span class="keyword">for</span> (DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">        <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">        <span class="comment">// skip it.</span></span><br><span class="line">        <span class="keyword">if</span> (isDriverAllowed(aDriver.driver, callerClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (aDriver.driver.acceptsURL(url)) &#123;</span><br><span class="line">                    <span class="comment">// Success!</span></span><br><span class="line">                    println(<span class="string">&quot;getDriver returning &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                <span class="keyword">return</span> (aDriver.driver);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException sqe) &#123;</span><br><span class="line">                <span class="comment">// Drop through and try the next driver.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            println(<span class="string">&quot;    skipping: &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;getDriver: no suitable driver&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;No suitable driver&quot;</span>, <span class="string">&quot;08001&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/javaEE/JVM/2022/03/11/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/spi.png" class title="spi"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前线程的ClassLoader默认为AppClassLoader</span></span><br><span class="line">    ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(Reflection.getCallerClass(), service, cl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、热部署</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-差分数组</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h2><p>该技巧和前缀和数组一样都是用在<strong>数组</strong>上的，</p><p>前缀和数组是用来简化 任意区间的元素之和的，</p><p>差分数组是用来简化 频繁在任意区间减去某个值或者在任意区间加上某个值，最后输出最后的数组结果的</p><p>比如，给你一个数组<code>nums[2,4,1,45,21,54,12,43]</code>，我需要先将<code>[2,4]</code>都加3，再将<code>[3,6]</code>都减1，再…..，最后输出最后的数组结果</p><p>如果没学过差分数组，那么应该是使用for循环将范围内的数都进行操作，最后输出数组，</p><p>对<code>nums</code>的操作十分频繁，这样的效率十分低下</p><p>这里我们就使用差分数组来提高我们的效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    diff[i] = nums[i] - nums[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84.png" class title="差分数组"><p>当<code>i!=0</code>的时候<code>diff[i]</code>代表<code>nums[i]-nums[i-1]</code>的值，即当前值与前一个值的差</p><p>那有了这个差分数组，我们怎么将数组还原呢？</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E5%8F%8D%E6%8E%A8%E6%95%B0%E7%BB%84-process01.png" class title="差分数组反推数组-process01"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E5%8F%8D%E6%8E%A8%E6%95%B0%E7%BB%84-process02.png" class title="差分数组反推数组-process02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E5%8F%8D%E6%8E%A8%E6%95%B0%E7%BB%84-process03.png" class title="差分数组反推数组-process03"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E5%8F%8D%E6%8E%A8%E6%95%B0%E7%BB%84-process04.png" class title="差分数组反推数组-process04"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/11/%E7%AE%97%E6%B3%95-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E5%8F%8D%E6%8E%A8%E6%95%B0%E7%BB%84-process05.png" class title="差分数组反推数组-process05"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line">res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">    res[i] = res[i-<span class="number">1</span>] + diff[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>diff</code>的还原是先new一个新的数组来存放最后的结果，对于0之后的元素，<code>res[i]</code>等于前一个元素加上当前索引的<code>diff</code></p><p>如果我要将<code>[i,j]</code>区间加2，那么就将<code>diff[i]+=2;diff[j+1]-=2</code>即可</p><p>我将<code>diff[i]+=2</code>，即达到<code>res[i]</code>到最后都会被加上2的效果</p><p>我将<code>diff[j+1]-=2</code>，即达到<code>res[j+1]</code>之后，会将前面的加2抵消，所以<code>j</code>之后的元素就不会被影响了</p><p>我们来和之前的那道前缀和数组一样，抽象出来一个类来处理数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diff</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] diff;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Diff</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getResult()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以先自己写一下</p><p>这是实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diff</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] diff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Diff</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        diff[left] += step;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; diff.length - <span class="number">1</span>) &#123;</span><br><span class="line">            diff[right + <span class="number">1</span>] -= step;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getResult() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line">        result[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">            result[i] = result[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>接下来就要实践出真知，来看一下这道力扣题，这道题在力扣上是plus会员才可以查看，这里直接将题目简述给大家</p><h4 id="力扣370：区间加法"><a href="#力扣370：区间加法" class="headerlink" title="力扣370：区间加法"></a><a href="https://leetcode-cn.com/problems/range-addition/">力扣370：区间加法</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 370.区间加法</span></span><br><span class="line">假设你有一个长度为 n 的数组nums，初始情况下所有的数字均为 0，你将会被给出 k 个更新的操作。</span><br><span class="line">其中，每个操作会被表示为一个三元组：[left,right,step]，你需要该区间[left,right] (包括left和right)增加step。</span><br><span class="line">请你返回 k 次操作后的数组。</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">len=5,updates=[[1,3,3],[2,4,-5],[0,3,4]]</span><br><span class="line">原数组变为 [0,0,0,0,0]</span><br><span class="line">原数组变为 [0,3,3,3,0]</span><br><span class="line">原数组变为 [0,3,-2,-2,-5]</span><br><span class="line">原数组变为 [4,7,2,2,-5]</span><br><span class="line">result: [4,7,2,2,-5]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法签名</span></span><br><span class="line">public int[] getModifiedArray(int[] nums, int[][] updates) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要懂了上面的<code>Diff</code>类的写法，这题轻轻松松拿下！</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getModifiedArray(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[][] updates) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">        diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] update : updates) &#123;</span><br><span class="line">        diff[update[<span class="number">0</span>]] += update[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (update[<span class="number">1</span>] + <span class="number">1</span> &lt; diff.length) &#123;</span><br><span class="line">            diff[update[<span class="number">1</span>] + <span class="number">1</span>] -= update[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line">    result[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">        result[i] = result[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然我们之前写了<code>Diff</code>那么我们就可以使用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getModifiedArray1(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[][] updates) &#123;</span><br><span class="line">    Diff diff = <span class="keyword">new</span> Diff(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] update : updates) &#123;</span><br><span class="line">        diff.increase(update[<span class="number">0</span>], update[<span class="number">1</span>], update[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> diff.getResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="力扣1109：航班预订统计"><a href="#力扣1109：航班预订统计" class="headerlink" title="力扣1109：航班预订统计"></a><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">力扣1109：航班预订统计</a></h4><p>本质是一样的，只不过这边需要注意一下索引和编号的对应关系，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] corpFlightBookings(<span class="keyword">int</span>[][] bookings, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] booking : bookings) &#123;</span><br><span class="line">            diff[booking[<span class="number">0</span>] - <span class="number">1</span>] += booking[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (booking[<span class="number">1</span>] &lt; n) &#123;</span><br><span class="line">                diff[booking[<span class="number">1</span>]] -= booking[<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[diff.length];</span><br><span class="line">        answer[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; answer.length; i++) &#123;</span><br><span class="line">            answer[i] = answer[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信学完这些，你对差分数组的理解也比较深刻了</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-前缀和数组</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/10/%E7%AE%97%E6%B3%95-%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/10/%E7%AE%97%E6%B3%95-%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和数组"><a href="#前缀和数组" class="headerlink" title="前缀和数组"></a>前缀和数组</h2><h3 id="技巧说明"><a href="#技巧说明" class="headerlink" title="技巧说明"></a>技巧说明</h3><p>此技巧主要用于频繁的范围求和</p><h3 id="栗一"><a href="#栗一" class="headerlink" title="栗一"></a>栗一</h3><p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">力扣303：区域和检索 - 数组不可变</a></p><p>这是一道很典型的使用前缀和数组的题目。</p><p>对于频繁计算数组的一个范围的和，学没过前缀和数组的会这样做，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line">    NumArray(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span>[] sums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left ;i &lt;= right;i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样确实可以达到效果，但是频繁这样操作，效率不是很高。</p><p>所以学过前缀和的会这么写从而提高效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] <span class="function">preSum</span></span><br><span class="line"><span class="function">        <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">int</span>[] preSum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length ; i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i-<span class="number">1</span>] + nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span>[] sums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[right+<span class="number">1</span>] - preSum[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来分析一下这个<code>preSum</code></p><p>它的长度是原数组的长度加一</p><p><code>preSum[0]</code>置为<code>nums</code>数组前0个的和</p><p><code>preSum[1]</code>置为<code>nums</code>数组前1个的和</p><p><code>preSum[2]</code>置为<code>nums</code>数组前2个的和</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/10/%E7%AE%97%E6%B3%95-%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84%E7%A4%BA%E4%BE%8B.png" class title="前缀和数组示例"><p>所以我如果需要<code>[0,1]</code>区间的和，则返回<code>preSum[2]-preSum[0]</code>（前2个数的和减去前0个数的和）</p><p>所以我如果需要<code>[3,5]</code>区间的和，则返回<code>preSum[6]-preSum[3]</code>（前6个数的和减去前3个数的和）</p><p>所以这道力扣303题的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] preSum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        preSum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            preSum[i]=preSum[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[right+<span class="number">1</span>]-preSum[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>小试身手：初三一班的数学期末成绩(满分120分)出来了，现将成绩乱序列表发于你，请你统计在<code>[min,max]</code>范围内的学生人数</p><p>方法签名：<code>public int scoreRange(List&lt;Integer&gt; scores, int fullMarks, int min, int max)</code></p><p><strong>在学前缀和数组之前</strong></p><p>先将scores按升序排序</p><p>然后使用二分搜索两个端点，将长度返回</p><p>这样的思路确实没毛病，但是如果频繁需要查询，</p><p>就算是强如二分查找，也会消耗很多资源</p><p><strong>学了前缀和数组之后</strong></p><p>既然学了前缀和数组，我们就使用该技巧去优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成绩范围内的学生数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scores 学生成绩列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fullMarks 这门成绩的满分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 满足成绩区间的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scoreRange</span><span class="params">(List&lt;Integer&gt; scores, <span class="keyword">int</span> fullMarks, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[fullMarks + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] preSums = <span class="keyword">new</span> <span class="keyword">int</span>[fullMarks + <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// counts[i]的意思是分数为i的学生有几个人</span></span><br><span class="line">    <span class="keyword">for</span> (Integer score : scores) &#123;</span><br><span class="line">        counts[score]++;</span><br><span class="line">    &#125;</span><br><span class="line">    preSums[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= counts.length; i++) &#123;</span><br><span class="line">        preSums[i] = preSums[i-<span class="number">1</span>] + counts[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 也就是counts在区间[min,max]范围和</span></span><br><span class="line">    <span class="keyword">return</span> preSums[max + <span class="number">1</span>] - preSums[min];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栗二"><a href="#栗二" class="headerlink" title="栗二"></a>栗二</h3><p>现在我们来解决<a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/">力扣304：二维区域和检索 - 矩阵不可变</a></p><p>本质和一维的时候是一样的只不过变成了二维，需要预处理一个二维前缀和数组而已</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] preSums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        preSums = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length][matrix[<span class="number">0</span>].length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= matrix[i].length; j++) &#123;</span><br><span class="line">                preSums[i][j] = preSums[i][j-<span class="number">1</span>] + matrix[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row1; i &lt;= row2; i++) &#123;</span><br><span class="line">            sum += preSums[i][col2+<span class="number">1</span>]-preSums[i][col1];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是另一种解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义：preSum[i][j] 记录 matrix 中子矩阵 [0, 0, i-1, j-1] 的元素和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] preSum;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 构造前缀和矩阵</span></span><br><span class="line">        preSum = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 计算每个矩阵 [0, 0, i, j] 的元素和</span></span><br><span class="line">                preSum[i][j] = preSum[i-<span class="number">1</span>][j] + preSum[i][j-<span class="number">1</span>] + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] - preSum[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算子矩阵 [x1, y1, x2, y2] 的元素和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 目标矩阵之和由四个相邻矩阵运算获得</span></span><br><span class="line">        <span class="keyword">return</span> preSum[x2+<span class="number">1</span>][y2+<span class="number">1</span>] - preSum[x1][y2+<span class="number">1</span>] - preSum[x2+<span class="number">1</span>][y1] + preSum[x1][y1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【25-Hard】以k个节点为一组逆转单链表</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="以k个节点为一组逆转单链表"><a href="#以k个节点为一组逆转单链表" class="headerlink" title="以k个节点为一组逆转单链表"></a>以k个节点为一组逆转单链表</h2><p>给你一个链表，每 <em>k</em> 个节点一组进行翻转，请你返回翻转后的链表。</p><p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 <em>k</em> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p><strong>进阶：</strong></p><ul><li>你可以设计一个只使用常数额外空间的算法来解决此问题吗？</li><li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际进行节点交换。</li></ul><p><strong>示例 1：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/reverse_ex1.jpg" class title="img"><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="string">[2,1,4,3,5]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/reverse_ex2.jpg" class title="img"><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="string">[3,2,1,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="string">[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="comment">[1]</span>, k = 1</span><br><span class="line">输出：<span class="comment">[1]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中节点的数量在范围 <code>sz</code> 内</li><li><code>1 &lt;= sz &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li><li><code>1 &lt;= k &lt;= sz</code></li></ul><p>Related Topics</p><ul><li>递归</li><li>链表</li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>首先我们来分析一下这道题目，题目不难理解，就是以k个节点为一组逆转单链表，我们使用递归的思想来思考一下这道题</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process01.png" class title="分析-process01"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process02.png" class title="分析-process02"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process03.png" class title="分析-process03"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process04.png" class title="分析-process04"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process05.png" class title="分析-process05"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process06.png" class title="分析-process06"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/08/%E3%80%9025-Hard%E3%80%91%E4%BB%A5k%E4%B8%AA%E8%8A%82%E7%82%B9%E4%B8%BA%E4%B8%80%E7%BB%84%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%88%86%E6%9E%90-process07.png" class title="分析-process07"><p>首先需要一个逆转前 k 个节点的方法</p><p><strong>方法签名：</strong><code>public ListNode reverseKNode(ListNode head,int k)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ListNode processor;</span><br><span class="line"><span class="comment">// 这里的k要保证不超过链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">        processor = head.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode node = reverseKNode(head.next, k-<span class="number">1</span>);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = processor;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上写出逆转<code>head</code>到<code>end</code>之间的节点</p><p><strong>方法签名：</strong><code>public ListNode reverseKNode(ListNode head,ListNode end)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ListNode processor;</span><br><span class="line"><span class="comment">// [head,end)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head,ListNode end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head.next == end)&#123;</span><br><span class="line">        processor = head.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode node = reverseKNode(head.next, end);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = processor;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是成组逆转单链表</p><p><strong>方法签名：</strong><code>public ListNode reverseKGroup(ListNode head, int k)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode node = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = reverseKNode(head, k, node);</span><br><span class="line">    head.next = reverseKGroup(node, k);</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head, <span class="keyword">int</span> k, ListNode tail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = reverseKNode(head.next, k - <span class="number">1</span>, tail);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = tail;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>首先需要一个逆转前n个节点的方法</p><p><strong>方法签名：</strong><code>public ListNode reverseKNode(ListNode head,int k)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    ListNode suffix;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; k-- != <span class="number">0</span>) &#123;</span><br><span class="line">        suffix = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上写出迭代逆转<code>head</code>到<code>end</code>之间的节点</p><p><strong>方法签名：</strong><code>public ListNode reverseKNode(ListNode head,ListNode end)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head,ListNode end)</span></span>&#123;</span><br><span class="line">    ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    ListNode suffix;</span><br><span class="line">    <span class="keyword">while</span>(cur != end)&#123;</span><br><span class="line">        suffix = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是成组逆转单链表</p><p><strong>方法签名：</strong><code>public ListNode reverseKGroup(ListNode head, int k)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode end = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果长度不足k，则直接返回头部，不用逆转</span></span><br><span class="line">        <span class="keyword">if</span> (end == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        end = end.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = reverseKNode(head, k);</span><br><span class="line">    head.next = reverseKGroup(end, k);</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKNode</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    ListNode suffix;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; k-- != <span class="number">0</span>) &#123;</span><br><span class="line">        suffix = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        prev = cur;</span><br><span class="line">        cur = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-逆转单链表</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="逆转单链表"><a href="#逆转单链表" class="headerlink" title="逆转单链表"></a>逆转单链表</h2><p>逆转单链表，这是一个经典的单链表问题</p><p>本节不仅讲如何迭代去逆转单链表</p><p>还讲如何使用递归去逆转一部分单链表或者整个单链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">力扣206：反转链表</a></p><p><strong>迭代实现</strong></p><p>1、初始化三个节点<code>prev = null</code>（作为前置节点）、<code>cur = head</code>（作为当前节点）、<code>suffix</code>（作为后置节点）</p><p>2、开始循环条件为<code>cur!=null</code>的循环，cur将一直走到最后一个节点的下一个节点为null的地方</p><p>3、先将<code>suffix</code>指向cur的next，然后将<code>cur</code>的next指向前一个指针<code>prev</code>，然后<code>prev</code>变为<code>cur</code>，<code>cur</code>变为<code>suffix</code></p><p>4、返回<code>prev</code>节点</p><p>初始化</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process01.png" class title="迭代逆转单链表-process01"><p>开始循环</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process02.png" class title="迭代逆转单链表-process02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process03.png" class title="迭代逆转单链表-process03"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process04.png" class title="迭代逆转单链表-process04"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process05.png" class title="迭代逆转单链表-process05"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process06.png" class title="迭代逆转单链表-process06"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/08/%E7%AE%97%E6%B3%95-%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/%E8%BF%AD%E4%BB%A3%E9%80%86%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8-process07.png" class title="迭代逆转单链表-process07"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        ListNode suffix;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suffix = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = suffix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归实现</strong></p><p>我们的 <code>reverseList</code> 函数定义是这样的：</p><p><strong>输入一个节点 <code>head</code>，将「以 <code>head</code> 为起点」的链表反转，并返回反转之后的头结点</strong>。</p><p>先递归到源链表的最后一个节点</p><p>然后当前的<code>head</code>节点就是需要加入到反转好的链表中，</p><p><code>head</code>的<code>next</code>指针是逆转后的链表的最后一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newHead = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转前n个节点"><a href="#反转前n个节点" class="headerlink" title="反转前n个节点"></a>反转前n个节点</h3><p>n&lt;&#x3D;链表长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ListNode end = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            end = head.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = reverseList(head.next,n-<span class="number">1</span>);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = end;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转指定索引范围的链表"><a href="#反转指定索引范围的链表" class="headerlink" title="反转指定索引范围的链表"></a>反转指定索引范围的链表</h3><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">力扣92：反转链表 II</a></p><p>反转<code>left</code>到<code>right</code>部分的链表</p><p>注意：这里的 <code>left</code> 是从 1 开始的</p><p>如果当<code>left</code>为1，那就回到上面的那个问题了</p><p>所以只需要在<code>reverseBetween</code>中不断递归直到<code>left</code>为 1 的时候，<code>right</code>也就变成了区间长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ListNode end = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> reverseList(head, right);</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = reverseBetween(head.next, left - <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            end = head.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = reverseList(head.next, n - <span class="number">1</span>);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = end;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-解决单链表问题</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/07/%E7%AE%97%E6%B3%95-%E8%A7%A3%E5%86%B3%E5%8D%95%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/07/%E7%AE%97%E6%B3%95-%E8%A7%A3%E5%86%B3%E5%8D%95%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>对于单链表的操作，有很多技巧性的东西</p><p>下面我们使用六道题来以题明技巧</p><h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">力扣21：合并两个有序链表</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里使用了一个虚节点来充当头部存放节点</span></span><br><span class="line">        ListNode virtual = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = virtual;</span><br><span class="line">        ListNode l1 = list1;</span><br><span class="line">        ListNode l2 = list2;</span><br><span class="line">        <span class="comment">// 这里循环退出条件是两者都不为null，因为其中只要有一者为null，A处代码就会爆空指针异常</span></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将较小的那一个放入virtual链表中</span></span><br><span class="line">            <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;<span class="comment">// A</span></span><br><span class="line">                temp.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里是为了防止出现两者长度不一致的情况，这里不需要遍历，直接将temp.next指向还不为空的那个指针</span></span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后返回虚节点的next</span></span><br><span class="line">        <span class="keyword">return</span> virtual.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并-k-个有序链表"><a href="#合并-k-个有序链表" class="headerlink" title="合并 k 个有序链表"></a>合并 k 个有序链表</h3><p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">力扣23：合并k个有序链表</a></p><p>使用一个动态数组存储所有的链表的头结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        ListNode virtual = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = virtual;</span><br><span class="line">        List&lt;ListNode&gt; nodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ListNode list : lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">                nodes.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!nodes.isEmpty()) &#123;</span><br><span class="line">            nodes.sort((a, b) -&gt; a.val - b.val);</span><br><span class="line">            temp.next = nodes.get(<span class="number">0</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (nodes.get(<span class="number">0</span>).next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                nodes.remove(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.set(<span class="number">0</span>, nodes.get(<span class="number">0</span>).next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> virtual.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的倒数第-k-个节点"><a href="#单链表的倒数第-k-个节点" class="headerlink" title="单链表的倒数第 k 个节点"></a>单链表的倒数第 k 个节点</h3><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">力扣19：删除倒数第k个节点</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="comment">// fast指针先走n步</span></span><br><span class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果fast变为了null说明是走到了尾部，则说明倒数第n个节点就是头结点</span></span><br><span class="line">        <span class="comment">// 删除头结点，那就是直接返回头结点的下一个节点作为头结点</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找单链表的中点"><a href="#寻找单链表的中点" class="headerlink" title="寻找单链表的中点"></a>寻找单链表的中点</h3><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">力扣876：寻找单链表的中点</a></p><p>使用快慢指针法，<code>slow</code>走一步，<code>fast</code>走两步，当fast走到最后的时候，<code>slow</code>自然就在中间了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当单链表节点个数为奇数的时候，slow指向的是正中间的位置</p><p>当单链表节点个数为偶数的时候，slow指向的是中间靠右的位置</p><h3 id="判断单链表是否包含环"><a href="#判断单链表是否包含环" class="headerlink" title="判断单链表是否包含环"></a>判断单链表是否包含环</h3><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/">力扣141：判断单链表是否成环</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进阶：找到成环的起点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断两个单链表是否相交并找出交点"><a href="#判断两个单链表是否相交并找出交点" class="headerlink" title="判断两个单链表是否相交并找出交点"></a>判断两个单链表是否相交并找出交点</h3><p>1、将第一条链表的尾部的next指向第二条链表的头部，然后返回成环的那个起点</p><p>注意：此法只是一个思路，但是力扣中这道题的校验是不允许修改原来的链表的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode ha = headA;</span><br><span class="line">        <span class="keyword">while</span> (ha.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ha = ha.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ha.next = headB;</span><br><span class="line">        <span class="keyword">return</span> detectCycle(headA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用技巧直接找到相交点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        ListNode ha = headA;</span><br><span class="line">        ListNode hb = headB;</span><br><span class="line">        <span class="keyword">while</span> (ha != hb) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ha == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ha = headB;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ha = ha.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                hb = headA;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hb = hb.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-原型和原型链</title>
      <link href="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><code>prototype</code></h3><p>在JavaScript中，所有的函数都有一个prototype属性，该属性指向该函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;kerwin&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.name);<span class="comment">// kerwin</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.name);<span class="comment">// kerwin</span></span><br></pre></td></tr></table></figure><p>函数的prototype指向的就是对象原型，这个对象是调用构造函数时创建实例的原型对象，就是说<code>p1</code>和<code>p2</code>的原型对象是同一个</p><img src="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7.png" class title="函数的原型属性"><h3 id="proto"><a href="#proto" class="headerlink" title="_proto_"></a><code>_proto_</code></h3><p>每个对象都会有一个属性，叫做<code>_proto_</code>，该属性指向该对象的原型对象，也就是构造函数的原型属性指向的对象</p><img src="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7.png" class title="对象的原型属性"><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h3><p>每个原型都有一个<code>constructor</code>属性，指向该对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype._proto_ ==== Person);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person._proto_ === Person.prototype);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 在person中找不到constructor属性，所以向上在原型中找到该属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person.prototype.constructor);</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === person._proto_.constructor)</span><br></pre></td></tr></table></figure><img src="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84constructor%E5%B1%9E%E6%80%A7.png" class title="原型对象的constructor属性"><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>当读取实例中的属性的时候，如果不存在该属性，则会去查找该对象的原型对象中是否存在该属性，如果不存在，则一直向上查找，一直找到最顶部为止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;zhima&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">&#x27;kerwin&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name);<span class="comment">// kerwin</span></span><br><span class="line"><span class="comment">// 删除person对象中的name属性</span></span><br><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line"><span class="built_in">console</span>.log(p1.name);<span class="comment">// zhima </span></span><br></pre></td></tr></table></figure><p>可以看到p1的<code>name</code>属性</p><p>显示输出了自身的属性值<code>kerwin</code></p><p>当删除了对象中name属性之后，输出的是原型中的数据</p><p>原因是当对象内部不存在该属性的时候，会向上在原型中找属性，所以会输出<code>kerwin</code></p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>原型是随着使用构造函数创建对象时，生成的一个对象。</p><p>那么原型也是一个对象，既然是一个对象，那么它一定也有原型</p><p>它的原型其实是通过Object对象的构造函数创建的</p><img src="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%8E%9F%E5%9E%8B.png" class title="原型的原型"><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>简单回顾一下之前的知识点，</p><p><code>prototype</code>是每个函数的一个属性，指向原型对象</p><p><code>_proto_</code>是每一个对象的一个属性，指向原型对象</p><p><code>constructor</code>是每一个原型对象的一个属性，指向其绑定的构造函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎么样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层次递进，就构成了原型和实例的链条，这就是所谓的原型链的概念                                                              ----------《摘自JavaScript高级程序设计》</span><br></pre></td></tr></table></figure><p>那Object.prototype的原型是什么呢？是null</p><img src="/%E5%89%8D%E7%AB%AF/JavaScript/2022/03/05/JavaScript-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/Object%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%8E%9F%E5%9E%8B.png" class title="Object原型的原型"><p>图中蓝色的线就是原型链</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-滑动窗口</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口的思路非常简单</p><p>就是维护一个窗口</p><p>不断滑动</p><p>然后更新答案</p><h4 id="滑动窗口的骨架"><a href="#滑动窗口的骨架" class="headerlink" title="滑动窗口的骨架"></a>滑动窗口的骨架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slidingWindow</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> now;</span><br><span class="line">        Map&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s1.toCharArray()) &#123;</span><br><span class="line">            needs.merge(c, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 当前符合needs条件的条数</span></span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s2.length()) &#123;</span><br><span class="line">            now = s2.charAt(right++);</span><br><span class="line">            <span class="comment">// 窗口内的数据更新</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="comment">// 左窗口收缩条件)&#123;</span></span><br><span class="line">            <span class="comment">// 收缩左窗口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完了骨架，直接上四个题目</p><h4 id="最小覆盖子串"><a href="#最小覆盖子串" class="headerlink" title="最小覆盖子串"></a>最小覆盖子串</h4><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/">力扣76：最小覆盖子串</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.png" class title="最小覆盖子串"><p>1、我们先初始化 <code>left = right = 0</code>，把索引区间 <code>[left, right)</code> 中的内容称为窗口。</p><p>2、不断地增加 <code>right</code> 指针扩大窗口 <code>[left, right)</code>，直到窗口中的字符串符合要求（即窗口中的内容包含了 <code>t</code> 中的所有字符）。</p><p>3、此时，我们停止增加 <code>right</code>，开始不断增加 <code>left</code> 指针缩小窗口 <code>[left, right)</code>，直到窗口中的字符串不再符合要求。同时，每次增加 <code>left</code>，我们都要更新结果。</p><p>4、重复第 2 和第 3 步，直到 <code>right</code> 到达字符串 <code>S</code> 的尽头。</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process01.png" class title="最小覆盖子串-process01"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process02.png" class title="最小覆盖子串-process02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process03.png" class title="最小覆盖子串-process03"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process04.png" class title="最小覆盖子串-process04"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process05.png" class title="最小覆盖子串-process05"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process06.png" class title="最小覆盖子串-process06"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process07.png" class title="最小覆盖子串-process07"><p>这时候left开始向右移动，直到window中的字符不满足target的字符，即valid不等于needs的size()</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process08.png" class title="最小覆盖子串-process08"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process09.png" class title="最小覆盖子串-process09"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process10.png" class title="最小覆盖子串-process10"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process11.png" class title="最小覆盖子串-process11"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process12.png" class title="最小覆盖子串-process12"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process13.png" class title="最小覆盖子串-process13"><p>这时候left开始向右移动，直到window中的字符不满足target的字符，即valid不等于needs的size()</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process14.png" class title="最小覆盖子串-process14"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process15.png" class title="最小覆盖子串-process15"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process16.png" class title="最小覆盖子串-process16"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process17.png" class title="最小覆盖子串-process17"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process18.png" class title="最小覆盖子串-process18"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process19.png" class title="最小覆盖子串-process19"><p>这时候left开始向右移动，直到window中的字符不满足target的字符，即valid不等于needs的size()</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process20.png" class title="最小覆盖子串-process20"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process21.png" class title="最小覆盖子串-process21"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process22.png" class title="最小覆盖子串-process22"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2-process23.png" class title="最小覆盖子串-process23"><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t.length() &gt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> now;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// valid指的是need中的所有条件的满足个数</span></span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : t.toCharArray()) &#123;</span><br><span class="line">            <span class="comment">// 这个是java8的map新特性，当map中不存在该值，自动创建值并赋值为1，当该值存在的时候，将其加1</span></span><br><span class="line">            needs.merge(c, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minLength = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            now = chars[right++];</span><br><span class="line">            <span class="comment">// 只有当前这个字符是t里面的，我再去将其放入窗口中</span></span><br><span class="line">            <span class="comment">// 如果这时候窗口中的该字符数量达到了needs中的，则valid自增</span></span><br><span class="line">            <span class="keyword">if</span> (needs.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                window.merge(now, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="keyword">if</span> (window.get(now).equals(needs.get(now))) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果needs中的条件都满足了，则left要自增</span></span><br><span class="line">            <span class="keyword">while</span> (valid == needs.size()) &#123;</span><br><span class="line">                <span class="comment">// 这里使用right-left充当字符串长度，因为now = chars[right++];这里right已经自增了</span></span><br><span class="line">                <span class="keyword">if</span> (right - left &lt; minLength) &#123;</span><br><span class="line">                    start = left;</span><br><span class="line">                    minLength = right - left;</span><br><span class="line">                &#125;</span><br><span class="line">                now = chars[left++];</span><br><span class="line">                <span class="keyword">if</span> (window.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 这个是java8的map新特性，当map中存在该值，则将其加上-1</span></span><br><span class="line">                    window.merge(now, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                    <span class="keyword">if</span> (window.get(now) &lt; needs.get(now)) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLength == Integer.MAX_VALUE ? <span class="string">&quot;&quot;</span> : s.substring(start, start + minLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h4><p><a href="https://leetcode-cn.com/problems/permutation-in-string/">力扣567：字符串排序</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.png" class title="字符串的排列"><p>1、先初始化<code>left</code>和<code>right</code>为0，把<code>[left,right)</code>范围的数据叫做窗口</p><p>2、将需要符合的字符串条件初始化到needs中</p><p>3、不断扩大<code>right</code>，使窗口逐渐变大</p><p>4、直到窗口长度等于s1的长度，如果这时候已经出现了符合条件的字符串直接返回true，反之，将<code>left</code>向右走，缩小窗口</p><p>5、重复3、4，直到<code>right</code>走到最后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> now;</span><br><span class="line">        Map&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s1.toCharArray()) &#123;</span><br><span class="line">            needs.merge(c, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s2.length()) &#123;</span><br><span class="line">            now = s2.charAt(right++);</span><br><span class="line">            <span class="keyword">if</span> (needs.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                window.merge(now, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="keyword">if</span> (window.get(now).equals(needs.get(now))) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right - left == s1.length()) &#123;</span><br><span class="line">                now = s2.charAt(left++);</span><br><span class="line">                <span class="keyword">if</span> (valid == needs.size()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (window.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (window.get(now).equals(needs.get(now))) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window.merge(now, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找到字符串中所有字母异位词"><a href="#找到字符串中所有字母异位词" class="headerlink" title="找到字符串中所有字母异位词"></a>找到字符串中所有字母异位词</h4><p><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">力扣438：找到字符串中所有字母异位词</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.png" class title="字母异位词"><p>其实本题就是上面那一题，只不过这一题需要将所有的异位词出现的地方都放到一个List中</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> valid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> now;</span><br><span class="line">        Map&lt;Character, Integer&gt; needs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">            needs.merge(c, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            now = chars[right++];</span><br><span class="line">            <span class="keyword">if</span> (needs.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                window.merge(now, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="keyword">if</span> (window.get(now).equals(needs.get(now))) &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right - left == p.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid == needs.size()) &#123;</span><br><span class="line">                    result.add(left);</span><br><span class="line">                &#125;</span><br><span class="line">                now = chars[left++];</span><br><span class="line">                <span class="keyword">if</span> (window.get(now) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (window.get(now).equals(needs.get(now))) &#123;</span><br><span class="line">                        valid--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    window.merge(now, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无重复最长子串"><a href="#无重复最长子串" class="headerlink" title="无重复最长子串"></a>无重复最长子串</h4><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">力扣3：无重复字符的最长子串</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.png" class title="无重复字符的最长子串"><p>1、初始化<code>left</code>和<code>right</code>为0，window作为窗口</p><p>2、将当前<code>right</code>处的字符在window中的数目加一</p><p>3、如果当前<code>right</code>处的字符在window中的数目已经大于1了。说明有了重复元素，需要将<code>left</code>不断左移，直到当前<code>right</code>处的字符在window中的数目不大于1</p><p>4、重复2、3操作</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> now;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">            now = s.charAt(right++);</span><br><span class="line">            window.merge(now, <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">while</span> (window.get(now) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                window.merge(s.charAt(left++), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(right - left, maxLength);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-双指针技巧</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="双指针技巧"><a href="#双指针技巧" class="headerlink" title="双指针技巧"></a>双指针技巧</h2><p>对于双指针，一般分为<strong>快慢指针</strong>和<strong>前后指针</strong></p><p>前者一般使用在链表中，后者一般使用在数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>快慢指针一般初始化两个指针分别指向链表的头结点 <code>head</code></p><p>前进时快指针 <code>fast</code> 在前</p><p>慢指针 <code>slow</code> 在后</p><p>这就是快慢指针的核心</p><h4 id="判断链表是否成环"><a href="#判断链表是否成环" class="headerlink" title="判断链表是否成环"></a>判断链表是否成环</h4><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/">力扣141题：环形链表</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.png" class title="环形链表"><p>单链表的特点是每一个节点只知道<strong>后置节点</strong>，不知道<strong>前置节点</strong>。如果我使用单指针想去解决这个判断成环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当链表成环的时候，因为没有一个节点的后置节点为<code>null</code>，所以该方法一定是死循环，无法退出。</p><p>经典解法就是使用两个指针，<code>fast</code>指针跑得快，<code>slow</code>指针跑得慢。</p><p>如果链表没有环，跑得快的那个指针最终会遇到 <code>null</code>，说明链表不含环；</p><p>如果链表有环，快指针最终会超慢指针一圈，和慢指针相等，说明链表含有环。</p><p>以下是解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="已知链表有环，返回环开始的地方"><a href="#已知链表有环，返回环开始的地方" class="headerlink" title="已知链表有环，返回环开始的地方"></a>已知链表有环，返回环开始的地方</h4><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">力扣142题：环形链表 II</a></p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.png" class title="环形链表"><p><code>5</code>就是那个环开始的地方</p><p>假设快指针走了<code>2k</code>步，则慢指针就一定走了<code>k</code>步，那么<code>k</code>其实就是环节点个数的整数倍</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E5%BF%AB%E6%8C%87%E9%92%88%E5%88%B0%E8%BE%BE%E7%9B%B8%E9%81%87%E7%82%B9.png" class title="快指针到达相遇点"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E7%9B%B8%E9%81%87.png" class title="快慢指针相遇"><p>黄色的线就是快指针比慢指针多走的步数，即<code>k</code>,图上只画了一圈，但是实际可能<strong>不止一圈</strong></p><p>设慢指针在环中走了<code>m</code>个节点。</p><p>则说明在环节点之前，一共有<code>k-m</code>个节点，就是说我可以从头结点往后走<code>k-m</code>次就可以找到该环开始的地方了。</p><p>但是如果想着如何把<code>k-m</code>求出来的话是有点困难的，所以我们来看看关于快指针的路径中可不可以出现<code>k-m</code></p><p>我们现在来看看快指针走的<code>2k</code>长度的路径，它在环里面走过的路径长度是<code>k+m</code>，从相遇点到相遇点的距离是<code>k</code></p><p>那么就是说快指针从相遇点在环中走<code>k-m</code>步就可以走到环开始的节点，</p><p>所以我们可以将slow置于<code>head</code>，与fast同步前进，当两个指针相同时，返回该值</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E5%BE%AA%E7%8E%AFk-m%E6%AC%A1.png" class title="循环k-m次"><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="寻找链表的中点"><a href="#寻找链表的中点" class="headerlink" title="寻找链表的中点"></a>寻找链表的中点</h4><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">力扣876：链表的中心节点</a></p><p>给出一个无环的链表，要求返回该链表的中点</p><p>使用快慢指针，当fast指针走到尾部的时候，slow就在链表中间位置了</p><p>以下是节点个数为奇数的情况</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%82%B9-process01.png" class title="链表中点-process01"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%82%B9-process02.png" class title="链表中点-process02"><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%82%B9-process03.png" class title="链表中点-process03"><p>以下是节点个数为偶数的结果</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%82%B9-process04.png" class title="链表中点-process04"><p>可以发现，当个数为奇数的时候，慢指针正好在中心位置，</p><p>当个数为偶数的时候，慢指针在中心偏右的位置</p><p>这个算法在链表的归并算法中常常被用到</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是hash实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, ListNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ListNode curr = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">        map.put(i++,curr);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(i/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除倒数第n个节点"><a href="#删除倒数第n个节点" class="headerlink" title="删除倒数第n个节点"></a>删除倒数第n个节点</h4><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">力扣19题：删除倒数第n个节点</a></p><p>思路就是快指针先走n步，然后慢指针和快指针同步向前，当快指针的next是null的时候，慢指针的下一个就是倒数第n个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右指针"><a href="#左右指针" class="headerlink" title="左右指针"></a>左右指针</h3><p>左右指针一般初始化<code>left right</code>两个变量来表示左边界和右边界</p><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>这里就不赘述二分查找的细节了，之前有写，这里就写一种最常见的</p><p>查找target找到则返回索引，没有找到则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h4><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/05/%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII.png" class title="两数之和II"><p>题目中说，该数组是递增的，</p><p>通过left和right来调整大小从而判断是否存在两个数使得和为target</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = numbers.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            sum=numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left+<span class="number">1</span>, right+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                <span class="comment">// 使大的值变小</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 使小的值变大</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h4><p>这个就很简单了，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 交换 arr[left] 和 arr[right]</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">        arr[left++] = arr[right];</span><br><span class="line">        arr[right--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>这个就是左右指针的重头戏了，掌握了这个方法后，可以解决一大类子字符串匹配的问题！</p><p>这个放在下一篇文章中详解</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><strong>定义：</strong>定义了对象之间的一对多依赖，让多个观察者监听同一个对象的行为，当该行为发生的时候，则做出一定的动作</p><p>天气变化了，发出提示</p><p>天气模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer temperature;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTemperature</span><span class="params">(<span class="keyword">int</span> temperature)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature=temperature;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer temperature)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮件的观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer temperature)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发邮件告诉用户天气改变了，变为了&quot;</span>+temperature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>短信观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer temperature)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信告诉用户气温改变了，变为了&quot;</span>+temperature);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-模板方法模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><strong>定义：</strong>定义一个操作的算法骨架，将一些操作延迟到子类实现。Template Method使得子类可以在不改变算法结构的基础上即可重新定义算法的某些特定步骤</p><p>其实该模式很简单，就是定义一个抽象类，然后定义一个抽象方法给子类去实现。</p><p>处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做前期准备&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备就绪，开始处理&quot;</span>);</span><br><span class="line">        doHandler();</span><br><span class="line">        System.out.println(<span class="string">&quot;处理完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;将字符串转化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串转化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><strong>定义：</strong>定义了算法族，分别封装起来，让他们之间可以互相替换，此模式的变化独立于算法的使用者</p><p>有一个电商平台，当用户消费满1000元，根据vip等级可享受优惠</p><ul><li>普通会员 不打折</li><li>白银会员             优惠50元</li><li>黄金会员             打8折</li><li>白金会员             优惠50元，再打七折</li></ul><h3 id="Version-1-0"><a href="#Version-1-0" class="headerlink" title="Version 1.0"></a>Version 1.0</h3><p>会员类型枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UserType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ORDINARY_VIP: 普通会员</span></span><br><span class="line"><span class="comment">     * SILVER_VIP: 白银会员</span></span><br><span class="line"><span class="comment">     * GOLD_VIP： 黄金会员</span></span><br><span class="line"><span class="comment">     * PLATINUM_VIP：白金会员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORDINARY_VIP(<span class="number">1</span>),</span><br><span class="line">    SILVER_VIP(<span class="number">2</span>),</span><br><span class="line">    GOLD_VIP(<span class="number">3</span>),</span><br><span class="line">    PLATINUM_VIP(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    UserType(<span class="keyword">int</span> code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">            result = money - <span class="number">50</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">            result = money * <span class="number">0.8</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.PLATNUM_VIP.getCode())&#123;</span><br><span class="line">            result = (money - <span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面使用策略模式来优化</p><h3 id="Version-1-2"><a href="#Version-1-2" class="headerlink" title="Version 1.2"></a>Version 1.2</h3><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdinaryStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黄金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (money-<span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白银会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money-<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type== UserType.ORDINARY_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> OrdinaryStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> SilverStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> GoldStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type==UserType.PLATINUM_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> PlatinumStrategy().compute(money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Version-2-1"><a href="#Version-2-1" class="headerlink" title="Version 2.1"></a>Version 2.1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer,Strategy&gt; map;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StrategyFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.put(UserType.ORDINARY_VIP.getCode(), <span class="keyword">new</span> OrdinaryStrategy());</span><br><span class="line">        map.put(UserType.SILVER_VIP.getCode(), <span class="keyword">new</span> SilverStrategy());</span><br><span class="line">        map.put(UserType.GOLD_VIP.getCode(),<span class="keyword">new</span> GoldStrategy());</span><br><span class="line">        map.put(UserType.PLATINUM_VIP.getCode(),<span class="keyword">new</span> PlatinumStrategy());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> userType, <span class="keyword">long</span> money)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StrategyFactory.map.get(userType)==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数错误，无此类型的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(userType).compute(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的工厂还可以通过这种方式来实现</p><h3 id="Version-2-2"><a href="#Version-2-2" class="headerlink" title="Version 2.2"></a>Version 2.2</h3><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黄金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.GOLD_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdinaryStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.ORDINARY_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (money-<span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.PLATINUM_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白银会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money-<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.SILVER_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Strategy&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Strategy&gt; strategies=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strategies.add(<span class="keyword">new</span> GoldStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> OrdinaryStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> PlatinumStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> SilverStrategy());</span><br><span class="line">        map=strategies.stream().collect(Collectors.toMap(Strategy::getType,strategy -&gt; strategy));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> userType, <span class="keyword">long</span> money)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StrategyFactory.map.get(userType)==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数错误，无此类型的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(userType).compute(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分查找的多种写法</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/02/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E9%AD%94%E9%AC%BC%E7%BB%86%E8%8A%82%E6%8E%A2%E7%A9%B6/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/03/02/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E9%AD%94%E9%AC%BC%E7%BB%86%E8%8A%82%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找作为数组的基操，肯定是要牢牢掌握的，其思想十分简单，但是对于细节的处理，就可以看出你对二分算法的理解深刻与否。</p><p>如果没有真正的理解细节处的内涵，二分查找算法的编写就是玄学编写，这里加不加等号呢？这里是+1还是不变呢？最后该返回啥呢？</p><p>接下来我们就来看看这些细节该如何处理</p><p>下面使用三个二分查找使用的场景做出分析：<strong>寻找一个数</strong>、<strong>寻找左侧边界</strong>、<strong>寻找右侧边界</strong></p><h3 id="二分查找的骨架"><a href="#二分查找的骨架" class="headerlink" title="二分查找的骨架"></a>二分查找的骨架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = ..;<span class="comment">// nums.length-1还是nums.length</span></span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left..right)&#123;<span class="comment">// &lt;=还是&lt;</span></span><br><span class="line">        mid = (left + right) &gt;&gt; <span class="number">1</span>;<span class="comment">// (right - left) / 2 + left(left + right) &gt;&gt; 1还是 (right + left) / 2</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            .. = ..; <span class="comment">// right还是left  mid-1还是mid</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[mid])&#123;</span><br><span class="line">            right = ..; <span class="comment">// mid-1还是mid</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            left = ..; <span class="comment">// mid+1 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ..;<span class="comment">// left或者要做什么处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或许你经常看见一些代码不会将等于的情况单独列出来，但是我觉得对于二分查找的分析，将等于的情况单独分离出来，会更有利于理解</p><p>等到彻底理解后，随便怎么写都不会少搜索区间的时候，那就随便合并语句了</p><p>上述骨架中<code>..</code>出现的地方就是我们需要去琢磨的细节之处了，乍一看，全是细节，所以叫魔鬼细节探究</p><p>先解决最好解决的一个细节</p><p>很多人都在LeetCode官网中看到有时候官网对于中间值的取值</p><p>有时候会使用<code>(right - left) / 2 + left</code></p><p>有时候会使用<code>(left + right) &gt;&gt; 1</code></p><p>有时候看见别人写的代码中又是<code>(right + left) / 2</code>，肯定会很迷糊，这三者的计算到底有什么不同之处呢？</p><p><code>(right - left) / 2 + left</code>这种写法是为了防止<code>(left+right)</code>因为数据过大导致溢出，导致mid计算错误，</p><p><code>(left + right) &gt;&gt; 1</code>这是位运算，处理效率会高一点</p><p><code>(right + left) / 2</code>这就是正常写法，一般也不会出错</p><p>接下来按照二分查找的常见使用场景来逐个做出分析</p><h3 id="查找一个数"><a href="#查找一个数" class="headerlink" title="查找一个数"></a>查找一个数</h3><p><strong>场景1：查找一个数，存在返回索引，不存在返回-1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="comment">// [left,right]</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>循环条件是<code>left &lt;= right</code>而不是<code>left &lt; right</code>？</strong></li></ol><p>这里我们要说一下什么时候应该退出循环，就是当我所有的元素都搜索完成之后（即搜索区间里面没有元素的时候），或者是找到了目标值的时候可以直接终止，返回结果。</p><p>当right赋值为<code>nums.length - 1</code>，则搜索区间为<code>[left,right]</code>，所有元素搜索完成的条件应该是<code>left==right+1</code>，即搜索区间为<code>[right+1,right]</code>，符合要求。如果循环退出条件改为 <code>left&lt;right</code>，则退出循环的时候，搜索区间为<code>[left,right]</code>，会缺少搜索第left个元素，不符合要求</p><p>如果**right赋值为<code>nums.length</code>**，则搜索区间为<code>[left,right)</code>，所有元素搜索完成的条件应该是<code>left==right</code>，即搜索区间为<code>[left,right)</code></p><ol start="2"><li><strong>当<code>nums[mid] &gt; target</code>的时候，为什么是<code>right = mid - 1; </code>而不是<code>right = mid; </code>？</strong></li></ol><p>还是回到搜索区间的问题上，当我发现当前这个元素与target不等而是大于target，那么我只需要搜索左边区间，即将<code>[left,right]</code>分割为左边区间<code>[left,mid-1]</code>和右边区间<code>[mid+1,right]</code>，所以下一步应该将<code>mid-1</code>赋值给right</p><ol start="3"><li><strong>此算法的用途</strong></li></ol><p>这种方法只可以在找到目标值的情况下返回索引，但是当nums为<code>[1,2,2,2,4]</code>的时候，返回的值是2，没错，但是这样可能就无法满足我们的需求了，只能在数组是严格递增的情况下使用。</p><p>如果场景变为：查找一个数，如果找到则返回索引位置，如果找不到，则返回目标值插入数组的位置</p><p>这个时候其实只要最后返回left即可</p><h3 id="返回左边界"><a href="#返回左边界" class="headerlink" title="返回左边界"></a>返回左边界</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="comment">// [left,right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>为什么最后返回的时候要做出判断？</strong></li></ol><p>当目标元素比所有的值都小的时候，在最后一次循环的时候，<code>right = mid - 1</code>，left此时为0，但是无法确定该元素是否为目标元素，所以需要做出判断，</p><p>当目标元素比所有的值都大的时候，在最后一次循环的时候，<code>left= mid + 1</code>，left此时为数组长度，这时候则说明，该元素在此数组中不存在，也要做出判断</p><ol start="2"><li><strong>为什么找到的一定是左边界？</strong></li></ol><p>因为这一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">    right= mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数组元素等于目标元素的时候，不着急返回，而是缩小查找范围。因为需要查找左边界，所以需要向左边收缩区间</p><ol start="3"><li><strong>这里面while的循环条件可以改为<code>left &lt; right</code>吗？</strong></li></ol><p>当然可以，只要理解了搜索区间，只要能够保证所有的元素都被查找了，怎么写都可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果target毕nums所有的值都小，则right会变成-1,left就是0</span></span><br><span class="line">    <span class="comment">// 如果target比nums所有的值都大，则left会变成nums.length，right就是nums.length-1</span></span><br><span class="line">    <span class="keyword">if</span> (left == nums.length || nums[left] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当目标元素比所有的值都大的时候，在最后一次循环的时候，<code>left= mid + 1</code>，left此时为数组长度，这时候则说明，该元素在此数组中不存在，需要单独做出判断</p><p>当目标元素比所有的值都小的时候，在最后一次循环的时候，<code>right = mid </code>，left此时为0，但是无法确定该元素是否为目标元素，所以需要做出判断，</p><h3 id="返回右边界"><a href="#返回右边界" class="headerlink" title="返回右边界"></a>返回右边界</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果target比nums中所有元素都大，left在nums.length,right在nums.length-1</span></span><br><span class="line">    <span class="comment">// target比nums所有元素都小，left在0，right是-1</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">0</span> || nums[left - <span class="number">1</span>] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>为什么最后返回的时候要做出判断？</strong></li></ol><p>当目标元素比所有的值都大的时候，在最后一次循环的时候，<code>left= mid + 1</code>，left此时为数组长度，这时候则说明，该元素在此数组中不存在，也要做出判断</p><p>当目标元素比所有的值都小的时候，在最后一次循环的时候，<code>right = mid - 1</code>，left此时为0，但是无法确定该元素是否为目标元素，所以需要做出判断，</p><ol start="2"><li><strong>为什么找到的一定是右边界？</strong></li></ol><p>因为这一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数组元素等于目标元素的时候，不着急返回，而是缩小查找范围。因为需要查找右边界，所以需要向右边收缩区间</p><ol start="3"><li><strong>如何修改循环条件为<code>left &lt; right</code>？</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当target比数组中所有元素都小的时候，right和left都走到了0的位置</span></span><br><span class="line">    <span class="comment">// 这时候这说明，数组中不存在target元素，直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当target比数组所有元素都大的时候，right和left都走到了数组长度的位置，</span></span><br><span class="line">    <span class="comment">// 如果数组最后一个元素不是这说明数组中没有target元素</span></span><br><span class="line">    <span class="keyword">if</span> (nums[left - <span class="number">1</span>] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【34-Medium】在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/01/%E3%80%9034-Medium%E3%80%91%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/03/01/%E3%80%9034-Medium%E3%80%91%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="在排序数组中查找元素的第一个和最后一个位置"><a href="#在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置"></a>在排序数组中查找元素的第一个和最后一个位置</h2><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p><strong>进阶：</strong></p><ul><li>你可以设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题吗？</li></ul><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 8</span><br><span class="line">输出：<span class="comment">[3,4]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[]</span>, target = 0</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> 是一个非递减数组</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><p><strong>Related Topics</strong></p><ul><li>数组</li><li>二分查找</li></ul><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> first = binarySearch(nums, target);</span><br><span class="line">        <span class="keyword">if</span> (first == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;first, binarySearch(nums, target + <span class="number">1</span>) - <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-装饰者模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p><strong>定义：</strong>在不改变原有对象的基础上，将功能附加到对象上</p><p>这个其实大家在平时写代码的时候就已经用过了，只是不知道这是一个模式</p><p>下面看一个案例</p><p>有一个组件的接口，然后我有一个具体的实现类，现在我需要在这个具体实现类的基础上进行功能拓展</p><p>组件接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现组件功能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展功能抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhanceComponent</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnhanceComponent</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteEnhanceComponent</span> <span class="keyword">extends</span> <span class="title">EnhanceComponent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteEnhanceComponent</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        component.operation();</span><br><span class="line">        System.out.println(<span class="string">&quot;拓展功能一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>不改变原有代码的情况下，对原来的类进行增强</li><li>使用不同的组合可以实现不同的人效果</li><li>符合开闭原则</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-适配器模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>定义：</strong>将一个类的接口转换为用户希望的另一个接口。这使得原本由于接口不兼容而不能一起工作的那些类就可以一起工作了</p><p>接下来我们来模拟USB转接网线口，从而使电脑上网的案例</p><p>网线接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetWorkThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectNetWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>华为的网线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiNetWorkThread</span> <span class="keyword">implements</span> <span class="title">NetWorkThread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectNetWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为网线连接网络，可以上网了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自制的网线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerNetWorkThread</span> <span class="keyword">implements</span> <span class="title">NetWorkThread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectNetWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自制网线，可以上网了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器（网线口变为USB口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">netWorkToUSB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>华为的适配器（转接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> NetWorkThread netWorkThread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetWorkThread</span><span class="params">(NetWorkThread netWorkThread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.netWorkThread = netWorkThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">netWorkToUSB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(netWorkThread==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;适配器没有网线插入！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为适配器适配了网线&quot;</span>);</span><br><span class="line">        netWorkThread.connectNetWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(Adapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adapter = adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectToNetWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(adapter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            adapter.netWorkToUSB();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有插网线！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.connectToNetWork();</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        HuaWeiAdapter huaWeiAdapter = <span class="keyword">new</span> HuaWeiAdapter();</span><br><span class="line">        computer.setAdapter(huaWeiAdapter);</span><br><span class="line">        computer.connectToNetWork();</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        huaWeiAdapter.setNetWorkThread(<span class="keyword">new</span> HuaWeiNetWorkThread());</span><br><span class="line">        computer.connectToNetWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">没有插网线！</span><br><span class="line">===================</span><br><span class="line">适配器没有网线插入！</span><br><span class="line">===================</span><br><span class="line">华为适配器适配了网线</span><br><span class="line">华为网线连接网络，可以上网了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【5-Medium】最长回文数</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/28/%E3%80%905-Medium%E3%80%91%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/28/%E3%80%905-Medium%E3%80%91%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="最长回文数"><a href="#最长回文数" class="headerlink" title="最长回文数"></a>最长回文数</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;babad&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bab&quot;</span></span><br><span class="line">解释：<span class="string">&quot;aba&quot;</span> 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><p><strong>Related Topics</strong></p><ul><li>字符串</li><li>动态规划</li></ul><h3 id="法一：暴力枚举"><a href="#法一：暴力枚举" class="headerlink" title="法一：暴力枚举"></a>法一：暴力枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span> ; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>((j - i + <span class="number">1</span>) &gt; (end - begin + <span class="number">1</span>) &amp;&amp; isValid(chars,i,j))&#123;</span><br><span class="line">                    begin = i;</span><br><span class="line">                    end = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin, end+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[left] != chars[right])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法二：中心扩散"><a href="#法二：中心扩散" class="headerlink" title="法二：中心扩散"></a>法二：中心扩散</h3><p>将每”一位”作为中心向两边扩撒，</p><p>每次扩散分两种情况，</p><p>第一种情况是以当前那一位为中心向两边扩散</p><p>第二种情况是以当前那一位和下一位为中心向两边扩散</p><p>取这两种情况的最值max</p><p>如果max比maxLen大的话，计算得出begin‘</p><p>最后直接返回截取的字符串</p><p>这是我的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> max = Math.max(expand(s,i,i),expand(s,i,i+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(max &gt; maxLen)&#123;</span><br><span class="line">                maxLen = max;</span><br><span class="line">                begin = i - (max - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin, maxLen+begin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expand</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是官方的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">            --left;</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法三：动态规划"><a href="#法三：动态规划" class="headerlink" title="法三：动态规划"></a>法三：动态规划</h3><p>对于一个子串而言，如果它是回文串，并且长度大于 2，那么将它首尾的两个字母去除之后，它仍然是个回文串。</p><p>例如对于字符串 “ababa’”，如果我们已经知道 “bab” 是回文串<strong>这层关系</strong>，那么 “ababa” 一定是回文串，这是因为它的首尾两个字母都是a</p><p>使用<code>dp[][]</code>二位数组来存储这层<strong>关系</strong></p><p>即使用<code>dp[i][j]</code>来表示s字符串的i到j是否是回文数</p><p>如果当前要判断的范围是<code>dp[left][right]</code>，字符串长度为x</p><p>第一步先看首尾是否一致，</p><p>如果不一致，则<code>dp[left][right]</code>直接为false，</p><p>如果一致，则进入下一步判断</p><p>如果当前判断的字符串长度小于3</p><blockquote><p>为什么是3呢？</p><p>如果长度为1，则本身就是字符串，形成自回文</p><p>如果长度为2，则首尾一致的情况下，可以直接判断为回文</p><p>如果长度为3，则首尾一致的情况下，也可以直接判断回文</p><p>这三组数据是后面做判断的支撑</p></blockquote><p>则直接将<code>dp[left][right]</code>赋值为true</p><p>反之将<code>dp[left+1][right-1]</code>（即去掉首尾的时候是否为回文数）的回文结构赋值给<code>dp[i][j]</code></p><p>这些结束后，当<code>dp[left][right]</code>是true时，</p><p>则将当前循环长度和存储的maxLen进行比较，</p><p>如果当前循环长度较大，则将其赋值给maxLen，将left赋值给begin</p><p>反之，直接进行下一次循环</p><p><strong>官方代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="comment">// 初始化：所有长度为 1 的子串都是回文串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="comment">// 递推开始</span></span><br><span class="line">        <span class="comment">// 先枚举子串长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= len; L++) &#123;</span><br><span class="line">            <span class="comment">// 枚举左边界，左边界的上限设置可以宽松一些</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></span><br><span class="line">                <span class="keyword">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= len) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (charArray[i] != charArray[j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin, begin + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我理解思路后写的</p><p>对于变量的命名更贴近其本身的含义</p><p>可能会更好理解一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">    <span class="comment">// dp[i][j]即表示s[i..j]是否为回文数</span></span><br><span class="line">    <span class="comment">// 对角线即为每个字符本身那就可以直接初始化为true</span></span><br><span class="line">    <span class="comment">// 也可以不初始化这个，但是为了语义完整，最好还是加上</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//x表示长度，从长度为2开始，因为长度为1的情况可以直接判断</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span> ; x &lt;= len; x++) &#123;</span><br><span class="line">        <span class="comment">//循环次数为总长度减当前循环的长度再加一</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> left = <span class="number">0</span>; left &lt; len - x + <span class="number">1</span>; left++) &#123;</span><br><span class="line">            <span class="comment">//x=right-left+1</span></span><br><span class="line">            <span class="keyword">int</span> right = x + left - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(chars[left] != chars[right])&#123;</span><br><span class="line">                dp[left][right] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(x &lt; <span class="number">4</span>)&#123;</span><br><span class="line">                    dp[left][right] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[left][right] = dp[left+<span class="number">1</span>][right-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[left][right] &amp;&amp; x &gt; maxLen)&#123;</span><br><span class="line">                begin = left;</span><br><span class="line">                maxLen = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(begin, maxLen+begin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于权限修饰符protected</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/28/%E5%85%B3%E4%BA%8E%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6protected/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/28/%E5%85%B3%E4%BA%8E%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6protected/</url>
      
        <content type="html"><![CDATA[<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>我们先回顾一下java中的权限修饰符</p><table><thead><tr><th align="center">权限修饰符</th><th align="center">同类</th><th align="center">同包</th><th align="center">子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p>对于public和private大家都很了解了，但是对于<strong>protected</strong>，大家可能对它的概念可能就一句话：被protected修饰的成员对于本包和其子类可见。</p><p>该权限修饰符的关键是</p><ul><li>基类的protected成员属性是包内可见的，并且对所有子类可见</li><li>若子类与基类不在同一包下，则在<strong>子类中</strong>，子类实例可以访问从基类继承来的protected方法，而不能访问基类实例的protected方法</li></ul><p>遇到protected</p><p>首先思考这个protected来自何方</p><p>接着看其和这个地方是不是同包</p><p>最后看其是否有父子类关系</p><p>可以通过以下几个Test来掌握protected的用法</p><blockquote><p><strong>注意：观察包限定名</strong></p></blockquote><p>模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Feather1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Feather1</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p1.Feather1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son11</span> <span class="keyword">extends</span> <span class="title">Feather1</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p11.Son11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Feather1 feather1 = <span class="keyword">new</span> Feather1();</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        Son11 son2 = <span class="keyword">new</span> Son11();</span><br><span class="line">        son1.f();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">        son1.clone();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">        son2.f();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">        son2.clone();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">        feather1.f();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">        feather1.clone();<span class="comment">//编译通过，因为该测试类与Feather1处于同一包下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p1.Feather1;</span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p1.Son1;</span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p11.Son11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Feather1 feather1 = <span class="keyword">new</span> Feather1();</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        Son11 son2 = <span class="keyword">new</span> Son11();</span><br><span class="line">        son1.f();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">        son1.clone();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">        son2.f();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">        son2.clone();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">        feather1.f();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">        feather1.clone();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下，该类也不是Feather1的子类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p1.Feather1;</span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p1.Son1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son11</span> <span class="keyword">extends</span> <span class="title">Feather1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Feather1 feather1 = <span class="keyword">new</span> Feather1();</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        Son11 son2 = <span class="keyword">new</span> Son11();</span><br><span class="line">        son2.f();<span class="comment">//编译通过，因为该测试类所在的地方是Feather1的子类</span></span><br><span class="line">        son2.clone();<span class="comment">//编译通过，因为该测试类所在的地方是Feather1的子类</span></span><br><span class="line">        feather1.f();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下</span></span><br><span class="line">        feather1.clone();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下</span></span><br><span class="line">        son1.f();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下</span></span><br><span class="line">        son1.clone();<span class="comment">//编译不通过，因为该测试类与Feather1处于不同一包下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p11.Son11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Feather1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Feather1 feather1 = <span class="keyword">new</span> Feather1();</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        Son11 son2 = <span class="keyword">new</span> Son11();</span><br><span class="line">        son2.f();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">        son2.clone();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">        feather1.f();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">        feather1.clone();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">        son1.f();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">        son1.clone();<span class="comment">//编译通过，因为该测试类是Son1和Son11的父类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p44.Test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject4</span> <span class="keyword">extends</span> <span class="title">Test4</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p44;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p4.MyObject4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MyObject4 myObject4 = <span class="keyword">new</span> MyObject4();</span><br><span class="line">        myObject4.clone();<span class="comment">//编译不通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>myobject4的clone<strong>直接</strong>来自MyObject4类本身</p><p>其范围是MyObjcet4的子类与其同包的类</p><p>Test4都不满足</p><p>所以编译不通过</p><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p44.Test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject4</span> <span class="keyword">extends</span> <span class="title">Test4</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.protect.p44;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.protect.p4.MyObject4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MyObject4 myObject4 = <span class="keyword">new</span> MyObject4();</span><br><span class="line">        myObject4.clone();<span class="comment">//编译通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>myobject4的clone<strong>直接</strong>来源于Test4</p><p>范围是Test4子类及其同包的类</p><p>满足与其同包</p><p>编译通过</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-门面模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h2><p><strong>定义：</strong>为子系统中的一组接口提供一个一致的高层接口，使得这一子系统更加容易使用</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>子系统1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统1的A操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子系统2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统2的B操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子系统3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统3的C操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统门面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemFacade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> System1 system1 = <span class="keyword">new</span> System1();</span><br><span class="line">    <span class="keyword">private</span> System2 system2 = <span class="keyword">new</span> System2();</span><br><span class="line">    <span class="keyword">private</span> System3 system3 = <span class="keyword">new</span> System3();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateABC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system1.operateA();</span><br><span class="line">        system2.operateB();</span><br><span class="line">        system3.operateC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SystemFacade().operateABC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-享元模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p><strong>定义：</strong>运用共享技术有效地支持大量<strong>细粒度</strong>的对象</p><p><strong>优点：</strong>如果系统有大量类似的对象，可以节省大量的内存和CPU资源</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><strong>场景：</strong>假如我要开发一款游戏，然后游戏里面的地图有很多树木</p><p>这个时候，我们不可能创建几万个树的对象</p><p>Tree</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeNode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tree tree;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Tree&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Tree <span class="title">getTree</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addTree</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        map.put(name,<span class="keyword">new</span> Tree(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TreeFactory.addTree(<span class="string">&quot;梧桐树&quot;</span>);</span><br><span class="line">    TreeFactory.addTree(<span class="string">&quot;香樟树&quot;</span>);</span><br><span class="line">    TreeFactory.addTree(<span class="string">&quot;银杏树&quot;</span>);</span><br><span class="line">    TreeFactory.addTree(<span class="string">&quot;面包树&quot;</span>);</span><br><span class="line">    TreeNode treeNode1 = <span class="keyword">new</span> TreeNode(TreeFactory.getTree(<span class="string">&quot;梧桐树&quot;</span>),<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    TreeNode treeNode2 = <span class="keyword">new</span> TreeNode(TreeFactory.getTree(<span class="string">&quot;梧桐树&quot;</span>),<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    TreeNode treeNode3 = <span class="keyword">new</span> TreeNode(TreeFactory.getTree(<span class="string">&quot;梧桐树&quot;</span>),<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【64-Medium】最小路径和</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h2><p>给定一个包含非负整数的 <code>m x n  </code> 的网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[1,3,1],[1,5,1],[4,2,1]]</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：因为路径 <span class="number">1</span>→<span class="number">3</span>→<span class="number">1</span>→<span class="number">1</span>→<span class="number">1</span> 的总和最小。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[1,2,3],[4,5,6]]</span></span><br><span class="line">输出：<span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li></ul><p>分析：一般来说，遇到这种统计可行路径的数量，或者求最小路径的时候，使用<strong>动态规划</strong>和<strong>搜索</strong>这两种方法，但是搜索更适用于数据规模较小的题目</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>动态规划算法，我们主要关注以下两点。</p><ol><li><p>状态的设置。在这个题目里，由于要求最小路径和，我们可以令 dp[ i ] [ j ] 代表从（i，j）点走到右下角点的最小路径和。</p></li><li><p>状态转移方程。我们考虑如何来求出 dp [ i] [j]。由于每次只能往右或者下走，所以从（i，j）只能走到（i+1，j）或者（i，j+1)。换言之，dp[ i ] [ j ] 的前继状态只有dp[ i+1 ] [ j ], dp[ i ] [ j+1 ], 所以我们在两者取最小，然后加上这个格子内的数即可</p></li></ol><p>  dp(i,j) &#x3D; grid(i,j) + min(dp(i + 1,j),dp(i,j + 1))</p><p>是需要特殊处理的，当然还有终点元素也是要做个排除，下面先看流程图</p><p>就以案例一的矩阵为例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><h4 id="逆向思维"><a href="#逆向思维" class="headerlink" title="逆向思维"></a>逆向思维</h4><p>从终点考虑问题，思考上一点在哪</p><p>最后一列是只能向上回</p><p>最后一行是只能向左回</p><p>终点不做处理</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/%E7%9F%A9%E9%98%B5%E5%9B%BE.png" class title="矩阵图"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-01.png" class title="process-01"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-02.png" class title="process-02"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-03.png" class title="process-03"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-04.png" class title="process-04"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-05.png" class title="process-05"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-06.png" class title="process-06"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-07.png" class title="process-07"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-08.png" class title="process-08"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-09.png" class title="process-09"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process-10.png" class title="process-10"><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> height = grid.length;</span><br><span class="line">        <span class="keyword">int</span> width = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 从终点往起点走</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = height - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = width - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == height - <span class="number">1</span> &amp;&amp; j != width - <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[i][j] += grid[i][j + <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != height - <span class="number">1</span> &amp;&amp; j == width - <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[i][j] += grid[i + <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != height - <span class="number">1</span> &amp;&amp; j != width - <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[i][j] += Math.min(grid[i + <span class="number">1</span>][j], grid[i][j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正向思维"><a href="#正向思维" class="headerlink" title="正向思维"></a>正向思维</h4><p>即从起点出发，思考下一点在哪</p><p>只有第一行是可以向右</p><p>只有第一列是可以向下</p><p>起点不做处理</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/%E7%9F%A9%E9%98%B5%E5%9B%BE.png" class title="矩阵图"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-01.png" class title="process2-01"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-02.png" class title="process2-02"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-03.png" class title="process2-03"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-04.png" class title="process2-04"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-05.png" class title="process2-05"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-06.png" class title="process2-06"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-07.png" class title="process2-07"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-08.png" class title="process2-08"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/25/%E3%80%9064-Medium%E3%80%91%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/process2-09.png" class title="process2-09"><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">        <span class="keyword">int</span> columns = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j != <span class="number">0</span>) &#123;</span><br><span class="line">                    grid[i][j] += grid[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span> &amp;&amp; i != <span class="number">0</span>) &#123;</span><br><span class="line">                    grid[i][j] += grid[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    grid[i][j] += Math.min(grid[i - <span class="number">1</span>][j], grid[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[rows - <span class="number">1</span>][columns - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化（状态压缩）"><a href="#优化（状态压缩）" class="headerlink" title="优化（状态压缩）"></a>优化（状态压缩）</h4><p>这是官方的优化说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们可以用一个一维数组dp来代替二维数组，dp 数组的大小和grid的列大小相同。</span><br><span class="line"></span><br><span class="line">这是因为对于某个固定状态，只需要考虑下方和右方的节点。</span><br><span class="line"></span><br><span class="line">我们就可以一行一行计算，来节省空间复杂度。</span><br></pre></td></tr></table></figure><p>这是我个人的解读（对于逆向思维）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">想要得到最后的结果，就需要从第一行开始计算，然后该行的数据为下一行的计算提供数据。</span><br><span class="line">这一行计算完成后，上一行就失去了作用，而且我们需要的就只是计算完成后的最后一行数据</span><br><span class="line">返回的也就是这最后一行的最后一个数据也就是dp[rows-1][colums-1]</span><br></pre></td></tr></table></figure><p>这里就不画流程图了，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">        <span class="keyword">int</span> columns = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[columns];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                dp[j] = Math.min(dp[j], dp[j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[columns - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-缓存穿透和雪崩</title>
      <link href="/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/"/>
      <url>/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存穿透和雪崩"><a href="#缓存穿透和雪崩" class="headerlink" title="缓存穿透和雪崩"></a>缓存穿透和雪崩</h2><p>缓存的时候，大大提高了应用程序的性能和效率，特别是数据查询方面。但同时，它带来好处的同时，也带来了问题。</p><p>缓存穿透和雪崩就是两个经典的问题，当然业界也已经有了比较流行的解决方案</p><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><p><strong>概念：</strong>缓存穿透的概念很简单，用户想要查询一个数据，发现Redis内存数据库中没有，也就是缓存没有<strong>命中</strong>，于是去持久层数据库查询。发现也没有，于是本次查询失败。当这种查询情况很多的时候，缓存都没有命中，都时去请求了持久层数据库。就是意味着该缓存无用，也就是缓存穿透。</p><p><strong>解决方案：</strong></p><ol><li>布隆过滤器</li></ol><p>布隆过滤器是一种数据结构，对所有能查询到的参数以hash的形式存储，在控制层先进行校验，不符合则该请求直接丢弃，从而解决问题</p><img src="/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png" class title="布隆过滤器"><ol start="2"><li>置空缓存</li></ol><p>当存储层未命中的时候，及时返回的是null对象，缓存也将其存储起来同时设置一个过期时间，之后再从数据库中查询，保护了mysql</p><p>问题：</p><img src="/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/%E8%AE%BE%E7%BD%AE%E7%A9%BA%E5%80%BC.png" class title="设置空值"><ol><li>有可能会存放很多很多值为空的键值对，浪费文件</li><li>及时设置了过期时间，但是如果mysql在这个过期时间还没到的时候，已经有查询结果了，但是因为过期时间没到，却还是访问不了mysql，从而查询到数据</li></ol><h3 id="缓存击穿（查得太多了）"><a href="#缓存击穿（查得太多了）" class="headerlink" title="缓存击穿（查得太多了）"></a>缓存击穿（查得太多了）</h3><p><strong>概述：</strong>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key在不停的扛着大并发，大并发集中对<strong>这一个点</strong>进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。<br><strong>解决方案：</strong></p><ol><li>设置热点数据永不过期，从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</li><li>加互斥锁分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限</li></ol><h3 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h3><p><strong>概念：</strong>指的是在某一时间段，缓存集中过期失效或者集中宕机</p><p>正常：</p><img src="/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/%E6%AD%A3%E5%B8%B8%E7%BC%93%E5%AD%98.png" class title="正常缓存"><p>雪崩：</p><img src="/javaEE/Redis/2022/02/25/Redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E9%9B%AA%E5%B4%A9/%E9%9B%AA%E5%B4%A9.png" class title="雪崩"><p>如果是自然key过期，倒是影响不大，但是如果是节点宕机或者断电，这就很有可能会将数据库冲垮</p><p><strong>解决方案：</strong></p><ol><li>redis集群</li><li>限流降级：在缓存失效后，通过加锁或者队列来控制数据库写缓存的线程个数</li><li>数据预热：在正式部署前，先把可能的数据预先访问一遍，这样的话可能大量访问的数据就会加载到缓存中去，在即将发生高并发访问前，手动触发加载器缓存不同的key，设置不同的过期时间，让缓存过期时间点比较均匀</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-主从复制</title>
      <link href="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主从复制，是指将一台Redis服务器中的数据，复制到其他的Redis服务器上。</p><p>前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower)</p><p>数据的复制是<strong>单向</strong>的，只能由主节点到从节点。Master以写为主，Slave 以读为主。</p><p>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>主从复制的作用主要包括：</p><p>1、<strong>数据冗余：</strong>主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>2、<strong>故障恢复：</strong>当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复<br>3、<strong>负载均衡：</strong>在主从复制的基础上，配合<strong>读写分离</strong>，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>4、<strong>高可用（集群）基石：</strong>主从复制还是哨兵模式和部署集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p><img src="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" class title="主从复制"><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的，最少三台（一主二从）</p><p>​1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大<br>​2、从容量上，不能将一台服务所有内存用作Redis存储内存，单台Redis最大使用内存不应该超过<strong>20G</strong>。</p><h3 id="配置子节点"><a href="#配置子节点" class="headerlink" title="配置子节点"></a>配置子节点</h3><p>我们这里使用docker来做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制两份配置文件给从节点镜像使用</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># ls</span></span><br><span class="line">redis-01.conf  redis-02.conf  redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要修改这三份文件，将绑定本地的配置注释掉，关闭安全模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别以后台方式启动两个从节点</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker run -P -it -d -v /home/redis/redis-01.conf:/etc/redis/redis.conf --name=salveRedis01 redis</span></span><br><span class="line">a593c51bc1100e892f5d18c34ba5a05f637d1b3a4a29e5840cfeb18a633355f5</span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker run -P -it -d -v /home/redis/redis-02.conf:/etc/redis/redis.conf --name=salveRedis02 redis</span></span><br><span class="line">08833de79be2cf719402b4f4cf42bf06d0f0a84a22e188f2b2f4d03f54ca48c1</span><br><span class="line"><span class="comment"># 查看映射端口，这里一定一定要注意！！服务器要开安全组！！！不然就是连接失败哎！！！</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS              PORTS                                               NAMES</span><br><span class="line">a593c51bc110   redis          <span class="string">&quot;docker-entrypoint.s…&quot;</span>   24 minutes ago   Up About a minute   0.0.0.0:49169-&gt;6379/tcp                             salveRedis01</span><br><span class="line">08833de79be2   redis          <span class="string">&quot;docker-entrypoint.s…&quot;</span>   24 minutes ago   Up About a minute   0.0.0.0:49170-&gt;6379/tcp                             salveRedis02</span><br><span class="line">0e9919007f5d   redis          <span class="string">&quot;docker-entrypoint.s…&quot;</span>   38 minutes ago   Up 2 minutes        0.0.0.0:49168-&gt;6379/tcp                             masterRedis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主节点的基本信息</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ ~]<span class="comment"># docker exec -it masterRedis redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master          <span class="comment"># 当前节点的角色</span></span><br><span class="line">connected_slaves:0   <span class="comment"># 当前节点的子节点</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:f37ca91dd3b3578e83031f9ea087d64f9994dd9a</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入子节点1号的客户端，并配置父节点</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker exec -it salveRedis01 redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 116.62.151.26 49168</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) <span class="string">&quot;slave&quot;</span></span><br><span class="line">2) <span class="string">&quot;116.62.151.26&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 49168</span><br><span class="line">4) <span class="string">&quot;connected&quot;</span>         <span class="comment">#说明连接成功，如果没开安全组的话，这一行会是connecting下一行是-1，表示连接失败</span></span><br><span class="line">5) (<span class="built_in">integer</span>) 42</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入子节点2号的客户端，并配置父节点</span></span><br><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker exec -it salveRedis02 redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 116.62.151.26 49168</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; role</span><br><span class="line">1) <span class="string">&quot;slave&quot;</span></span><br><span class="line">2) <span class="string">&quot;116.62.151.26&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 49168</span><br><span class="line">4) <span class="string">&quot;connected&quot;</span></span><br><span class="line">5) (<span class="built_in">integer</span>) 112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看父节点的基本信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2              <span class="comment"># 两个子节点</span></span><br><span class="line">slave0:ip=116.62.151.26,port=6379,state=online,offset=112,lag=0</span><br><span class="line">slave1:ip=116.62.151.26,port=6379,state=online,offset=112,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:92ee701d04326eb2c74d8de1ea0fc2ec010f97df</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:112</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在父节点测试是否数据同步</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子节点1号查询</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子节点2号查询</span></span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure><p>也可以在配置文件中配置父节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置主节点的ip的端口</span></span><br><span class="line">slaveof 主机ip 端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果主机使用了config set masterauth password，或者主机配置文件中 requirepass password</span></span><br><span class="line"><span class="comment"># 则这里配置文件就要加上主机的密码来验证</span></span><br><span class="line">masterauth password</span><br></pre></td></tr></table></figure><p>主机可以写入也可以读取，但是从节点是不可以写入的，只可以读取主节点写入的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br></pre></td></tr></table></figure><p>主机宕机了之后，从机依旧可以读，但是这样的话，就不能往里面写入数据了。</p><p>（这里需要使用<strong>哨兵模式</strong>，即当主机宕机后，从机中会选举出来一个主机，这样的话就保留了写入操作）</p><p>当主机恢复运行，则恢复写入功能</p><p>从机宕机的话，对主机没有任何影响</p><p>当从机运行后，就恢复主机中的数据</p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><p>Slave 启动成功连接到 master 后会发送一个sync命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送<br>整个数据文件到slave，并完成一次完全同步。</p><ul><li><p>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</p></li></ul><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行</p><h3 id="主从连接的形式"><a href="#主从连接的形式" class="headerlink" title="主从连接的形式"></a>主从连接的形式</h3><ol><li>一对多</li></ol><img src="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" class title="主从复制"><ol start="2"><li>链状</li></ol><img src="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E9%93%BE%E7%8A%B6%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" class title="链状主从复制"><h3 id="哨兵（Sentinel）模式"><a href="#哨兵（Sentinel）模式" class="headerlink" title="哨兵（Sentinel）模式"></a>哨兵（Sentinel）模式</h3><p>该模式就是为了解决当主机宕机后，从机群无法有写入权限的问题。</p><p>该模式下，它会自动监控主机是否故障，当主机宕机后，从机群中会<strong>自立一个主机</strong>，从而就有了写入的功能</p><p>哨兵模式是一种特殊的模式，它是一个独立的进程。</p><p>其原理就是哨兵通过发送命令，等待redis服务器响应，从而监控多个Redis实例的功能</p><img src="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" class title="哨兵模式"><p>这里的哨兵有两个作用</p><ol><li>监控服务器的状态</li><li>当主机宕机后，会自动选择一个子节点作为主机，然后通过<strong>发布订阅模式</strong>通知其他子节点，修改配置文件</li></ol><p>当然，如果哨兵挂了怎么办？所以需要配置多个哨兵，然后这几个哨兵再互相监视</p><img src="/javaEE/Redis/2022/02/25/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4.png" class title="哨兵集群"><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行重新选举的过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover（故障转移）操作。</p><p>切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵进程的端口</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否以后台运行</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定的线程</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志名称</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置监视谁</span></span><br><span class="line"><span class="comment"># 2代表至少要有结果哨兵确认主机宕机</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"></span><br><span class="line">acllog-max-len 128</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line"></span><br><span class="line">SENTINEL resolve-hostnames no</span><br><span class="line"></span><br><span class="line">SENTINEL announce-hostnames no</span><br></pre></td></tr></table></figure><p>启动哨兵进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp18qscowpmxk6xpk38iZ redis]<span class="comment"># docker run -d -p 49103:26379 -v /home/redis/sentinel.conf:/etc/redis/sentinel.conf --name=sentinel redis redis-sentinel /etc/redis/sentinel.conf </span></span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>主从可以自动切换，可用性会更好</li></ol><p>缺点：</p><ol><li>redis不好在线扩容</li><li>实现哨兵模式的配置优点麻烦</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-发布订阅</title>
      <link href="/javaEE/Redis/2022/02/25/Redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/javaEE/Redis/2022/02/25/Redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h2><p>Redis发布订阅是一种消息通信的模式：发布者发送消息，订阅者接收消息</p><img src="/javaEE/Redis/2022/02/25/Redis-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.png" class title="Redis发布订阅"><p>三个角色：消息发布者、消息接收者、订阅的频道</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>publish channel message</code></td><td>发布消息到指定频道</td></tr><tr><td><code>psubscribe pattern [pattern..]</code></td><td>订阅一个或者多个符合给点pattern的频道</td></tr><tr><td><code>pubsub subcommand [argument [argument..]]</code></td><td>查看订阅和发布系统状态</td></tr><tr><td><code>punsubscribe [pattern [pattern..]]</code></td><td>退订所有符合模式的频道</td></tr><tr><td><code> subscribe channel [channel..]</code></td><td>订阅指定频道</td></tr><tr><td><code>unsubscribe channel [channel..]</code></td><td>退订指定频道</td></tr></tbody></table><p>下面直接上案例：</p><p>充当订阅者的cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE study</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;study&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>充当发布者的cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH study study</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>订阅者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE study</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;study&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;study&quot;</span></span><br><span class="line">3) <span class="string">&quot;designpattern&quot;</span></span><br></pre></td></tr></table></figure><p><strong>原理：</strong></p><p>Redis订阅发布底层是使用C实现的</p><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个频道！而字典的值则是一个链表，<br>链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。<br>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这<br>个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>该设计模式主要用于<strong>对象的复制</strong></p><p>此设计模式有多种实现：</p><ol><li>jdk内置cloneable接口</li><li>自定义接口</li></ol><h3 id="jdk内置cloneable接口"><a href="#jdk内置cloneable接口" class="headerlink" title="jdk内置cloneable接口"></a>jdk内置cloneable接口</h3><p>我们都知道object中有一个protected方法，叫clone，可以看到这是一个native方法（即该方法是由C++编写的，具体实现是根据操作系统而定）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>我们来自己重写一个这个方法试一试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreated;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">(String name, Date gmtCreated)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gmtCreated = gmtCreated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Video</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getGmtCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gmtCreated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGmtCreated</span><span class="params">(Date gmtCreated)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gmtCreated = gmtCreated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Video <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Video)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Video&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gmtCreated=&quot;</span> + gmtCreated +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Video video = <span class="keyword">new</span> Video();</span><br><span class="line">    video.setName(<span class="string">&quot;视频一号&quot;</span>);</span><br><span class="line">    video.setGmtCreated(<span class="keyword">new</span> Date());</span><br><span class="line">    System.out.println(video);</span><br><span class="line">    System.out.println(video.hashCode());</span><br><span class="line">    System.out.println(video.getGmtCreated().hashCode());</span><br><span class="line">    System.out.println(<span class="string">&quot;=============克隆后================&quot;</span>);</span><br><span class="line">    Video clone = (Video) video.clone();</span><br><span class="line">    System.out.println(clone);</span><br><span class="line">    System.out.println(clone.hashCode());</span><br><span class="line">    System.out.println(clone.getGmtCreated().hashCode());</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Video&#123;name=<span class="string">&#x27;视频一号&#x27;</span>, gmtCreated=Fri Feb 25 10:31:04 CST 2022&#125;</span><br><span class="line">269468037</span><br><span class="line">784235907</span><br><span class="line">=============克隆后================</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.CloneNotSupportedException: com.lizhi.demo1.Video</span><br><span class="line">at java.base/java.lang.Object.clone(Native Method)</span><br><span class="line">at com.lizhi.demo1.Video.clone(Video.java:35)</span><br><span class="line">at com.lizhi.demo1.CloneApplication.main(CloneApplication.java:13)</span><br></pre></td></tr></table></figure><p>可以发现，报错了，这是怎么回事，我不是已经重写了方法吗？</p><p>其实原因就是该类没有一个标记接口Cloneable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface to</span></span><br><span class="line"><span class="comment"> * indicate to the &#123;<span class="doctag">@link</span> java.lang.Object#clone()&#125; method that it</span></span><br><span class="line"><span class="comment"> * is legal for that method to make a</span></span><br><span class="line"><span class="comment"> * field-for-field copy of instances of that class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Invoking Object&#x27;s clone method on an instance that does not implement the</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Cloneable&lt;/code&gt; interface results in the exception</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * By convention, classes that implement this interface should override</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Object.clone&#125; (which is protected) with a public method.</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> java.lang.Object#clone()&#125; for details on overriding this</span></span><br><span class="line"><span class="comment"> * method.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that this interface does &lt;i&gt;not&lt;/i&gt; contain the &#123;<span class="doctag">@code</span> clone&#125; method.</span></span><br><span class="line"><span class="comment"> * Therefore, it is not possible to clone an object merely by virtue of the</span></span><br><span class="line"><span class="comment"> * fact that it implements this interface.  Even if the clone method is invoked</span></span><br><span class="line"><span class="comment"> * reflectively, there is no guarantee that it will succeed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.CloneNotSupportedException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Object#clone()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将video实现该接口后，启动程序，控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Video&#123;name=<span class="string">&#x27;视频一号&#x27;</span>, gmtCreated=Fri Feb 25 10:37:07 CST 2022&#125;</span><br><span class="line">269468037</span><br><span class="line">784153335</span><br><span class="line">=============克隆后================</span><br><span class="line">Video&#123;name=<span class="string">&#x27;视频一号&#x27;</span>, gmtCreated=Fri Feb 25 10:37:07 CST 2022&#125;</span><br><span class="line">1681595665</span><br><span class="line">784153335</span><br></pre></td></tr></table></figure><p>我们可以惊奇的发现，</p><p>两者的内容打印出来一模一样，两者的对象主体的hashcode是不同的，说明video和clone是货真价实的两个对象。</p><p>但是我们也发现他们的gmtCreated变量的hashcode是一样的，这说明两者指向的是同一个gmtCreated，有时候我们会有这样的需求，有时候我们不需要将复制后的对象内部指向的对象还是原来的那个对象，这时候我们就要修改clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">super</span>.clone();</span><br><span class="line">    Video v = (Video) obj;</span><br><span class="line">    v.setGmtCreated((Date) v.getGmtCreated().clone());</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义接口"><a href="#自定义接口" class="headerlink" title="自定义接口"></a>自定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Copyable</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">copy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现就不写啦，本质是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>该设计模式解决的问题是在用户不知道对象的建造过程和细节的情况下就可以直接创建<strong>复杂的对象</strong>。</p><p>该模式有两种实现方向：</p><ol><li>有一个制造者有自己的一套制造方案来制造该对象</li><li>自己指定制造计划</li></ol><h3 id="制造者制造"><a href="#制造者制造" class="headerlink" title="制造者制造"></a>制造者制造</h3><p>场景：造汽车</p><p>汽车类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CarBody carBody;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Lamp lamp;</span><br><span class="line">    <span class="keyword">private</span> Window window;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWhole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(carBody!=<span class="keyword">null</span>&amp;&amp;engine!=<span class="keyword">null</span>&amp;&amp;lamp!=<span class="keyword">null</span>&amp;&amp;window!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>车身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBody</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>车窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的车身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodCarBody</span> <span class="keyword">implements</span> <span class="title">CarBody</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好的车身&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好的车身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadCarBody</span> <span class="keyword">implements</span> <span class="title">CarBody</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;差的车身&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好的发动机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好的引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;差的发动机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的车窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodWindow</span> <span class="keyword">implements</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好的车窗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好的车窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadWindow</span> <span class="keyword">implements</span> <span class="title">Window</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;差的车窗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>车的建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCarBody</span><span class="params">(CarBody carBody)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addWindow</span><span class="params">(Window window)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addLamp</span><span class="params">(Lamp lamp)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEngine</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaZhongCarBulder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DaZhongCarBulder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        car = <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCarBody</span><span class="params">(CarBody carBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(carBody==<span class="keyword">null</span>)&#123;</span><br><span class="line">            car.setCarBody(<span class="keyword">new</span> GoodCarBody());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        car.setCarBody(carBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWindow</span><span class="params">(Window window)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(window==<span class="keyword">null</span>)&#123;</span><br><span class="line">            car.setWindow(<span class="keyword">new</span> GoodWindow());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        car.setWindow(window);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLamp</span><span class="params">(Lamp lamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lamp==<span class="keyword">null</span>)&#123;</span><br><span class="line">            car.setLamp(<span class="keyword">new</span> GoodLamp());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        car.setLamp(lamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(engine==<span class="keyword">null</span>)&#123;</span><br><span class="line">            car.setEngine(<span class="keyword">new</span> GoodEngine());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        car.setEngine(engine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!car.isWhole())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;零件不齐，车不能出厂&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指导者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(CarBuilder carBuilder)</span></span>&#123;</span><br><span class="line">        carBuilder.addWindow(<span class="keyword">null</span>);</span><br><span class="line">        carBuilder.addCarBody(<span class="keyword">null</span>);</span><br><span class="line">        carBuilder.addLamp(<span class="keyword">new</span> BadLamp());</span><br><span class="line">        carBuilder.addEngine(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> carBuilder.getCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义建造"><a href="#自定义建造" class="headerlink" title="自定义建造"></a>自定义建造</h3><p>我们发现，有车由四部分组成，这四部分可以是同一个工厂造出来的，所以我们可以结合一个抽象工厂模式，将产品制造交给工厂。</p><p>组件工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComponentFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">CarBody <span class="title">getCarBody</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Engine <span class="title">getEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Window <span class="title">getWindow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Lamp <span class="title">getLamp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好的组件工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadFactory</span> <span class="keyword">implements</span> <span class="title">ComponentFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBody <span class="title">getCarBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BadCarBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BadEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BadWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lamp <span class="title">getLamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BadLamp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的组件工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodFactory</span> <span class="keyword">implements</span> <span class="title">ComponentFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBody <span class="title">getCarBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoodCarBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoodEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoodWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lamp <span class="title">getLamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoodLamp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造CarBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">CarBuilder <span class="title">addCarBody</span><span class="params">(CarBody carBody)</span></span>;</span><br><span class="line">    <span class="function">CarBuilder <span class="title">addWindow</span><span class="params">(Window window)</span></span>;</span><br><span class="line">    <span class="function">CarBuilder <span class="title">addLamp</span><span class="params">(Lamp lamp)</span></span>;</span><br><span class="line">    <span class="function">CarBuilder <span class="title">addEngine</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体制造商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaZhongCarBulder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DaZhongCarBulder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        car = <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBuilder <span class="title">addCarBody</span><span class="params">(CarBody carBody)</span> </span>&#123;</span><br><span class="line">        car.setCarBody(carBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBuilder <span class="title">addWindow</span><span class="params">(Window window)</span> </span>&#123;</span><br><span class="line">        car.setWindow(window);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBuilder <span class="title">addLamp</span><span class="params">(Lamp lamp)</span> </span>&#123;</span><br><span class="line">        car.setLamp(lamp);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarBuilder <span class="title">addEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        car.setEngine(engine);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!car.isWhole())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;零件不齐，车不能出厂&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端自定义制造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DaZhongCarBulder daZhongCarBulder = <span class="keyword">new</span> DaZhongCarBulder();</span><br><span class="line">        ComponentFactory goodFactory = <span class="keyword">new</span> GoodFactory();</span><br><span class="line">        ComponentFactory badFactory = <span class="keyword">new</span> BadFactory();</span><br><span class="line">        <span class="comment">// 这就是链式编程</span></span><br><span class="line">        Car car = daZhongCarBulder</span><br><span class="line">                .addCarBody(goodFactory.getCarBody())</span><br><span class="line">                .addEngine(badFactory.getEngine())</span><br><span class="line">                .addLamp(goodFactory.getLamp())</span><br><span class="line">                .addWindow(goodFactory.getWindow())</span><br><span class="line">                .getCar();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h3><p>再来个案例：kfc点餐</p><p>首先食物接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饮料接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drink</span> <span class="keyword">extends</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>薯条接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chip</span> <span class="keyword">extends</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eatChip</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>炸鸡接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chicken</span> <span class="keyword">extends</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eatChicken</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奥尔良炸鸡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrleansFriedChicken</span> <span class="keyword">implements</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatChicken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奥尔良炸鸡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>孜然炸鸡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuminFriedChicken</span> <span class="keyword">implements</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatChicken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;孜然炸鸡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可乐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可口可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大薯条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigChip</span> <span class="keyword">implements</span> <span class="title">Chip</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatChip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大份薯条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>百事可乐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaiShi</span> <span class="keyword">implements</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;百事可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Food&gt; foods;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        foods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFood</span><span class="params">(Food food)</span></span>&#123;</span><br><span class="line">        foods.add(food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点单小程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderApplication</span><span class="params">()</span></span>&#123;</span><br><span class="line">        order = <span class="keyword">new</span> Order();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addFood</span><span class="params">(Food food)</span> </span>&#123;</span><br><span class="line">        order.addFood(food);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(order.getFoods().size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;您未点单！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OrderApplication orderApplication = <span class="keyword">new</span> OrderApplication();</span><br><span class="line">    Order order = orderApplication</span><br><span class="line">            .addFood(<span class="keyword">new</span> BigChip())</span><br><span class="line">            .addFood(<span class="keyword">new</span> OrleansFriedChicken())</span><br><span class="line">            .addFood(<span class="keyword">new</span> Cola())</span><br><span class="line">            .getOrder();</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-概述</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h2><p>Design Pattern是前辈们对代码开发经验的总结与归纳，是解决特定问题的一系列解决方案。</p><p>1995年，由GoF（Gang of Four）四人帮合作出版了《设计模式：可复用面向对象软件的基础》一书，一共收录了23种设计模式，人称Gof23设计模式</p><h3 id="创建型模式："><a href="#创建型模式：" class="headerlink" title="创建型模式："></a>创建型模式：</h3><ul><li>单例模式</li><li>简单工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ul><li>适配器模式</li><li>桥接模式</li><li>装饰器模式</li><li>组合模式</li><li>门面模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ul><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【4-Hard】寻找两个正序数组的中位数</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/24/%E3%80%904-Hard%E3%80%91%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/24/%E3%80%904-Hard%E3%80%91%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a>寻找两个正序数组的中位数</h2><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = <span class="comment">[1,3]</span>, nums2 = <span class="comment">[2]</span></span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = <span class="comment">[1,2,3]</span> ，中位数 2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="symbol">nums1</span> = [<span class="number">1</span>,<span class="number">2</span>], <span class="symbol">nums2</span> = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">2.50000</span></span><br><span class="line">解释：合并数组 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ，中位数 <span class="comment">(2 + 3)</span> / <span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m &lt;= 1000</code></li><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= m + n &lt;= 2000</code></li><li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li></ul><p><strong>Related Topics</strong></p><ul><li>数组</li><li>二分查找</li><li>分治</li></ul><h3 id="合并取中间值"><a href="#合并取中间值" class="headerlink" title="合并取中间值"></a>合并取中间值</h3><p>这种方法应该是大多数人的第一反应</p><p>使用一个list集合存放两个数组的值后排序</p><p>判断集合长度的奇偶性</p><p>偶数，返回中间两个数的和的平均值</p><p>奇数，返回中间那个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k : nums1) &#123;</span><br><span class="line">            list.add(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : nums2) &#123;</span><br><span class="line">            list.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">if</span>(size%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (list.get(size/<span class="number">2</span>)+list.get(size/<span class="number">2</span>-<span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(size/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h3><p>再来理一理题目的意思</p><p>有两个正序数组<code>num1</code>和<code>nums2</code></p><p>要返回这两个正序数组的中位数</p><p>这不就是归并中合并两个有序数组一样的思路吗</p><p>但是这里不需要完全合并，只需要合并到中间的位置就可了</p><p>说干就干</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 总长度</span></span><br><span class="line">        <span class="keyword">int</span> wholeSize = nums1.length + nums2.length;</span><br><span class="line">        <span class="comment">// 去中间值</span></span><br><span class="line">        <span class="keyword">int</span> mid = wholeSize / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 新建中间值+1长度的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[mid + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index1 == nums1.length) &#123;</span><br><span class="line">            <span class="comment">// num1已经放完了，直接放num2的值即可</span></span><br><span class="line">                temp[i] = nums2[index2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index2 == nums2.length) &#123;</span><br><span class="line">            <span class="comment">// num1已经放完了，直接放num2的值即可</span></span><br><span class="line">                temp[i] = nums1[index1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[index1] &lt;= nums2[index2]) &#123;</span><br><span class="line">            <span class="comment">// num1相对比较小，所以放num1的值</span></span><br><span class="line">                temp[i] = nums1[index1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// num2相对比较小，所以放num2的值</span></span><br><span class="line">                temp[i] = nums2[index2++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果总长度是偶数，则返回最后两个数的和的平均数</span></span><br><span class="line">        <span class="comment">// 如果总长度是奇数，则直接返回最后一个数即可</span></span><br><span class="line">        <span class="keyword">return</span> wholeSize % <span class="number">2</span> == <span class="number">0</span> ? (temp[mid] + temp[mid - <span class="number">1</span>]) / <span class="number">2.0</span> : temp[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-OOP七大原则</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-OOP%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h2><h3 id="开闭原则-Open-Closed-Principle-，OCP"><a href="#开闭原则-Open-Closed-Principle-，OCP" class="headerlink" title="开闭原则(Open-Closed Principle ，OCP)"></a>开闭原则(Open-Closed Principle ，OCP)</h3><p><strong>定义：</strong>对拓展开放，对修改关闭</p><p><strong>问题的由来：</strong>在软件的生命周期的，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧的代码引入错误。</p><p><strong>解决办法：</strong>当软件需要发生变化的时候，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p><p><strong>为什么要遵循开闭原则</strong></p><p>　　1、只要是面向对象的编程，在开发过程中都会强调开闭原则</p><p>　　2、是最基础的设计原则，其他五个设计原则都是开闭原则的具体形态</p><p>　　3、可以提高代码的复用性</p><p>　　4、可以提高代码的可维护性</p><h3 id="单一职责原则（Single-Responsibility-Principle-SRP）"><a href="#单一职责原则（Single-Responsibility-Principle-SRP）" class="headerlink" title="单一职责原则（Single Responsibility Principle,SRP）"></a>单一职责原则（Single Responsibility Principle,SRP）</h3><p><strong>定义：</strong>如果一个类具有多个职责，应当将对象解耦，提高内聚，分别创建一些类去一 一完成这些职责，</p><p><strong>核心：</strong>高内聚、低耦合。</p><p><strong>优点：</strong></p><p>　　1、降低类的功能复杂度</p><p>　　2、提高系统的可维护性</p><p>　　3、变更风险低</p><h3 id="里氏替换原则（Liskov-Substitution-Principle-，LSP）"><a href="#里氏替换原则（Liskov-Substitution-Principle-，LSP）" class="headerlink" title="里氏替换原则（Liskov Substitution Principle ，LSP）"></a>里氏替换原则（Liskov Substitution Principle ，LSP）</h3><p><strong>定义：</strong> 子类对象能够替代程序中父类对象出现的任何地方，并且保证原来的程序的逻辑行为不变及正确性不被破坏</p><p>里氏替换至少包含一下两个含义：</p><p>　1、如果继承是为了实现代码重用，那么共享的父类方法就应该保持不变，不能被子类重新定义。子类只能通过新添加方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方，子类也可以调用同一个继承得来的一致的方法，这时用子类对象将父类对象替换掉时，当然逻辑一致，相安无事。</p><p>​2、如果继承的目的是为了多态，而多态的前提就是子类覆盖并重新定义父类的方法，我们应该将父类定义为抽象类，并定义抽象方法，让子类重新定义这些方法，当父类是抽象类时，父类就是不能实例化的，也就不存在子类替换父类实例的现象。 </p><p><strong>优点：</strong>可以大大减少程序的bug以及增强代码的可读性。</p><h3 id="依赖倒置原则（Dependency-Inversion-Principle-，DIP）"><a href="#依赖倒置原则（Dependency-Inversion-Principle-，DIP）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle ，DIP）"></a>依赖倒置原则（Dependency Inversion Principle ，DIP）</h3><p><strong>定义：</strong>面向接口编程</p><p>本质就是通过抽象(接口或抽象类)使各个类或模块的实现彼此独立，不互相影响，实现模块间的松耦合。</p><h3 id="接口隔离原则-Interface-Segregation-Principle-ISP"><a href="#接口隔离原则-Interface-Segregation-Principle-ISP" class="headerlink" title="接口隔离原则(Interface Segregation Principle, ISP)"></a>接口隔离原则(Interface Segregation Principle, ISP)</h3><p><strong>定义：</strong>要用各个类建立他们需要的专用接口</p><p>它包含了2层意思：</p><p><strong>接口的设计原则：</strong>接口的设计应该遵循最小接口原则，不要把用户使用不到的方法塞进同一个接口里。如果一个接口的有方法没有被用户使用到，则说明该接口已经臃肿了，应该将其分割成几个功能专一的接口。</p><p><strong>接口的依赖（继承）原则：</strong>如果一个接口a继承另一个接口b，则接口a相当于继承了接口b的方法，那么接口a也应该遵循上述原则：不应该包含用户不使用的方法。 反之，则说明接口a被b给污染了，应该重新设计它们的关系。</p><h3 id="迪米特法则（Law-of-Demeter-，LOD）"><a href="#迪米特法则（Law-of-Demeter-，LOD）" class="headerlink" title="迪米特法则（Law of Demeter ，LOD）"></a>迪米特法则（Law of Demeter ，LOD）</h3><p><strong>定义：</strong>只与直接朋友交谈，不与陌生人通信</p><p><strong>直接朋友的定义：</strong></p><p>1）当前对象本身（this）</p><p>2）以参量形式传入到当前对象方法中的对象</p><p>3）当前对象的实例变量</p><p>4）当前对象的实例变量如果是一个聚集，那么聚集中的元素也都是朋友</p><p>5）当前对象所创建的对象</p><h3 id="合成复用原则（Composite-x2F-Aggregate-Reuse-Principle-，CARP）"><a href="#合成复用原则（Composite-x2F-Aggregate-Reuse-Principle-，CARP）" class="headerlink" title="合成复用原则（Composite&#x2F;Aggregate Reuse Principle ，CARP）"></a>合成复用原则（Composite&#x2F;Aggregate Reuse Principle ，CARP）</h3><p><strong>定义：</strong>尽量先使用<strong>组合或者内聚</strong>等关联关系来实现，其次才考虑使用继承来实现，因为java是单继承</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-配置文件</title>
      <link href="/javaEE/Redis/2022/02/24/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/javaEE/Redis/2022/02/24/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件redis-conf"><a href="#配置文件redis-conf" class="headerlink" title="配置文件redis.conf"></a>配置文件redis.conf</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>下面为常用的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明单位和不区分大小写</span></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"><span class="comment"># 可以配置多个conf文件组合起来</span></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"><span class="comment"># 网络模块</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启保护模式</span></span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接的服务器端口</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span></span><br><span class="line"><span class="comment"># 默认为 daemonize no</span></span><br><span class="line"><span class="comment"># 需要手动改为yes，我们需要后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果以后台方式运行，就需要指定一个pid文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)生产环境</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的日志文件名</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认有16个数据库</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示logo</span></span><br><span class="line">always-show-logo yes</span><br><span class="line"></span><br><span class="line">set-proc-title yes</span><br><span class="line"></span><br><span class="line">proc-title-template <span class="string">&quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"><span class="comment"># 可以设置Redis的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auth</span></span><br><span class="line"><span class="comment"># config set requirepass root</span></span><br><span class="line"><span class="comment"># 设置密码使用命令</span></span><br><span class="line">requirepass root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### CLIENTS ####################################</span></span><br><span class="line"><span class="comment"># 客户端的一些限</span></span><br><span class="line"><span class="comment"># 最大客户端连接数</span></span><br><span class="line">maxclients 10000</span><br><span class="line"></span><br><span class="line"><span class="comment">############################## MEMORY MANAGEMENT ################################</span></span><br><span class="line"><span class="comment"># 内存设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大内存</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment"># 内存满了，有什么策略，和JUC中的那四种拒绝策略有点类似</span></span><br><span class="line"><span class="comment"># 1.volatile-lru:只对设置了过期时间的key进行lru</span></span><br><span class="line"><span class="comment"># 2.allkeys-lru:删除lru算法的key</span></span><br><span class="line"><span class="comment"># 3.volatile-random:随机删除即将过期的</span></span><br><span class="line"><span class="comment"># 4.allkeys-random:随机删除</span></span><br><span class="line"><span class="comment"># 5.volatile-ttl:删除即将过期的</span></span><br><span class="line"><span class="comment"># 6.noeviction:返回错误</span></span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# LAZY FREEING ####################################</span></span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-flush no</span><br></pre></td></tr></table></figure><h3 id="配置RDB（Redis-DataBase）持久化"><a href="#配置RDB（Redis-DataBase）持久化" class="headerlink" title="配置RDB（Redis DataBase）持久化"></a>配置RDB（Redis DataBase）持久化</h3><p>Redis是内存性数据库，如果不讲内存中的数据保存到磁盘中，那么一旦服务器退出，服务器中的服务器状态也就消失了，所以需要学会Redis中的持久化操作</p><img src="/javaEE/Redis/2022/02/24/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/RDB%E6%96%87%E4%BB%B6.png" class title="RDB文件"><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是Snapshot快照，它恢复时是将快照文件直接读取到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文<br>件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢<br>复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p><p>RDB的优点是效率高，对于数据的完整性要求不高</p><p>RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>rdb文件默认保存为<code>dump.rdb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment"># 快照：做持久化的时候会用到。</span></span><br><span class="line"><span class="comment"># 在规定的时间内执行了多少次操作就会生成一个.rdb文件或者.aof文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis是内存数据库，如果没有持久化，用完数据就没了</span></span><br><span class="line"><span class="comment"># 持久化规则</span></span><br><span class="line"><span class="comment"># 3600s内至少有一个key进行了修改，则进行持久化操作</span></span><br><span class="line"> save 3600 1</span><br><span class="line"><span class="comment"># 300s内至少有100个key进行了修改，则进行持久化操作</span></span><br><span class="line"> save 300 100</span><br><span class="line"><span class="comment"># 60s内至少有10000个key进行了修改，则进行持久化操作</span></span><br><span class="line"> save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化出错后，是否还继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否压缩rdb文件，消耗CPU资源</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否校验rdb文件的数目</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化生成的文件名字</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存的目录，当前目录</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><h3 id="配置AOF（Append-Only-File）文件"><a href="#配置AOF（Append-Only-File）文件" class="headerlink" title="配置AOF（Append Only File）文件"></a>配置AOF（Append Only File）文件</h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis<br>启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复<br>工作</p><img src="/javaEE/Redis/2022/02/24/Redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/AOF%E6%96%87%E4%BB%B6.png" class title="AOF文件"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"><span class="comment"># 持久化文件aof的配置</span></span><br><span class="line"><span class="comment"># 默认关闭aof，默认开启rdb的持久化，大部分情况下，rdb完全够用</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化文件的名字</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都同步一下</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每1s都同步一下</span></span><br><span class="line"><span class="comment"># appendfsync no     # 不同步，操作系统自己同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否重写</span></span><br><span class="line"><span class="comment"># incrby view 10</span></span><br><span class="line"><span class="comment"># incrby view 20</span></span><br><span class="line"><span class="comment"># 重写后</span></span><br><span class="line"><span class="comment"># incrby 30</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>如果aof中被恶意篡改了，这时候redis是启动不起来的，这时候可以使用redis提供的一个工具<code>redis-check-aof.exe</code></p><p>优点：每一次修改都同步，文件的完整性会更好，</p><p>缺点：该文件远远大于rdb，修复速度远远慢于rdb，运行效率比rdb低</p><p><strong>小结：</strong></p><ol><li><p>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p></li><li><p>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协<br>自加保存每次写的操作到文件未尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p></li><li><p><strong>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</strong></p></li><li><p>同时开启两种持久化方式</p></li></ol><ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB<br> 文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合<br> 用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><ol start="5"><li>性能建议</li></ol><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1这条规则。</li><li>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了<ul><li>代价一是带来了持续的IO</li><li>代价二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite 的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li></ul></li><li>如果不Enable AOF，仅靠Master-Slave Repllcation（主从复制）实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave 同时断电，会丢失十几分钟的数据，启动脚本也要比较两个Master&#x2F;Slave中的RDB文件，载入较新的那个。</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-整合SpringBoot</title>
      <link href="/javaEE/Redis/2022/02/24/Redis-%E6%95%B4%E5%90%88SpringBoot/"/>
      <url>/javaEE/Redis/2022/02/24/Redis-%E6%95%B4%E5%90%88SpringBoot/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h2><p>在SpringBoot2.x之后，底层已经不再使用jedis操作Redis了，而是lettuce</p><p>jedis：采用的直连，如果有多个线程操作的话，是不安全的，需要使用jedis pool连接池来解决问题（BIO模式）</p><p>lettcue：采用netty，实例可以在多个实例中共享，不存在线程不安全的问题（Dubbo底层也用到了它）（NIO模式）</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、观察RedisAutoConfiguration源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 这说明我们可以自定义template</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 因为我们平时使用string会非常多，所以内置了一个StringRedisTemplate</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、配置连接，看源码可以发现，就算我们不配置，springboot也默认可以连接本地的redis</p><img src="/javaEE/Redis/2022/02/24/Redis-%E6%95%B4%E5%90%88SpringBoot/RedisProperties.png" class title="RedisProperties"><p>4、测试</p><p>先打开命令行客户端查看全部的key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><p>测试类测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        connection.flushAll();</span><br><span class="line">        connection.flushDb();</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;springboot integrated Redis&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行客户端查看全部的key，可以发现数据成功插入了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;springboot integrated Redis&quot;</span></span><br></pre></td></tr></table></figure><h4 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h4><p>先看下源码</p><img src="/javaEE/Redis/2022/02/24/Redis-%E6%95%B4%E5%90%88SpringBoot/RedisTemplate%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8.png" class title="RedisTemplate中的序列化器"><p>如果我们没有自定义这些序列化，那么他们都会被设置为内置的defaultSerializer，那么这种jdk的序列化会使我们的中文转义，这时候我们需要使用JSON来实现序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.defaultSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultSerializer = <span class="keyword">new</span> JdkSerializationRedisSerializer(<span class="keyword">this</span>.classLoader != <span class="keyword">null</span> ? <span class="keyword">this</span>.classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们直接上案例：</p><h4 id="使用jdk内置序列化器"><a href="#使用jdk内置序列化器" class="headerlink" title="使用jdk内置序列化器"></a>使用jdk内置序列化器</h4><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接测试将对象写入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="type">void</span> testSerialization()&#123;</span><br><span class="line">    <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    <span class="keyword">user</span>.setName(&quot;zhima&quot;);</span><br><span class="line">    <span class="keyword">user</span>.setAge(<span class="number">19</span>);</span><br><span class="line">    redisTemplate.opsForValue().<span class="keyword">set</span>(&quot;user&quot;, <span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(redisTemplate.opsForValue().<span class="keyword">get</span>(&quot;user&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行发现报错了，这就想到了我们从源码中看到的JdkSerializationRedisSerializer，如果我们没有配置自己想要的序列化器，那么就默认为此序列化器，所以知道报这个错误的原因是user没有实现序列化接口，那我们来实现以下序列化接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.redis.serializer.SerializationException: Cannot serialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to serialize object using DefaultSerializer; nested exception is java.lang.IllegalArgumentException: DefaultSerializer requires a Serializable payload but received an object of <span class="built_in">type</span> [com.lizhi.springbootredis.pojo.User]</span><br></pre></td></tr></table></figure><p>这时候再执行，看控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User(name=zhima, age=19)</span><br></pre></td></tr></table></figure><h4 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h4><img src="/javaEE/Redis/2022/02/24/Redis-%E6%95%B4%E5%90%88SpringBoot/RedisSerializer%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" class title="RedisSerializer接口实现类"><p>配置自定义redisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;myRedisTemplate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">    StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    objectJackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">    <span class="comment">// hash的value使用JSON序列化</span></span><br><span class="line">    template.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">    <span class="comment">// value使用JSON序列化</span></span><br><span class="line">    template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">    <span class="comment">// hash表的key使用string的序列化器</span></span><br><span class="line">    template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">    <span class="comment">// key采用string的序列化器</span></span><br><span class="line">    template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再执行刚刚的测试，就会发现，命令行中的key已经是一个正常的字符串了</p><h4 id="工具类RedisUtils"><a href="#工具类RedisUtils" class="headerlink" title="工具类RedisUtils"></a>工具类RedisUtils</h4><p>这样使用原生的API太麻烦了，我们可以自己编写一个工具类。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接:https://pan.baidu.com/s/1CZG5D8QUsz1NnqBjXZf0tg </span><br><span class="line">提取码:24m2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-通过Jredis操作Redis</title>
      <link href="/javaEE/Redis/2022/02/24/Redis-%E9%80%9A%E8%BF%87Jedis%E6%93%8D%E4%BD%9CRedis/"/>
      <url>/javaEE/Redis/2022/02/24/Redis-%E9%80%9A%E8%BF%87Jedis%E6%93%8D%E4%BD%9CRedis/</url>
      
        <content type="html"><![CDATA[<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis其实就是java用来操作Redis的一个工具包</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用封装好的对象测试连接Redis</p><img src="/javaEE/Redis/2022/02/24/Redis-%E9%80%9A%E8%BF%87Jedis%E6%93%8D%E4%BD%9CRedis/Jedis%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.png" class title="Jedis类构造方法"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 控制台输出PONG</span></span><br></pre></td></tr></table></figure><p>可以点进源码看一下</p><img src="/javaEE/Redis/2022/02/24/Redis-%E9%80%9A%E8%BF%87Jedis%E6%93%8D%E4%BD%9CRedis/Jedis%E7%B1%BB%E6%BA%90%E7%A0%81.png" class title="Jedis类源码"><p>我们会发现，这些方法不就是我们当时写的那些吗，只不过都被封装成了方法供我们使用。</p><h3 id="实现事务"><a href="#实现事务" class="headerlink" title="实现事务"></a>实现事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.set(<span class="string">&quot;money&quot;</span>,<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;out&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        jedis.watch(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        jedis.decrBy(<span class="string">&quot;mondy&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        jedis.incrBy(<span class="string">&quot;out&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        multi.exec();</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上和命令行的命令是一模一样的</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-实现乐观锁</title>
      <link href="/javaEE/Redis/2022/02/24/Redis-%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/javaEE/Redis/2022/02/24/Redis-%E5%AE%9E%E7%8E%B0%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="浅实现一下乐观锁"><a href="#浅实现一下乐观锁" class="headerlink" title="浅实现一下乐观锁"></a>浅实现一下乐观锁</h3><p>这里需要使用watch，直接上案例吧</p><p>需求：现有存款100元，花出去30元，还剩下70元</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 30</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 30</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 70</span><br><span class="line">2) (<span class="built_in">integer</span>) 30</span><br><span class="line"><span class="comment"># watch在事务执行结束后就失效了</span></span><br></pre></td></tr></table></figure><p>现在我们开两个客户端cli-1和cli-2，按照以下的命令和顺序执行</p><p><strong>cli-1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p><strong>cli-2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">&quot;70&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby money 230</span><br><span class="line">(<span class="built_in">integer</span>) 300</span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">&quot;300&quot;</span></span><br></pre></td></tr></table></figure><p><strong>cli-1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 监视的值发生了改变，所以该事务执行失败，这个时候money上的watch没有解除，可以通过unwactch解除</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">&quot;300&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多并发中的锁</title>
      <link href="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/"/>
      <url>/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要锁？"><a href="#为什么需要锁？" class="headerlink" title="为什么需要锁？"></a>为什么需要锁？</h3><p>在单线程环境下，不论怎么操作数据都不会出现什么致命的操作，但是在这个多并发的时代，我们更多的要考虑多并发，并保证多并发环境的安全性。</p><p>在并发环境下，多个线程争抢操作<strong>同一份数据</strong>，这样可能会导致数据异常，这个时候就需要一种机制来保证这一份数据的安全性。</p><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/JVM%E5%86%85%E5%AD%98%E7%AE%80%E7%95%A5%E5%9B%BE.png" class title="JVM内存简略图"><h3 id="锁是如何实现的？"><a href="#锁是如何实现的？" class="headerlink" title="锁是如何实现的？"></a>锁是如何实现的？</h3><p>在java中，每一个Object都有一把锁，这把锁放在对象的对象头中，锁中记录了当前对象被哪个线程所占用。</p><h4 id="内存中的对象结构"><a href="#内存中的对象结构" class="headerlink" title="内存中的对象结构"></a>内存中的对象结构</h4><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84.png" class title="对象结构"><p><strong>对齐填充字节</strong>是为了满足java对象必须是8比特的倍数这一条件所设计的</p><p><strong>实例数据</strong>是为了保存对象属性和方法的</p><p><strong>对象头</strong>是为了保存对象的运行时数据，对象头包含了两部分，一个是Mark Word 一个是Class Pointer</p><ul><li><p>Class Pointer 指向Class对象</p></li><li><p>Mark Word (32 bit)存放了很多和当前对象运行时状态有关的数据</p><ul><li>hashCode</li><li>锁状态</li></ul></li></ul><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/%E5%AF%B9%E8%B1%A1%E5%A4%B4%E7%9A%84MarkWord.png" class title="对象头的MarkWord"><h3 id="synchronized实现原理"><a href="#synchronized实现原理" class="headerlink" title="synchronized实现原理"></a>synchronized实现原理</h3><p>synchronized被编译后会生成monitorenter和monitorexit两个字节码指令，依赖这两个指令就可以实现锁的机制，从而实现线程的同步</p><p>这是未上锁的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:===&gt;&quot;</span>+count++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TestSync ts = <span class="keyword">new</span> TestSync();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            ts.add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            ts.add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            ts.add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/%E6%9C%AA%E5%8A%A0%E9%94%81%E7%9A%84%E7%BB%93%E6%9E%9C.png" class title="未加锁的结果"><p>我们来加一下synchronized代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:===&gt;&quot;</span>+count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/%E5%8A%A0%E9%94%81%E7%9A%84%E7%BB%93%E6%9E%9C.png" class title="加锁的结果"><p>可以发现结果十分正确，我们来反编译一下，得到以下字节码文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">javap -c .\TestSync.class</span><br><span class="line">Compiled from <span class="string">&quot;TestSync.java&quot;</span></span><br><span class="line">public class com.lizhi.TestSync &#123;</span><br><span class="line">  public com.lizhi.TestSync();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       4: <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">  public void add();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup</span><br><span class="line">       2: astore_1</span><br><span class="line">       3: monitorenter</span><br><span class="line">       4: getstatic     <span class="comment">#2                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">       7: ldc2_w        <span class="comment">#3                  // long 30l</span></span><br><span class="line">      10: invokevirtual <span class="comment">#5                  // Method java/util/concurrent/TimeUnit.sleep:(J)V</span></span><br><span class="line">      13: goto          21</span><br><span class="line">      16: astore_2</span><br><span class="line">      17: aload_2</span><br><span class="line">      18: invokevirtual <span class="comment">#7                  // Method java/lang/InterruptedException.printStackTrace:()V</span></span><br><span class="line">      21: getstatic     <span class="comment">#8                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      24: invokestatic  <span class="comment">#9                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;</span></span><br><span class="line">      27: invokevirtual <span class="comment">#10                 // Method java/lang/Thread.getName:()Ljava/lang/String;</span></span><br><span class="line">      30: aload_0</span><br><span class="line">      31: dup</span><br><span class="line">      32: getfield      <span class="comment">#11                 // Field count:I</span></span><br><span class="line">      35: dup_x1</span><br><span class="line">      36: iconst_1</span><br><span class="line">      37: iadd</span><br><span class="line">      38: putfield      <span class="comment">#11                 // Field count:I</span></span><br><span class="line">      41: invokedynamic <span class="comment">#12,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;</span></span><br><span class="line">      46: invokevirtual <span class="comment">#13                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      49: aload_1</span><br><span class="line">      50: monitorexit</span><br><span class="line">      51: goto          59</span><br><span class="line">      54: astore_3</span><br><span class="line">      55: aload_1</span><br><span class="line">      56: monitorexit</span><br><span class="line">      57: aload_3</span><br><span class="line">      58: athrow</span><br><span class="line">      59: <span class="built_in">return</span></span><br><span class="line">    Exceptio n table:</span><br><span class="line">       from    to  target <span class="built_in">type</span></span><br><span class="line">           4    13    16   Class java/lang/InterruptedException</span><br><span class="line">           4    51    54   any</span><br><span class="line">          54    57    54   any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在第3行和第50行出现了monitorenter和monitorexit</p><h4 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h4><p>该单词的意思是监视器，可以将其想成一间宾馆的客房，把各个线程想像成客人。如果客人未退房，在这之后的客人则无法入住，只能等待这个客人退房后方可入住。</p><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/monitor%E7%9A%84%E7%AD%89%E5%BE%85%E6%9C%BA%E5%88%B6.jpg" class title="monitor的等待机制"><p><strong>monitor是依赖于操作系统的mutex lock来实现的</strong></p><p>java线程实际上是对操作系统线程的映射，每当挂起或者唤醒一个线程都要切换</p><p>操作系统内核态，这种操作是比较重量级的，在一些情况下甚至切换时间会超过任务本身执行的时间，这样的情况下，使用synchronized的会对系统的性能产生很严重的影响，但是从java6开始，synchronized进行了优化，引入了偏向锁和轻量级锁。</p><h4 id="锁的四种状态"><a href="#锁的四种状态" class="headerlink" title="锁的四种状态"></a>锁的四种状态</h4><p>由低到高分别是：无锁、偏向锁、轻量级锁、重量级锁。</p><p>这就与Mark Word中的四种状态对应上了</p><p>注意：锁只能升级不能降级</p><p><strong>无锁</strong></p><p>无锁即<strong>没有</strong>对自身资源上锁，所有线程都可以拿到资源并操作</p><p>这就可能出现两种情况</p><ol><li>某个对象不会出现在多线程环境下，或者说即使出现在多线程环境下也不会出现竞争的情况</li><li>资源会被竞争，但是我不想对资源锁定，不过这样也不行，会导致一些问题，就想通过一种其他机制来控制多线程，</li></ol><p>比如说，如果有多个进程想修改同一个值，但是只能有一个线程修改成功，其他失败的线程需要不断尝试，直到修改成功 ，这就是CAS（Compare And Swap）,CAS在操作系统中通过一条指令来实现，所以其就可以保证原子性，有了这种机制，我们就可以实现无锁编程</p><p><strong>偏向锁</strong></p><p>假如一个对象被加锁了，那么在实际运行过程中只有一个线程会获得这个对象锁，并只有当线程执行完任务，才会将锁释放。</p><p>我们设想的是，最好这个对象能够认识这个线程，当这个线程过来，那么这个对象就把自己的锁给他，这可以说这个对象偏爱这个线程，这就是偏向锁的概念</p><p>那么这个认识的人，被这个对象记在哪里呢？那就是在对象头中MarkWord的线程ID中，假如情况发生了变化，这个对象发现，不止有一个线程在争抢锁，那么该偏向锁会直接升级成轻量级锁</p><p><strong>轻量级锁</strong></p><p>那当锁升级为轻量级锁的时候，如何判断线程和所之间的绑定关系呢？可以再看下那张markword的表，这里已经不再使用线程ID这个字段了，而是将30bit变为指向线程栈中的锁记录（Lock Record）的指针</p><p>当一个线程想要获得对象的锁的时候，加入看到锁的标志位为00那么就知道它是轻量级锁，这时候线程会在自己的虚拟机栈中开辟一块被称为Lock Record的空间（线程私有的哦），该控件用来存放对象头中的Mark word的副本以及owner指针，线程通过CAS去尝试获得锁，一旦获取那么将会复制该对象头中的markword到本线程的Lock record中并且将Locker record中的owner指针指向该对象，并且对象的前三十位将会生成一个指针，指向线程虚拟机栈中的Lock Record，这样一来就实现了线程和对象锁的绑定。</p><p>当线程已经被抢占了，那其他想抢占的线程会自旋等待（可以理解为轮询），不断尝试拿到锁，这种操作区别于被操作系统挂起阻塞，如果对象的锁很快就被释放的话，自旋就不需要进行系统中断和重新恢复，所以它的效率会更高。</p><p>自旋相当于CPU空转，如果CPU空转时间过长，性能也会产生损耗，然后就有了一种优化，就是适应性自旋。简单来说，就是自旋的时间会根据上一次在同一个锁上自旋的时间以及锁的状态来决定的</p><p><strong>重量级锁</strong></p><p>如果同时有多个线程要获得这个对象锁，也就是说一旦自旋等待的线程超过一个，则会升级为重量级锁，那么这个时候，这就需要使用monitor来对线程进行控制，此时将会完全锁定资源，对线程的管控也更为严格</p><h3 id="无锁编程"><a href="#无锁编程" class="headerlink" title="无锁编程"></a>无锁编程</h3><p>java中的synchronized就是悲观锁（Pessimistic Concurrency Control），什么叫悲观锁呢？</p><p>简单来说就是操作系统会悲观地认为，如果不严格同步线程调用，那么一定会产生异常，所以互斥锁会锁定资源，直供一个线程使用，而阻塞其他线程，因此叫悲观锁，但是悲观锁不是万能的，如果大部分操作都是读的操作，那么就没有必要在每次调用的时候都锁定资源。可能会出现同步代码块执行的耗时远远小于线程切换的耗时。使用悲观锁，会导致性能十分不容乐观，比如大量用户需要同时读取同一份资源，如果使用的是悲观锁，则同一时间只能有一个用户可以查看，其他用户都在一直白屏，但是！其实对于读的操作，即使是多个线程同时操作该数据，也不会对该数据造成影响，我们能不能在不锁定资源的情况下，也可以对线程调用进行一些协调呢？这时候就出现了乐观锁这种机制，实现原理就是CAS（Compare And Swap）</p><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>我们来举个栗子：人就是线程，厕所就是对象，该对象有一个值来表示是否被占用occupy 0表示空闲 1表示有人</p><p>很多人要去抢厕所，然后线程A（Old Value &#x3D; 0 ，new Value &#x3D;1）、B（Old Value &#x3D; 0，new Value &#x3D; 1）这两个人冲到了最前面，然后A率先和厕所的occupy比较（Compare）发现和oldValue一致，则将oldValue与厕所的occupy交换（And Swap），这时候B一看自己的oldValue与厕所的occupy（1）不一致，他很不甘心，但也只能在厕所外踱步（自旋），通常在等了一段时间后（设置最大自旋次数），骂出一句国粹后就离去了</p><p>这时候可能就出现了问题，因为Compare和Swap是两个操作，没有原子性，这就有可能出现，当A即将将值改为1的那一刹那，B抢到了时间片，将其改为了1，然后A也将其改为1，这就很尴尬了，两个人一起进入了厕所。</p><p>那么如何保证CAS的原子性呢？难道还是锁来实现同步吗？这不就是一个鸡生蛋蛋生鸡的问题了吗？</p><p>其实啊，各种不同架构的CPU都提供了指令级别的CAS原子操作，</p><p>比如在X86架构下，通过cmpxchg指令可以支持CAS</p><p>在ARM下，通过LL&#x2F;SC来实现CS……</p><p>也就是说不通过操作系统的同步原语（比如 mutex），CPU已经实现了CS，上层只需要调用即可，这样我们就可以不依赖锁来进行线程同步，但是这也不意味着无锁可以完全代替有锁</p><h4 id="利用CAS特性来进行无锁编程"><a href="#利用CAS特性来进行无锁编程" class="headerlink" title="利用CAS特性来进行无锁编程"></a>利用CAS特性来进行无锁编程</h4><p>需求：使用三条线程，将一个值，从0累加到1000</p><p>1、错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">0</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">while</span>(count&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:==&gt;&quot;</span>+count++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">0</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">while</span>(count&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (Application2.class)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:==&gt;&quot;</span>+count++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、无锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AtomicInteger count =<span class="keyword">new</span> AtomicInteger(<span class="number">0</span>) ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">while</span>(count.get()&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:==&gt;&quot;</span>+count.getAndIncrement());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>探究源码</p><p>AtomicInteger的getAndIncrement方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> U.getAndAddInt(<span class="keyword">this</span>, VALUE, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>U的getAndAddInt方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> jdk.internal.misc.Unsafe U = jdk.internal.misc.Unsafe.getUnsafe();</span><br></pre></td></tr></table></figure><p>U是一个操作底层的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        v = getIntVolatile(o, offset);</span><br><span class="line">    &#125; <span class="keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSetInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="keyword">int</span> expected,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> compareAndSetInt(o, offset, expected, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSetInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">int</span> expected,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">int</span> x)</span></span>;</span><br></pre></td></tr></table></figure><p>启动次数可以通过启动参数来配置，默认是10，所以不会出现死循环</p><blockquote><p>Unsafe</p></blockquote><img src="/javaEE/JUC/2022/02/23/JUC-%E5%A4%9A%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E9%94%81/Unsafe%E7%9A%84%E5%8A%9F%E8%83%BD%E5%9B%BE.png" class title="Unsafe的功能图">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-事务</title>
      <link href="/javaEE/Redis/2022/02/23/Redis-%E4%BA%8B%E5%8A%A1/"/>
      <url>/javaEE/Redis/2022/02/23/Redis-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>我们在MySQL中学习的事务具有ACID原则</p><p><strong>原子性（Atomicity）</strong></p><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p><strong>一致性（Consistency）</strong></p><p>事务前后数据的完整性必须保持一致。</p><p><strong>隔离性（Isolation）</strong></p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p><p><strong>持久性（Durability）</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><h3 id="Redis中的事务"><a href="#Redis中的事务" class="headerlink" title="Redis中的事务"></a>Redis中的事务</h3><p>事务的本质即：一组命令一起执行，不允许被插队。</p><p>在Redis中，单条命令是原子性的，但是事务不保证原子性</p><p>事务没有隔离级别的概念</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; hset user:1 name zhima</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; hset user:1 age 19</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; hset user:1 address Suzhou</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; hmget user:1 name age address</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 1</span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">4) 1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">   2) <span class="string">&quot;19&quot;</span></span><br><span class="line">   3) <span class="string">&quot;Suzhou&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中途放弃事务</span></span><br><span class="line">127.0.0.1:6379&gt; discard</span><br></pre></td></tr></table></figure><blockquote><p>编译时异常：即代码本身又问退，比如<code>127.0.0.1:6379&gt; asdmlk  (error) ERR unknown command &#39;asdmlk&#39;</code>命令行会直接报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k2</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>可以发现所有的命令都没有执行。</p><blockquote><p>运行时异常：如果事务队列中存在这种错误，其他语句照常执行，该语句不执行，抛出异常</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 var</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">2) <span class="string">&quot;var&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS和BS架构是什么？</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/23/CS%E5%92%8CBS%E6%9E%B6%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/23/CS%E5%92%8CBS%E6%9E%B6%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="C-x2F-S架构和B-x2F-S架构"><a href="#C-x2F-S架构和B-x2F-S架构" class="headerlink" title="C&#x2F;S架构和B&#x2F;S架构"></a>C&#x2F;S架构和B&#x2F;S架构</h2><h3 id="C-x2F-S架构"><a href="#C-x2F-S架构" class="headerlink" title="C&#x2F;S架构"></a>C&#x2F;S架构</h3><blockquote><p>Client&#x2F;Server客户端&#x2F;服务器</p></blockquote><p>客户端是针对某一具体业务专门开发的软件，是需要专门安装的软件。</p><p>由于客户端是专用的软件，所以客户端程序一般也具有对具体业务进行处理的能力，可以减轻服务端压力</p><p><strong>优点：</strong>速度快，安全性较高</p><p><strong>致命问题：</strong>版本升级成本很高</p><p>就比如QQ、微信等应用程序</p><h3 id="B-x2F-S架构"><a href="#B-x2F-S架构" class="headerlink" title="B&#x2F;S架构"></a>B&#x2F;S架构</h3><blockquote><p>Browser&#x2F;Serve浏览器&#x2F;服务器</p></blockquote><p>它其实也是一种特殊的C&#x2F;S架构，只不过这个Client是浏览器，是一个通用的客户端（浏览器），所以没有对具体业务进行处理的能力，速度降低。</p><p><strong>优点：</strong>不存在客户端升级的问题</p><p><strong>致命问题：</strong>速度慢，考虑兼容性的问题，安全性低</p><p>就比如，网页版QQ</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【3-Medium】无重复字符的最长子串</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;abcabcbb&quot;</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;bbbbb&quot;</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span></span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;pwwkew&quot;</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><p><strong>Related Topics</strong></p><ul><li>哈希表</li><li>字符串</li><li>滑动窗口</li></ul><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h3><p>遍历数组的所有的区间，将满足题意区间长度的最大值返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果是无重复的子串才需要和 maxLength 作比较</span></span><br><span class="line">                <span class="keyword">if</span> (allUnique(s, i, j)) &#123;</span><br><span class="line">                    maxLength = Math.max(maxLength, j - i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该函数的作用是返回该区间是否有重复的字符，有则返回false，没有则返回true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">allUnique</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里使用ArrayList也是可以的</span></span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 看s的[i,j]区间内是否有重复的字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = i; x &lt;= j; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(s.charAt(x))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(s.charAt(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间会有重复的比较</p><p>导致效率十分低下</p><p>当string长度十分大的时候，一定会导致超时</p><h3 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h3><p>思路如下组图所示</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process01.png" class title="滑动窗口process01"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process02.png" class title="滑动窗口process02"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process03.png" class title="滑动窗口process03"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process04.png" class title="滑动窗口process04"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process05.png" class title="滑动窗口process05"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process06.png" class title="滑动窗口process06"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process07.png" class title="滑动窗口process07"><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3process08.png" class title="滑动窗口process08"><blockquote><p>示例代码 1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这是完完全全遵守滑动窗口的思路</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.length();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sArray = s.toCharArray();</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// [left,right)是没有重复元素的区间</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; size) &#123;</span><br><span class="line">            <span class="comment">// 如果窗口中没有此元素或者出现次数为0，扩大右边界</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt; size &amp;&amp; window.getOrDefault(sArray[right], <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                window.merge(sArray[right++], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(right - left, maxLength);</span><br><span class="line">            <span class="comment">// 如果走到了尾部，不需要再缩小窗口了，直接返回最大值即可</span></span><br><span class="line">            <span class="keyword">if</span> (right == size) &#123;</span><br><span class="line">                <span class="keyword">return</span> maxLength;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有到尾部，right所在的位置就是[left,right)中重复的元素</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">while</span> (sArray[left] != sArray[right]) &#123;</span><br><span class="line">                window.merge(sArray[left++], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            window.merge(sArray[left++], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这道题目中用<code>set</code>来充当<code>window</code>也是可以的</p><blockquote><p>示例代码 2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.length();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sArray = s.toCharArray();</span><br><span class="line">        Set&lt;Character&gt; window = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; size) &#123;</span><br><span class="line">            <span class="comment">// 只要窗口中没有sArray[right]，就一直扩大右边界</span></span><br><span class="line">            <span class="keyword">while</span> (right &lt; size &amp;&amp; !window.contains(sArray[right])) &#123;</span><br><span class="line">                window.add(sArray[right++]);</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(right - left, maxLength);</span><br><span class="line">            <span class="comment">// 说明到了尾部</span></span><br><span class="line">            <span class="keyword">if</span> (right == size) &#123;</span><br><span class="line">                <span class="keyword">return</span> maxLength;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (sArray[left] != sArray[right]) &#123;</span><br><span class="line">                window.remove(sArray[left++]);</span><br><span class="line">            &#125;</span><br><span class="line">            window.remove(sArray[left++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这两种都不大好</p><p>这两种的window的定义都是s的<code>[legft,right)</code>区间是不重复的子串</p><p>下面看window的定义是s的<code>[left,right]</code>区间不是重复的子串的时候该如何写代码</p><blockquote><p>示例代码 3</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.length();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sArray = s.toCharArray();</span><br><span class="line">        Set&lt;Character&gt; window = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// [left,right]是不重复的子串</span></span><br><span class="line">        <span class="keyword">while</span> (right &lt; size) &#123;</span><br><span class="line">            <span class="keyword">char</span> rightChar = sArray[right];</span><br><span class="line">            <span class="comment">// 保持窗口中没有和即将加入的右边界一样的字符</span></span><br><span class="line">            <span class="keyword">while</span> (window.contains(rightChar)) &#123;</span><br><span class="line">                window.remove(sArray[left++]);</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(maxLength, right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 将右边界加入窗口</span></span><br><span class="line">            window.add(sArray[right++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用队列优化"><a href="#使用队列优化" class="headerlink" title="使用队列优化"></a>使用队列优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.length();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;Character&gt; window = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; size) &#123;</span><br><span class="line">            <span class="keyword">while</span> (window.contains(sArray[right])) &#123;</span><br><span class="line">                window.removeFirst();</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(maxLength, right - left + <span class="number">1</span>);</span><br><span class="line">            window.addLast(sArray[right++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用map优化"><a href="#使用map优化" class="headerlink" title="使用map优化"></a>使用map优化</h4><p>我们发现对于处理left，需要遍历left往后走</p><p>那我们就可以使用map存一下，从而可以快速拿到窗口中重复的字符的那一个索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.length();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] sArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; size) &#123;</span><br><span class="line">            <span class="comment">// 如果右边界加入就会导致窗口有重复字符了</span></span><br><span class="line">            <span class="keyword">if</span> (window.containsKey(sArray[right])) &#123;</span><br><span class="line">                <span class="comment">// 更新左边界</span></span><br><span class="line">                left = Math.max(window.get(sArray[right]) + <span class="number">1</span>, left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新最大值</span></span><br><span class="line">            maxLength = Math.max(maxLength, right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 覆盖或保存对应的关系</span></span><br><span class="line">            window.put(sArray[right], right++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对map再次进行优化"><a href="#对map再次进行优化" class="headerlink" title="对map再次进行优化"></a>对map再次进行优化</h4><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/22/%E3%80%903-Medium%E3%80%91%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82.png" class title="题目要求"><p>因为字符是确定的所以，我们可以new一个128长度的数组来当hashmap，键是字符的ascll码值，值是索引，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] window = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">while</span>(right &lt; len)&#123;</span><br><span class="line">            <span class="keyword">char</span> now = s.charAt(right);</span><br><span class="line">            <span class="comment">// 如果window[now]没有值就是0和原本的left相比较即可</span></span><br><span class="line">            left = Math.max(left, window[now] +<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 更新最大值</span></span><br><span class="line">            maxLength = Math.max(maxLength, right-left+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 覆盖或保存对应的关系</span></span><br><span class="line">            window[now] = right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大O表示法</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/02/22/%E7%AE%97%E6%B3%95-%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/02/22/%E7%AE%97%E6%B3%95-%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="如何去评判一个算法的好坏呢？"><a href="#如何去评判一个算法的好坏呢？" class="headerlink" title="如何去评判一个算法的好坏呢？"></a>如何去评判一个算法的好坏呢？</h2><p>我们可以从两个维度分别是时间和空间去评判，所以我们也可以根据这两点去优化我们的代码，从而使自己的算法的复杂度降低，效率提高。</p><p>那这样说的话，是不是我拿着不同的算法在不同的电脑上跑然后比较时间，谁的时间短，谁的算法更牛逼。那如果两台电脑的性能本就有着很大的差距呢？这样就不公平了，导致了比较的偏差。</p><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><p>那么我们可以使用一种表示法也就是大O表示法来具体表示<strong>时间复杂度</strong>和<strong>空间复杂度</strong>。它将代码的所有步骤转换为<strong>关于数据规模n的公式项</strong>，然后排除不会对问题的整体复杂度产生较大影响的<strong>低阶、系数项和常数项</strong>。</p><img src="/%E7%AE%97%E6%B3%95/%E6%8A%80%E5%B7%A7%E7%AF%87/2022/02/22/%E7%AE%97%E6%B3%95-%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/Big-OComplexityChart.png" class title="Big-OComplexityChart"><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>其实该值表示的是，当数据的量级增加的时候，时间增长的一个趋势。</p><p>公式：T(n) &#x3D; O(f(n))</p><p>O(1)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp = x + y;</span><br></pre></td></tr></table></figure><p>O(n)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该循环实际会执行多少行代码呢？</span></span><br><span class="line"><span class="comment">* int i = 1;   *  1</span></span><br><span class="line"><span class="comment">* i &lt; n        *  n</span></span><br><span class="line"><span class="comment">* i++          *  n</span></span><br><span class="line"><span class="comment">* sout(i)      *  n</span></span><br><span class="line"><span class="comment">* 所以是O(1+3n)</span></span><br><span class="line"><span class="comment">* 我们在开始就说过了需要排除不会对问题的整体复杂度产生较大影响的低阶、系数项和常数项。</span></span><br><span class="line"><span class="comment">* 所以复杂度是O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>再来看一个O(n^2)的案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        System.out.println(i+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 一样的我们来看一下这个循环实际会执行多少次</span></span><br><span class="line"><span class="comment">* int i = 0;       *   1</span></span><br><span class="line"><span class="comment">* int j = 0;       *   1</span></span><br><span class="line"><span class="comment">* i &lt; n            *   n</span></span><br><span class="line"><span class="comment">* i++              *   n</span></span><br><span class="line"><span class="comment">* j &lt; n            *   n*n</span></span><br><span class="line"><span class="comment">* j++              *   n*n</span></span><br><span class="line"><span class="comment">* sout(i+j);       *   1</span></span><br><span class="line"><span class="comment">* 也就是O(n^2+2n+3) = O(n^2)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>O(logn)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* int i = 1;    *  1</span></span><br><span class="line"><span class="comment">* i &lt; n         * (log2)n</span></span><br><span class="line"><span class="comment">* i = i * 2     * (log2)n</span></span><br><span class="line"><span class="comment">* 也就是O(2(log2)n)==(log2)n</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>O(nlogn)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; n)&#123;</span><br><span class="line">        j = j * <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个很简单，和之前的分析是一样的</span></span><br></pre></td></tr></table></figure><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>该复杂度表示的是内存空间随着数据的增加增长的趋势。</p><p>常用的空间复杂度O(1),O(n),O(n^2)</p><p>O(1)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp = x + y;</span><br></pre></td></tr></table></figure><p>O(n)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    arr[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2)的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">        arr[i][j] = i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-三大特殊类型</title>
      <link href="/javaEE/Redis/2022/02/22/Redis-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/"/>
      <url>/javaEE/Redis/2022/02/22/Redis-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="三种特殊类型"><a href="#三种特殊类型" class="headerlink" title="三种特殊类型"></a>三种特殊类型</h2><h3 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h3><p>该数据类型是用来存储<strong>地理空间</strong>的</p><p>附近的人，发送定位，分享实时位置，打车的时候的距离计算都可以通过这个实现</p><p>我们这里使用这几个城市的经纬度作为测试</p><table><thead><tr><th align="center">城市</th><th align="center">经度</th><th align="center">维度</th></tr></thead><tbody><tr><td align="center">相城区</td><td align="center">120.64239</td><td align="center">31.36889</td></tr><tr><td align="center">吴江区</td><td align="center">120.638317</td><td align="center">31.159815</td></tr><tr><td align="center">太仓</td><td align="center">121.10891</td><td align="center">31.4497</td></tr><tr><td align="center">常熟市</td><td align="center">120.75225</td><td align="center">31.65374</td></tr><tr><td align="center">昆山市</td><td align="center">120.98074</td><td align="center">31.38464</td></tr></tbody></table><p>这里有六个基本命令，我们来一个个看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geoadd key longitude latitude member [longitude latitude member..]</span></span><br><span class="line"><span class="comment"># 增加一个经纬度的坐标</span></span><br><span class="line"><span class="comment"># 两极无法添加，一般我们通过java程序一次性导入</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd Suzhou 120.64239 31.36889 XiangChengDistrict 120.638317 31.159815 WuJiangDistrict 121.10891 31.4497 TaiCang 120.75225 31.65374 ChangShuCity 120.98074 31.38464 KunShanCity</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># geodist key member1 member2 [unit]</span></span><br><span class="line"><span class="comment"># 获取两地之间的距离单位为米</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST Suzhou TaiCang WuJiangDistrict</span><br><span class="line"><span class="string">&quot;55133.1652&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST Suzhou TaiCang KunShanCity km</span><br><span class="line"><span class="string">&quot;14.1556&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># geohash key member [member..]</span></span><br><span class="line"><span class="comment"># 获取member的二维的空间经纬度数据编码</span></span><br><span class="line"><span class="comment"># 这个可以csdn搜一下具体的算法实现</span></span><br><span class="line">127.0.0.1:6379&gt; geohash Suzhou TaiCang</span><br><span class="line">1) <span class="string">&quot;wtw4gvhzf10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># geopos key member [member..]</span></span><br><span class="line"><span class="comment"># 查看member的经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; geopos Suzhou TaiCang XiangChengDistrict</span><br><span class="line">1) 1) <span class="string">&quot;121.10891193151474&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.449701065685858&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;120.64238995313644&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.368889085683811&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># georadius key longitude latitude radius m|km|ft|mi [WITHSCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC| ESC]</span></span><br><span class="line"><span class="comment"># mi是英里，ft是英尺</span></span><br><span class="line"><span class="comment"># 以给定的经纬度为中心，找到某一半径内的元素</span></span><br><span class="line"><span class="comment"># WITHCOORD表示显示坐标</span></span><br><span class="line"><span class="comment"># WITHDIST表示显示距离该点的位置</span></span><br><span class="line"><span class="comment"># WITHHASH表示显示该地址的hash值</span></span><br><span class="line"><span class="comment"># COUNT count表示显示几个</span></span><br><span class="line"><span class="comment"># ASC| ESC 表示正序还是倒序</span></span><br><span class="line">127.0.0.1:6379&gt; georadius Suzhou 120.98080 31.28460 30 km withdist</span><br><span class="line">1) 1) <span class="string">&quot;KunShanCity&quot;</span></span><br><span class="line">   2) <span class="string">&quot;11.1271&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;TaiCang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;22.0285&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]</span></span><br><span class="line"><span class="comment"># 以member为中心radius为半径，找到在此范围中的元素</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember Suzhou TaiCang 30 km withcoord withdist withhash asc</span><br><span class="line">1) 1) <span class="string">&quot;TaiCang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;0.0000&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4054798020485654</span><br><span class="line">   4) 1) <span class="string">&quot;121.10891193151474&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.449701065685858&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;KunShanCity&quot;</span></span><br><span class="line">   2) <span class="string">&quot;14.1556&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4054794184325796</span><br><span class="line">   4) 1) <span class="string">&quot;120.98073989152908&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.38463984296795&quot;</span></span><br></pre></td></tr></table></figure><p>geo的底层其实是Zset，我们可以使用Zset的命令去操作geo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem Suzhou TaiCang</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange Suzhou 0 -1</span><br><span class="line">1) <span class="string">&quot;WuJiangDistrict&quot;</span></span><br><span class="line">2) <span class="string">&quot;XiangChengDistrict&quot;</span></span><br><span class="line">3) <span class="string">&quot;ChangShuCity&quot;</span></span><br><span class="line">4) <span class="string">&quot;KunShanCity&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><blockquote><p>先来了解一下基数是什么？</p></blockquote><p>基数其实就是一个集合中<strong>不重复的元素个数</strong>，其实就是一个集合去重后的集合长度</p><p>业务场景：</p><p>网站的访问量（一个人访问一个网站多次，也算一个人）</p><p>传统使用set集合的重复无序的特性，可以保存用户的id，以set集合的长度作为标准。但是，专门使用一个set来保存用户id未免优点奢侈，如果id是分布式的会很复杂，导致set集合很庞大，所以需要一个方法来解决这个问题。</p><p>Hyperloglog就是用来解决此问题的算法。</p><p>优点：占用很小的内存空间存放2^64个数据，也只占用12kb</p><p>瑕疵：会有0.81%的错误率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pfadd key member [member..]</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd <span class="built_in">set</span> a b c d e f g h i j k l</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># pfcount key [key..]</span></span><br><span class="line"><span class="comment"># 返回基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount <span class="built_in">set</span></span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; pfadd set2 j k l m n</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount <span class="built_in">set</span> set2</span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line"></span><br><span class="line"><span class="comment"># pfmerge destkey sourcekey [sourcekey..]</span></span><br><span class="line"><span class="comment"># 将sourcekey合并到destkey</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge <span class="built_in">set</span> set2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 探究底层：</span></span><br><span class="line"><span class="comment"># 我们获取一下此数据的数据类型，可以看到实际上存储的是string</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> <span class="built_in">set</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;HYLL\x01\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00Fm\x80I\xe8\x80@\xc4\x84K\\\x80D&lt;\x848\x80B=\x80K\x83\x80B\xed\x84A\xfc\x8cG\x8e\x80Bm\x80BZ&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h3><p>位存储，一般使用两种状态的区分</p><p>比如统计中国的男子和女子的数目</p><p>14亿个二进制数，0代表女子，1代表男</p><p>0 0 1 1 1 0 1 …</p><p>登录，头像是亮着的，未登录，头像是灰色的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setbit key offset value</span></span><br><span class="line"><span class="comment"># 设置offset位是value</span></span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 中国sign可以代表</span></span><br><span class="line"><span class="comment"># 星期日未打卡</span></span><br><span class="line"><span class="comment"># 星期一已打卡</span></span><br><span class="line"><span class="comment"># 星期二未打卡</span></span><br><span class="line"><span class="comment"># 星期三已打卡</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getbit key offset</span></span><br><span class="line"><span class="comment"># 查看该天是否打卡</span></span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># bitcount key [start end]</span></span><br><span class="line"><span class="comment"># 查看sign中为1的个数</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【2-Medium】两数相加</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>ListNode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123; <span class="keyword">this</span>.val = val; <span class="keyword">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例1:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[2,4,3]</span>, l2 = <span class="comment">[5,6,4]</span></span><br><span class="line">输出：<span class="comment">[7,0,8]</span></span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[0]</span>, l2 = <span class="comment">[0]</span></span><br><span class="line">输出：<span class="comment">[0]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">9,9,9,9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], l2 = [<span class="number">9,9,9,9</span>]</span><br><span class="line">输出：[<span class="number">8,9,9,9</span>,<span class="number">0,0,0,1</span>]</span><br></pre></td></tr></table></figure><p><strong>图示1：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/%E5%9B%BE%E7%A4%BA1.png" class title="图示1"><p><strong>图示2：</strong></p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/%E5%9B%BE%E7%A4%BA2.png" class title="图示2"><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><p><strong>Related Topics</strong></p><ul><li>递归</li><li>链表</li><li>数学</li></ul><h3 id="链表转值计算"><a href="#链表转值计算" class="headerlink" title="链表转值计算"></a>链表转值计算</h3><p>遇到这种链表的题，第一步就是将逻辑图画出来</p><p>经过观察可知，链表的第一位表示该数字的个位，第二位代表该数字的十位，以此类推。</p><p>我第一个想到的解题思路就是</p><p>1、将链表表示的数字算出来</p><p>2、将两个数字加起来</p><p>3、用该数字构建出来结果链表并返回</p><blockquote><p>示例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = compute(l1) + compute(l2);</span><br><span class="line">        ListNode listNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">        <span class="comment">// 这里的listNode是虚拟节点，最后返回的是该节点的下一个节点</span></span><br><span class="line">        ListNode temp = listNode;</span><br><span class="line">        <span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里需要使用强转</span></span><br><span class="line">            <span class="comment">// (sum % 10)的结果是long类型，直接赋值给ListNode的int型的val会报错</span></span><br><span class="line">            temp.next = <span class="keyword">new</span> ListNode((<span class="keyword">int</span>) (sum % <span class="number">10</span>));</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该函数是为了计算链表所表示的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">compute</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; node != <span class="keyword">null</span>; node = node.next, i *= <span class="number">10L</span>) &#123;</span><br><span class="line">            result += node.val * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来算一下<code>long</code>的最大值是多少</p><p><code>long</code>在<code>Java</code>里面使用8个字节也就是64位，最大值也就是2^64-1，也就是<code>9_223_372_036_854_775_807</code></p><p>此方法乍一看确实没问题</p><p>但是题目提示有以下要求</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82.png" class title="题目要求"><p>测试的时候可能会出现100位的数字，<code>long</code>类型最大值远远不够</p><p>当链表很长的时候，该方法就会超时并且发生溢出错误</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>现在有两个链表，要清楚两点</p><p>1、两个链表的长度不一定相同</p><p>2、两个链表相加后，长度不一定不变</p><p>递归需要先将递归退出条件写出来，即两者都到尾部，先就简单看看我画的思路图</p><img src="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%902-Medium%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/%E9%80%92%E5%BD%92%E8%A7%A3%E9%A2%98%E5%9B%BE.png" class title="递归解题图"><blockquote><p>示例代码 1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode listNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">        add(l1,l2,listNode);</span><br><span class="line">        <span class="keyword">return</span> listNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">add</span><span class="params">(ListNode a,ListNode b,ListNode temp)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 当两个链表都到头了，则退出递归</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span>&amp;&amp;b==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此变量是用来标注下一次递归的时候两个链表是否是都尾部了</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 当a到尾部的时候，将temp的数据域变为自身加上b的数据域的值</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp.val+=b.val;</span><br><span class="line">            <span class="comment">// 在a已经到尾部的情况下，b的next为null，即b将在下一次递归到尾部了，则将flag变为true</span></span><br><span class="line">            <span class="keyword">if</span>(b.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当b到头的时候，将temp的数据域变为自身加上b的数据域的值</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp.val+=a.val;</span><br><span class="line">            <span class="comment">// 在b已经到尾部的情况下，a的next为null，即a将在下一次递归到尾部了，则将flag变为true</span></span><br><span class="line">            <span class="keyword">if</span>(a.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp.val+=a.val+b.val;</span><br><span class="line">            <span class="keyword">if</span>(a.next==<span class="keyword">null</span>&amp;&amp;b.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// left用来存储当前这一位的值是否&gt;=10，如果满足，则进1</span></span><br><span class="line">        <span class="keyword">int</span> left=temp.val&gt;=<span class="number">10</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将left作为初始值new出来temp的下一个指针</span></span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode(left);</span><br><span class="line">        <span class="comment">// 为了防止超过十，所以这里做了取余的操作，</span></span><br><span class="line">        temp.val = temp.val%<span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 如果下一次递归的时候两者都到了尾部，并且没有进1，则不需要new出来temp的next </span></span><br><span class="line">        <span class="keyword">if</span>(flag&amp;&amp;left==<span class="number">0</span>)&#123;</span><br><span class="line">            temp.next=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归调用</span></span><br><span class="line">        <span class="keyword">return</span> add(a==<span class="keyword">null</span>?<span class="keyword">null</span>:a.next,b==<span class="keyword">null</span>?<span class="keyword">null</span>:b.next,temp.next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这种递归就是化简为繁了</p><p>下面这种做法才是我觉得比较好的</p><blockquote><p>示例代码 2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addTwoNumbers(l1, l2, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两者都为null才会结束递归</span></span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode tail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 可能最后还需要进位</span></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">                tail = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = flag;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sum += l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sum += l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建节点</span></span><br><span class="line">        ListNode node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 节点的next就递归处理</span></span><br><span class="line">        node.next = addTwoNumbers(l1, l2, sum / <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 返回这个新建的节点，最后一层返回的也就是头节点</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="齐头并进遍历"><a href="#齐头并进遍历" class="headerlink" title="齐头并进遍历"></a>齐头并进遍历</h3><p>直接两条链表一起遍历</p><p>用一个变量存储是否需要进位</p><p>这个思路其实和第二种递归的写法思路是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 虚拟头节点</span></span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode node = dummy;</span><br><span class="line">        <span class="comment">// 只有有一个没有到尾部，就一直循环</span></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = flag;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sum += l1.val;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sum += l2.val;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录是否需要进位</span></span><br><span class="line">            flag = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 新建节点并接到node后面</span></span><br><span class="line">            node.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果最后一次需要进位，需要修补一下</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            node.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断dummy的next是否为空</span></span><br><span class="line">        <span class="comment">// 为空的时候就是l1和l2都是null，那么就返回dummy即可</span></span><br><span class="line">        <span class="comment">// 不为空的时候就说明l1或者l2有一个不空，那就直接返回dummy的next即可</span></span><br><span class="line">        <span class="keyword">return</span> dummy.next == <span class="keyword">null</span> ? dummy : dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【1-Easy】两数之和</title>
      <link href="/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%901-Easy%E3%80%91%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98%E7%AF%87/2022/02/21/%E3%80%901-Easy%E3%80%91%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[2,7,11,15]</span>, target = 9</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br><span class="line">解释：因为 nums<span class="comment">[0]</span> + nums<span class="comment">[1]</span> == 9 ，返回 <span class="comment">[0, 1]</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,2,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,3]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li><li><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</li></ul><p><strong>Related Topics</strong></p><ul><li>数组</li><li>哈希表</li></ul><h3 id="暴力枚举法"><a href="#暴力枚举法" class="headerlink" title="暴力枚举法"></a>暴力枚举法</h3><p>题目意思很明确，就是给一个<code>target</code>和一个数组</p><p>目标是在这个数组里面找到 <strong>和是</strong> <code>target</code> 的那两个数的索引数组</p><p>暴力枚举很简单，代码直接给出</p><blockquote><p>示例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果找到了，那就保存结果并返回</span></span><br><span class="line">                <span class="keyword">if</span> (j != i &amp;&amp; nums[j] == target - nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有符合要求的两个数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>暴力枚举取到<code>target-nums[i]</code>的方法是遍历算法</p><p>关键在于如何快速知道<code>i</code>后面有没有等于<code>target-nums[i]</code>的值</p><p>那么就可以使用<code>Map</code>结构来解决这个问题</p><blockquote><p>示例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 键为nums[i]</span></span><br><span class="line">        <span class="comment">// 值为索引</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 找到了target-nums[i]</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 说明没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>相信很多同学看到这种方法，第一反应可能不是这样写的</p><p>你的代码可能是这样的，差异就在<code>//==========================</code>之间的代码</p><p>先遍历一遍数组，目的是将值和其索引先放入<code>map</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 键为nums[i]</span></span><br><span class="line">        <span class="comment">// 值为索引</span></span><br><span class="line">        <span class="comment">// ==========================</span></span><br><span class="line">        <span class="comment">// 这里手动设置容器初始大小</span></span><br><span class="line">        <span class="comment">// 这样指定初始容量的原因是此map肯定不会放超过nums.length数目的元素，所以就设置默认容量为其正好要扩容的数量+1，就不会扩容了</span></span><br><span class="line">        <span class="comment">// 这里不懂得话，就不写，走默认的容量然后它自己扩容也是可以的</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;((<span class="keyword">int</span>)((<span class="keyword">float</span>) nums.length / <span class="number">0.75F</span> + <span class="number">1.0F</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ==========================</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 找到了target-nums[i]</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 说明没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不需要提前遍历一遍将值和索引的对应关系放入<code>map</code>中，而是可以边遍历边查<code>map</code>呢？</p><p>案例：<code>nums = [2, 7, 11, 15],target = 13</code></p><ul><li>边遍历边放入<code>map</code></li></ul><p>当条件成立的时候，<code>nums[i]</code>是11，<code>target - nums[i]</code>是2</p><p>2是在11之前遍历的，所以2和其索引的对应关系已经在<code>map</code>中了，于是得到了答案</p><p>这时候的<code>map</code>是不完整的，只有2、7的对应关系</p><ul><li>预填充<code>map</code></li></ul><p>当条件成立的时候，<code>nums[i]</code>是2，<code>target - nums[i]</code>是11</p><p>在遍历2的时候，11这个值的对应关系已经在<code>map</code>中了，于是得到了答案</p><p>这时候的<code>map</code>是完整的</p><blockquote><p>总结</p></blockquote><p>经过上面案例的分析，应该可以感觉到两者之间的不同了，明显感受到边遍历边放<code>map</code>的方案优于预填充的方案</p><blockquote><p>分析</p></blockquote><p>当然不是每次涉及类似题目都这样的，该预遍历还是要预遍历的，下面分析一下为啥这题可以这样</p><p>下面假设答案存在，则<code>target = nums[i] + nums[j] ( i &lt; j )</code></p><p>预遍历是在当前位置<code>i</code>，向后找<code>target - nums[i]</code>的位置<code>j</code></p><p>先找到那个小的索引，然后再找大的那个索引</p><p>边遍历边存是在当前位置<code>j</code>，向前找<code>target - nums[j]</code>的位置<code>i</code></p><p>先找到那个大的索引，然后再找小的那个索引</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 刷题篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去IOE是什么？</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/21/%E5%8E%BBIOE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/21/%E5%8E%BBIOE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么去IOE？"><a href="#什么去IOE？" class="headerlink" title="什么去IOE？"></a>什么去IOE？</h2><h3 id="I是以IBM为代表的小型机"><a href="#I是以IBM为代表的小型机" class="headerlink" title="I是以IBM为代表的小型机"></a>I是以IBM为代表的小型机</h3><p>小型机与X86服务器的区别：</p><ol><li>价格</li></ol><p>一台小型机可以买3-4台X86服务器</p><ol start="2"><li>指令</li></ol><p>X86         兼容性好    性能差</p><p>小型机    兼容性差    性能好</p><ol start="2"><li>性能</li><li>领域</li></ol><h3 id="O是以ORACLE为代表的关系型数据库架构"><a href="#O是以ORACLE为代表的关系型数据库架构" class="headerlink" title="O是以ORACLE为代表的关系型数据库架构"></a>O是以ORACLE为代表的关系型数据库架构</h3><p>2013年5月17日，最后一台IBM小型机在支付宝下线了，这个是去IOE的一个重要的一个节点。ORACLE数据库告别阿里巴巴是在2013年的7月10日，这一天阿里巴巴的一个重要广告系统的ORACLE数据库也下线了，也是淘宝最后一个ORACLE数据库，这两件事情合在一起啊，也是构成阿里巴巴的一个重要的一个里程碑。</p><p>阿里巴巴呢一直是采用的是ORCALE数据库，并利用小型机和高端的存储设备提高性能和数据库的性能，但随着业务的不停的发展，数据量愈发庞大。</p><p>传统的移动式ORACLE数据库的扩展，也存在着一些瓶颈。传统的ORACLE软件为代表的关系数据库，大多数呢是以集中式架构为主，这些传统的数据库软件是最大的特点呢，就是将所有的数据集中存储在一个数据库中，依赖大型的高端设备来提高处理的性能和扩展性，集中式数据库的扩展呢，主要是采用向上扩展的那这种方式啊，就是通过增加CPU内存的方式提高处理能力，这种处理的架构就使得数据库成为一个很大的一个系统瓶颈，越来越不适合目前海量数据对计算能力的一个需求。</p><h3 id="E是以EMC为代表的高端SAN存储设备"><a href="#E是以EMC为代表的高端SAN存储设备" class="headerlink" title="E是以EMC为代表的高端SAN存储设备"></a>E是以EMC为代表的高端SAN存储设备</h3><p>SAN：Storage Area Network</p><p>EMC是一家美国信息存储公司。</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-五大基础数据类型</title>
      <link href="/javaEE/Redis/2022/02/21/Redis-%E4%BA%94%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/javaEE/Redis/2022/02/21/Redis-%E4%BA%94%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>redis默认有16个数据库Redis的瓶颈是根据机器的内存和网络带宽。</p><h3 id="为什么单线程还可以这么快？"><a href="#为什么单线程还可以这么快？" class="headerlink" title="为什么单线程还可以这么快？"></a>为什么单线程还可以这么快？</h3><p>redis是c语言写的，官网提供的性能数据</p><p>1s  11万读取</p><p>1s    8万写入</p><p>误区：</p><ol><li>高性能的服务器一定是多线程的</li><li>多线程一定比单线程效率高</li></ol><p>CPU—&gt;内存—&gt;硬盘</p><p>核心：redis将所有的数据都放入内存中，所以用单线程去操作效率是很高的，多线程（CPU上下文会切换，十分耗时），对于内存系统，没有上下文切换效率会很高，多次读写都是在一个CPU上的，没有线程调度的耗时</p><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">select index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前数据库的数据数</span></span><br><span class="line">dbsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前所有符合pattern的key</span></span><br><span class="line">keys pattern</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否存在该key，存在则返回1，不存在则返回0</span></span><br><span class="line">exists key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除key</span></span><br><span class="line">move key</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置kv</span></span><br><span class="line"><span class="built_in">set</span> key value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key存储的值</span></span><br><span class="line">get key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">type</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置过期时间为secondss</span></span><br><span class="line">expire key seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看剩余时间</span></span><br><span class="line">ttl key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空当前数据库</span></span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空所有的数据库的内容</span></span><br><span class="line">flushall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机输出一个key</span></span><br><span class="line">randomkey</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 追加key存储的value字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果key不存在，则该命令相当于<span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> append key value</span></span><br><span class="line">append key &quot;appendstring&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看key存储的字符串的长度</span></span><br><span class="line">strlen key</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自增1，自减1的操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incr key</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> decr key</span></span><br><span class="line">127.0.0.1:6379&gt; set views 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; decr views</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次性加或者减指定数字的操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incrby key increment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> decrby key decrement</span></span><br><span class="line">127.0.0.1:6379&gt; incrby views 10</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; decrby views 10</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取一个范围内的字符串，即substring==&gt;[start,end)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意这里的getrange是闭区间，[start,end]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getrange key start end</span></span><br><span class="line">127.0.0.1:6379&gt; set name zhima</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange name 0 3</span><br><span class="line">&quot;zhim&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange name 0 -1</span><br><span class="line">&quot;zhima&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setrange key offset value</span></span><br><span class="line">127.0.0.1:6379&gt; set key randomstring</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setrange key 3 xxx</span><br><span class="line">(integer) 12</span><br><span class="line">127.0.0.1:6379&gt; get key</span><br><span class="line">&quot;ranxxxstring&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setex (<span class="built_in">set</span> with expire) 设置过期时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置该字段过期时间为30s</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setex key seconds value</span></span><br><span class="line">setex key 30 &quot;expire&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不存在则设置值，在分布式锁中经常使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setnx (<span class="built_in">set</span> <span class="keyword">if</span> not exist)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setnx key value</span></span><br><span class="line">127.0.0.1:6379&gt; set key1 value1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:6379&gt; setnx key1 &quot;setnx&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; set key1 &quot;setnx&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;setnx&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量获取和设置值</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> mget   mset msetnx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mset key value [key value..]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mget key [key..]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> msetex key value [key value..]</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 modifiedv1 k4 v4 # 该操作是一个原子性的操作！</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> del key</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">127.0.0.1:6379&gt; del k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对象</span></span><br><span class="line">set user:1&#123;name:zhangsan,age:3&#125; # 设置一个user:1对象 值为json字符串来保存</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的key是一个巧妙的属性：&#123;className&#125;:&#123;id&#125;:&#123;field&#125;，在redis中是可以的</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhima user:1:age 19</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;user:1:age&quot;</span><br><span class="line">2) &quot;user:1:name&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;zhima&quot;</span><br><span class="line">2) &quot;19&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 组合命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getset先取得当前的值并返回，然后修改当前的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getset key value</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset db modified</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;modified&quot;</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>可以给其设置一个使用规则，则可以将其实现栈或者队列的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置和取值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrange key start stop [start,stop]</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 v1 v2 v3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure><img src="/javaEE/Redis/2022/02/21/Redis-%E4%BA%94%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/list%E7%B1%BB%E5%9E%8B%E7%9A%84lpush%E6%93%8D%E4%BD%9C.png" class title="list类型的lpush操作"><p>分析可知这里的lpush是头插入，也就是left插入，那与之对应的肯定还有个尾插入，即right插入，但是啊只有LRANGE操作来取得集合里的数据，没有RRANGE操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list v1 v2 v3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除头部的值并返回</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lpop key</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除尾部的值并返回</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpop key</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list</span><br><span class="line">&quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取索引处的元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lindex key index</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1 v2 v3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line">&quot;v3&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取集合长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> llen key</span> </span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除指定个数的匹配的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lrem key count value</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 v1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 v3</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取指定位置的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ltrim key start stop</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">5) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将集合尾部元素移除，并在另一个集合头部加入一个元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpoplpush <span class="built_in">source</span> destination</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">5) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list otherlist</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange otherlist 0 -1</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改指定索引处元素的值</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 modified</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;modified&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> lpush key value [value...]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当该集合不存在的时候会自动创建</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lset key index value</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当该集合不存在的时候会报错</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在指定值的前面|后面插入值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> linsert key BEFORE|AFTER pivot value</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">5) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list before v2 brforev2</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; linsert list after v4 afterv4</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;v5&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;afterv4&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">5) &quot;brforev2&quot;</span><br><span class="line">6) &quot;v2&quot;</span><br><span class="line">7) &quot;v1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该List实质上是使用链表实现的</p><p>栈：出栈（Lpop）入栈（Lpush）&#x3D;&#x3D;  出栈（Rpop） 入栈（Rpush）</p><p>队列：出队（Lpop）入队（Rpush）&#x3D;&#x3D; 出栈（Rpop） 入栈（Lpush） </p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>该集合的特点是：<strong>无序不重复</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加一个元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sadd key member [member..]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的成员</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> smembers key</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set a b c a</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否包含某个元素</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember set c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember set d</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看集合的长度</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; scard set</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> srem key member [member..]</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem set a c</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机返回指定个数的元素</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> srandmember key count</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; srandmember set 3</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; srandmember set 3</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机删除指定个数的元素，不写count默认为1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> spop key [count]</span> </span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop set 3</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将一个指定的值，移到另一个集合中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> smove <span class="built_in">source</span> destination member</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set a b c d e</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; smove set set2 a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 交集 sinter key [key..]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 差集 sdiff key [key..]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 并集 sunion key [key..]</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;g&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter set set2</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff set set2</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; sunion set set2</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;e&quot;</span><br><span class="line">5) &quot;a&quot;</span><br><span class="line">6) &quot;g&quot;</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Map集合，key-Map集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hset key field value</span></span><br><span class="line"><span class="comment"># 放入一个map</span></span><br><span class="line"><span class="comment"># hget key field </span></span><br><span class="line">127.0.0.1:6379&gt; hset hashmap name zhima</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget hashmap name</span><br><span class="line"><span class="string">&quot;zhima&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置和取得多个键值对</span></span><br><span class="line"><span class="comment"># hmset key field name [field name..]</span></span><br><span class="line"><span class="comment"># hmget key field [field..]</span></span><br><span class="line">127.0.0.1:6379&gt; hmset user:1 name zhim age 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget user:1 name age</span><br><span class="line">1) <span class="string">&quot;zhim&quot;</span></span><br><span class="line">2) <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="comment"># 使用hset更新键值对</span></span><br><span class="line">127.0.0.1:6379&gt; hset user:1 name zhima</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hmget user:1 name age</span><br><span class="line">1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">2) <span class="string">&quot;19&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得所有的键值对</span></span><br><span class="line"><span class="comment"># hgetall key </span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;19&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取键值对个数</span></span><br><span class="line"><span class="comment"># hlen key</span></span><br><span class="line">127.0.0.1:6379&gt; hlen user:1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除键值对</span></span><br><span class="line"><span class="comment"># hdel key field</span></span><br><span class="line">127.0.0.1:6379&gt; hdel user:1 name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;19&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否存在该键值对</span></span><br><span class="line"><span class="comment"># hexists key field</span></span><br><span class="line">127.0.0.1:6379&gt; hexists user:1 name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user:1 unknown</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得所有的键</span></span><br><span class="line"><span class="comment"># hkeys key</span></span><br><span class="line"><span class="comment"># 获得所有的值</span></span><br><span class="line"><span class="comment"># hvals key</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys user:1</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals user:1</span><br><span class="line">1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">2) <span class="string">&quot;19&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加值</span></span><br><span class="line"><span class="comment"># hincrby key field increment </span></span><br><span class="line"><span class="comment"># ！注意：！这里没有自减的方法，但是可以为increment设置负数来实现减</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user:1 name 1</span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user:1 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; hmset user:2 name lizhi age <span class="string">&quot;19&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:2</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;lizhi&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;19&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user:2 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; hincrby user:2 age -1</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在该字段，则添加该字段</span></span><br><span class="line"><span class="comment"># 如果存在，则不进行操作</span></span><br><span class="line"><span class="comment"># hsetnx key field value</span></span><br><span class="line">127.0.0.1:6379&gt; hsetnx user:1 name modified</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;21&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hsetnx user:1 address unknown</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;21&quot;</span></span><br><span class="line">5) <span class="string">&quot;address&quot;</span></span><br><span class="line">6) <span class="string">&quot;unknown&quot;</span></span><br></pre></td></tr></table></figure><p>Hashmap适合存储对象</p><h3 id="Zset（有序列表）"><a href="#Zset（有序列表）" class="headerlink" title="Zset（有序列表）"></a>Zset（有序列表）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加值 这个score相当于权重，用来排序</span></span><br><span class="line"><span class="comment"># zadd key [NX|XX] [CH] [INCR] score member [score member..]</span></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 two 3 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序输出</span></span><br><span class="line"><span class="comment"># zrange key start stop [withscores]</span></span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment"># 倒叙输出</span></span><br><span class="line"><span class="comment"># zrevrange key start stop [withscores]</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;lizhi&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaozhang&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhima&quot;</span></span><br><span class="line"><span class="comment"># 携带权重输出</span></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">2) <span class="string">&quot;1000&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaozhang&quot;</span></span><br><span class="line">4) <span class="string">&quot;1500&quot;</span></span><br><span class="line">5) <span class="string">&quot;lizhi&quot;</span></span><br><span class="line">6) <span class="string">&quot;2000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zrangebyscore key min max [withscores] [limit offset count]</span></span><br><span class="line"><span class="comment"># 获取score在min到max之间的元素，闭区间</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary 1000 1600</span><br><span class="line">1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaozhang&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf</span><br><span class="line">1) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaozhang&quot;</span></span><br><span class="line">3) <span class="string">&quot;lizhi&quot;</span></span><br><span class="line"><span class="comment"># zrevrangebyscore key max min [withscores] [limit offset count]</span></span><br><span class="line"><span class="comment"># 倒叙输出score在max到min之间的，闭区间，</span></span><br><span class="line"><span class="comment"># [limit offset count]是指定显示从offset开始的count个数据，包括offset所在的元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrangebyscore salary 1600 1000</span><br><span class="line">1) <span class="string">&quot;xiaozhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 10 xiaoming 27 ziaohzhyang 19 zhima 25 lizhi</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary 10 19</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary 10 25 withscores</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;10&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhima&quot;</span></span><br><span class="line">4) <span class="string">&quot;19&quot;</span></span><br><span class="line">5) <span class="string">&quot;lizhi&quot;</span></span><br><span class="line">6) <span class="string">&quot;25&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary 10 25 <span class="built_in">limit</span> 0 2</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhima&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该集合的长度</span></span><br><span class="line"><span class="comment"># zcard key</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看符合[min,max]区间的元素个数</span></span><br><span class="line"><span class="comment"># zcount key min max</span></span><br><span class="line">127.0.0.1:6379&gt; zcount salary 10 19</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><hr><p>注：以上命令只是常用命令，更多命令可以在官网查看</p><p>英文官网地址：<a href="https://redis.io/">https://redis.io/</a></p><p>中文官网地址：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-前期准备</title>
      <link href="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h2><p>我们先前学的都是mysql，它是关系型数据库，表与表之间有联系。</p><p>NoSql即非关系型数据库。</p><h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><blockquote><p>MySql的瓶颈</p></blockquote><ol><li>数据太大了，一个机器就放不下了</li><li>30万以上的数据，需要使用索引（B+Tree）</li><li>访问量大的话，服务器压力大</li></ol><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/%E6%97%A9%E4%BA%9B%E5%B9%B4%E7%9A%84mysql.png" class title="早些年的mysql"><h4 id="解决方案：读写分离（垂直拆分）"><a href="#解决方案：读写分离（垂直拆分）" class="headerlink" title="解决方案：读写分离（垂直拆分）"></a>解决方案：读写分离（垂直拆分）</h4><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.png" class title="读写分离"><p>因为80%网站对于数据的操作都是读取，不会产生并发问题，所以为了提升效率，当我们第一次读取完数据后，将数据放入缓存中，下一次查询如果是同样的业务，则直接从缓存中读取数据，会大大提升性能，解决了读的压力</p><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/%E5%8A%A0Cache.png" class title="加Cache"><h4 id="解决方案：分库分表，MySql集群（水平拆分）"><a href="#解决方案：分库分表，MySql集群（水平拆分）" class="headerlink" title="解决方案：分库分表，MySql集群（水平拆分）"></a>解决方案：分库分表，MySql集群（水平拆分）</h4><p>每一个集群放一些表和数据库，这样的操作解决了写的压力</p><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/MySQL%E9%9B%86%E7%BE%A4.png" class title="MySQL集群"><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.png" class title="基本架构"><h4 id="如今的数据"><a href="#如今的数据" class="headerlink" title="如今的数据"></a>如今的数据</h4><p>数据量大，变化快，导致mysql无法很好的解决问题。</p><p>有的人使用mysql来存储一些比较大的文件，博客推文，图片等，数据库非常庞大，效率十分低下。</p><p>如果有一种数据库来专门处理这种数据，mysql的压力就变小了。这时候就需要使用Nosql了</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>方便拓展（数据之间联系低，很好拓展）</li><li>大数据高性能（Redis1s读11万次，写8万次，Nosql的缓存记录，是一种细粒度的缓存，性能比较高）</li><li>数据多样，不需要事先设计数据库</li></ol><blockquote><p>大数据时代的3V：出现的一些问题</p></blockquote><ol><li>Volume         海量</li><li>Variety          多样</li><li>Velocity         实时</li></ol><blockquote><p>大数据时代的3高：对程序的要求</p></blockquote><ol><li>高性能</li><li>高可用（扩）</li><li>高并发</li></ol><h2 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h2><ol><li><strong>KV键值对</strong></li></ol><ul><li>新浪：Redis</li><li>美团：Redis+Tair</li><li>阿里+百度：Redis+MemeCache</li></ul><p>应用场景：内容缓存，主要用于处理大量数据的高访问负载，也用于些日志系统等等。</p><p>数据模型：Key 指向的键值对Value，通常用hash table来实现</p><p>优点：查找速度快</p><p>缺点：数据无结构，通常只被当做字符串或者二进制存储</p><ol start="2"><li><strong>文档型数据库（BSON格式）</strong></li></ol><ul><li>MongoDB<ul><li>基于分布式文件存储的数据库，C++编写的，主要用来处理大量的文档</li><li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产物，MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的</li></ul></li><li>ConthDB</li></ul><p>应用场景：web应用</p><p>数据模型：key-value键值对（Value为结构化数据）</p><p>优点：数据结构要求不严格表结构可不需要像关系型数据库那样需要预先定义表结构</p><p>缺点：查询效率不高，而且缺乏统一的查询语句</p><ol start="3"><li><strong>列存储数据库</strong></li></ol><ul><li>HBase</li></ul><p>应用场景：分布式文件系统</p><p>数据模型：以列簇式存储，将同一列数据存储在一起</p><p>优点：查找速度快，可拓展性强，容易实现分布式文件系统</p><p>缺点：功能相对局限</p><ol start="4"><li><strong>图形关系数据库</strong></li></ol><p>存的是关系，不是存图形的</p><ul><li>Neo4j</li><li>InfoGrid</li></ul><p>应用场景：社交网络、相关推荐</p><p>数据模型：图架构</p><p>优点：利用图结构相关算法，比如最短路径寻址N度关系查找等</p><p>缺点：很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方式</p><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis全名是Remote Dictionary Server ，即远程字典调用</p><p>默认端口是6379</p></blockquote><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><p>它使用ANSI、C语言编写的、支持网络、可以基于内存亦可持久化的日志型、Key-value数据库、并提供多种语言的API，亦被称为结构化数据库</p><h3 id="下载下载后直接解压即可"><a href="#下载下载后直接解压即可" class="headerlink" title="下载下载后直接解压即可"></a>下载下载后直接解压即可</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/12ozkQkUss8GH70lf7qrinQ </span><br><span class="line">提取码：nv5z </span><br></pre></td></tr></table></figure><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/redis%E7%9B%AE%E5%BD%95.png" class title="redis目录"><p>点击redis-server.exe即可启动服务</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>Redis推荐我们使用Linux使用redis，所以接下来使用阿里云服务器来学习redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接:https://pan.baidu.com/s/1Hy1eFwcSqfftXrWv92-zug </span><br><span class="line">提取码:u1ff</span><br></pre></td></tr></table></figure><p>将压缩文件解压到服务器的opt目录下即可，进入解压后的目录，然后安装gcc-c++</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>也可以使用docker创建redis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启一个redis容器并设置密码</span></span><br><span class="line">docker run -it --name studyredis -p6379:6379 --requirepass lizhi9275 redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行的容器</span></span><br><span class="line">docker ps </span><br></pre></td></tr></table></figure><img src="/javaEE/Redis/2022/02/19/Redis-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81.png" class title="查看启动状态">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot-shiro</title>
      <link href="/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/"/>
      <url>/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/</url>
      
        <content type="html"><![CDATA[<h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p>其实这个就是一个关于做安全管理的框架，他不仅可以和javaEE结合也可以和javaSE结合</p><h3 id="提供的功能"><a href="#提供的功能" class="headerlink" title="提供的功能"></a>提供的功能</h3><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/Shiro%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%9F%E8%83%BD.jpg" class title="Shiro支持的功能"><ul><li>Authentication：身份认证，登录，验证用户的身份</li><li>Authorization：授权，</li><li>Session Management： Shiro内置的session，对其进行管理</li><li>Cryptography：加密，保证数据的安全性</li><li>Web Support： web支持，可以很好的集成到web环境</li><li>Caching： 缓存，</li><li>Concurrency： 多并发</li><li>Testing：测试</li><li>Remember Me：”记住我”的功能</li></ul><h3 id="Shiro结构"><a href="#Shiro结构" class="headerlink" title="Shiro结构"></a>Shiro结构</h3><p>我们来观察一下Shiro的结构</p><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/Shiro%E6%9E%B6%E6%9E%84.png" class title="Shiro架构"><p>解释一下出现的名词</p><ul><li>subject：与当前应用交互的任何东西都可以是Subject，与Subject的所有交互都会委托给SecurityManager，Subject其实只是一个门面，SecurityManager 才是实际的执行者</li><li>SecurityManager：安全管理器，即所有与安全有关的操作都会与SecurityManager交互，并且它管理着所有的Subject，它是Shiro的核心，它负责与Shiro的其他组件进行交互</li><li>Realm： Shiro从Realm获取安全数据（如用户，角色，权限），就是说SecurityManager 要验证用户身份，那么它需要从Realm 获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色、权限，进行验证用户的操作是否能够进行</li></ul><h3 id="快速开始（看一下直接过）"><a href="#快速开始（看一下直接过）" class="headerlink" title="快速开始（看一下直接过）"></a>快速开始（看一下直接过）</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><blockquote><p>log4j.properties</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INF0,stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># GeneraL Apache Libraries</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Defautt Shiro Logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro</span>=<span class="string">INF0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># DisabLe verbose Logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure><blockquote><p>shiro.ini</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27;（&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my Luggage!!!&quot; ;)), and rote &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhe met&#x27; with password &#x27;Ludicrousspeed’and rotes &#x27;darklord’and &#x27;schwartz</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;tonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># RoLes with assigned permissions</span></span><br><span class="line"><span class="comment"># Each Line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.reatm.text.TextConfigurationReatm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard&#x27;* &#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is aLlowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># ticense plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><blockquote><p>ShiroQuickStart.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroQuickStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ShiroQuickStart.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>,<span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;aValue&quot;</span>.equals(value))&#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Retrieved the correct value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!currentUser.isAuthenticated())&#123;</span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;lonestar&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (UnknownAccountException uae)&#123;</span><br><span class="line">                LOG.info(<span class="string">&quot;There is no user with username whith &quot;</span>+ token.getPrincipal());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">                LOG.info(<span class="string">&quot;Password for account&quot;</span>+ token.getPrincipal()+<span class="string">&quot;was incorrect&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (LockedAccountException lae)&#123;</span><br><span class="line">                LOG.info(<span class="string">&quot;The Account for userName&quot;</span>+ token.getPrincipal()+<span class="string">&quot;is locked. &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlocked it&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (AuthenticationException ae)&#123;</span><br><span class="line">                <span class="comment">//unexpected exception</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;USER[&quot;</span>+ currentUser.getPrincipal()+<span class="string">&quot;] logged in successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>))&#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;May the Schwartz be with you&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Hello,Mere mortal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>))&#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;You may use a lightsaber ring use it wisely&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Sorry, light rings are for schwartz masters only&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>))&#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate(id) &#x27;eagle5&#x27;. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys-have fun!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Sorry,you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        currentUser.logout();</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">2022-02-17 14:33:37,982 DEBUG [org.apache.shiro.io.ResourceUtils] - </span><br><span class="line">Opening resource from class path [shiro.ini] </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,021 DEBUG [org.apache.shiro.config.Ini] - Parsing [users] </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,026 DEBUG [org.apache.shiro.config.Ini] - Parsing [roles] </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,523 DEBUG [org.apache.shiro.config.IniFactorySupport] - </span><br><span class="line">Creating instance from Ini [sections=users,roles] </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,571 DEBUG [org.apache.shiro.realm.text.IniRealm] - </span><br><span class="line">Discovered the [roles] section.  Processing... </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,575 DEBUG [org.apache.shiro.realm.text.IniRealm] - </span><br><span class="line">Discovered the [users] section.  Processing... </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,594 DEBUG [org.apache.shiro.session.mgt.AbstractValidatingSessionManager] - </span><br><span class="line">No sessionValidationScheduler set.  Attempting to create default instance. </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,595 INFO [org.apache.shiro.session.mgt.AbstractValidatingSessionManager] - </span><br><span class="line">Enabling session validation scheduler... </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:38,625 DEBUG [org.apache.shiro.session.mgt.DefaultSessionManager] - </span><br><span class="line">Creating new EIS record for new session instance [org.apache.shiro.session.mgt.SimpleSession,id=null] </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:39,022 INFO [com.lizhi.springbootshiro.start.ShiroQuickStart] - Retrieved the correct value </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:39,022 DEBUG [org.apache.shiro.realm.AuthenticatingRealm] - </span><br><span class="line">Looked up AuthenticationInfo [null] from doGetAuthenticationInfo </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:39,022 DEBUG [org.apache.shiro.realm.AuthenticatingRealm] - No AuthenticationInfo found for submitted AuthenticationToken [org.apache.shiro.authc.UsernamePasswordToken - lonestar, rememberMe=true].  Returning null. </span><br><span class="line"></span><br><span class="line">2022-02-17 14:33:39,030 INFO [com.lizhi.springbootshiro.start.ShiroQuickStart] - </span><br><span class="line">There is no user with username whith lonestar </span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Shiro"><a href="#SpringBoot整合Shiro" class="headerlink" title="SpringBoot整合Shiro"></a>SpringBoot整合Shiro</h2><h3 id="先按照以下步骤把基本的环境搭好"><a href="#先按照以下步骤把基本的环境搭好" class="headerlink" title="先按照以下步骤把基本的环境搭好"></a>先按照以下步骤把基本的环境搭好</h3><ol><li>导入依赖，这里只显示shiro的相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实体类User.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置类ShiroConfig.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactory</span><span class="params">(<span class="meta">@Autowired</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Autowired</span> UserRealm userRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//realm,需要自定义，用来做授权和认证的</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>UserRealm.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;授权&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>index.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>用户增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/del&#125;&quot;</span>&gt;</span>用户删<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>用户改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>user的add页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>user的add<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>user的del页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>user的delete<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>user的update页面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>user的update<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li>MyController.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.springbootshiro.contoller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是restful风格</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;method&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">operateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;method&quot;)</span> String method)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/&quot;</span>+method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>UserMapper.java</li></ol><p>user表中就三个字段。id,user_name,password,perms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">listAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>UserMapper.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lizhi.springbootshiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lizhi.springbootshiro.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select id,user_name as userName,password,perms from `user`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lizhi.springbootshiro.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select id,user_name as userName,password,perms from `user` where user_name = #&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h3><p>登录拦截指的是，未登录的用户不得进入用户的增删改页面</p><p>下面是集中拦截规则，一般authc和perms用的比较多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anno： 无需认证即可访问</span></span><br><span class="line"><span class="comment"> * authc：必须认证了才可以访问</span></span><br><span class="line"><span class="comment"> * perms：必须拥有权限才可以访问</span></span><br><span class="line"><span class="comment"> * roles：必须拥有某种角色才可以访问</span></span><br><span class="line"><span class="comment"> * user：必须拥有记住我的功能的时候才可以访问（一般很少用）</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这是在ShiroFilterFactoryBean中配置的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactory</span><span class="params">(<span class="meta">@Autowired</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String,String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);<span class="comment">//设置该路径只有user:add才可以访问</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);<span class="comment">//设置该路径只有user:update才可以访问</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/del&quot;</span>,<span class="string">&quot;perms[user:del]&quot;</span>);<span class="comment">//设置该路径只有user:del才可以访问</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);<span class="comment">//设置登录的路径</span></span><br><span class="line">    shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);<span class="comment">//设置登录成功的路径</span></span><br><span class="line">    shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauth&quot;</span>);<span class="comment">//设置未授权的用户被访问后跳转的路径</span></span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>[[$&#123;error&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login.do&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的用户名&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyController中配置路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/unauth&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//这里偷懒没写页面了，而是直接将消息返回到页面中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未经授权无法访问此页面&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(String userName, String password, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userName, password);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        currentUser.login(token);<span class="comment">//这里下一步是到userRealm的认证方法</span></span><br><span class="line">        <span class="comment">//如果没有抛出异常，则说明登录成功</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//拿到shiro内部的session保存数据，</span></span><br><span class="line">        currentUser.getSession().setAttribute(<span class="string">&quot;loginInfo&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (UnknownAccountException uae)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><p>案例走到这里，你会发现无论怎么登录都是错的，那是因为我们还没有对用户进行认证。</p><p>用户认证指的是，当用户登录的时候，对其进行验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;认证&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库中读取数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">    User user = userMapper.getUserByName(token.getUsername());</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//这里如果返回null的话，会自动抛出异常到下图处</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里的第一个参数user会设置给当前登录对象的Principal中。</span></span><br><span class="line">    <span class="comment">//可以通过SecurityUtils.getSubject().getPrincipal()获取</span></span><br><span class="line">    <span class="comment">//第二个参数传入正确的密码，即数据库中的密码，交给shiro来做密码的校验，如果密码错误，也会抛出异常到下图的地方</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/%E8%BF%94%E5%9B%9E%E5%BC%82%E5%B8%B8%E5%88%B0%E6%AD%A4%E5%A4%84.png" class title="返回异常到此处"><blockquote><p>这里插上一嘴，在web环境中，通过subject拿到的session即web框架中的那个session。</p><p>但是如果shiro没有使用在web环境的话，内部也是有一个session的，但是那个就不是web中的session了。</p></blockquote><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>好啦，现在案例已经可以跑起来了，并且如果账号密码正确的话是可以登录的，并且返回到主页</p><p>还记得我们在下图配置的这一串让人一头雾水的配置吗？</p><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Shiro/%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83.png" class title="用户授权"><p>这里就只是配置了一个规则，但是具体登录的用户的授权还没有做，我们现在去完成它吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;授权&quot;</span>);</span><br><span class="line">    SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    <span class="comment">//这里需要根据用户表的数据进行增加权限</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//拿到用户认证的时候传入的user</span></span><br><span class="line">    User currentUser = (User) subject.getPrincipal();</span><br><span class="line">    System.out.println(<span class="string">&quot;权限为：&quot;</span>+ currentUser.getPerms());</span><br><span class="line">    <span class="comment">//数据库中perms字段是以这样的形式存储的   user:add,user:update</span></span><br><span class="line">    <span class="comment">//所以需要将其用，分割然后使用工具类将其转换为集合传入addStringPermissions</span></span><br><span class="line">    info.addStringPermissions(Arrays.asList(currentUser.getPerms().split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就完成了所有的配置啦！大家可以尝试一下</p><p>这里再多完成一个需求，就是首页只显示用户具有权限的链接</p><p>首先需要导入thymeleaf的依赖，然后再导入命名空间<code>xmlns:shiro=&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置一个bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整合thymeleaf</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>[[$&#123;msg&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当session中没有登录信息的时候显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginInfo==null&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当session有信息的时候显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginInfo!=null&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--或者像这样写，不用将用户信息存入session</span></span><br><span class="line"><span class="comment">&lt;p shiro:notAuthenticated&gt;&lt;a th:href=&quot;@&#123;/login&#125;&quot;&gt;登录&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p shiro:authenticated&gt;&lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;注销&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>用户增<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:del&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/del&#125;&quot;</span>&gt;</span>用户删<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>用户改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h3><p>大家都应该注意到了，上面的页面中多了一个注销的链接，接下来我们来完成一下注销的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SecurityUtils.getSubject().logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是的，你没有看错，就是这么简单，shiro已经将其完美得封装好了</p><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger</title>
      <link href="/javaEE/SpringBoot/2022/02/17/SpringBoot-Swagger/"/>
      <url>/javaEE/SpringBoot/2022/02/17/SpringBoot-Swagger/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><ul><li>号称世界上最流行的API框架</li><li>RestFul风格的API展示可以实现API文档和API定义同步更新</li></ul><h3 id="SpringBoot整合Swagger"><a href="#SpringBoot整合Swagger" class="headerlink" title="SpringBoot整合Swagger"></a>SpringBoot整合Swagger</h3><ol><li>导入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要web的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>写一个简单的Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启Swagger功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>访问swagger-ui.html</li></ol><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Swagger/UI%E7%95%8C%E9%9D%A2.png" class title="UI界面"><p>我们在ui的jar包中可以知道我们可以访问该页面</p><p>这是访问的页面</p><img src="/javaEE/SpringBoot/2022/02/17/SpringBoot-Swagger/swagger%E7%9A%84%E7%95%8C%E9%9D%A2.png" class title="swagger的界面"><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><p>Swagger中用来配置的bean是Docket</p><h4 id="配置文档信息"><a href="#配置文档信息" class="headerlink" title="配置文档信息"></a>配置文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置swagger信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">            <span class="string">&quot;swagger测试&quot;</span>,<span class="comment">//文档名称</span></span><br><span class="line">            <span class="string">&quot;初次测试swagger&quot;</span>,<span class="comment">//文档描述</span></span><br><span class="line">            <span class="string">&quot;1.0&quot;</span>,<span class="comment">//版本号</span></span><br><span class="line">            <span class="string">&quot;http://li-zhi.net.cn/&quot;</span>,<span class="comment">//作者个人博客</span></span><br><span class="line">            <span class="keyword">new</span> Contact(<span class="string">&quot;李智&quot;</span>,<span class="string">&quot;http://li-zhi.net.cn/&quot;</span>,<span class="string">&quot;1158778689@qq.com&quot;</span>),<span class="comment">//作者联系方式</span></span><br><span class="line">            <span class="string">&quot;Apache 2.0&quot;</span>,<span class="comment">//开源协议</span></span><br><span class="line">            <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置模型"><a href="#配置模型" class="headerlink" title="配置模型"></a>配置模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerModelConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是专门建了一个SwaggerModelConfig来放置所有的模型类</p><h4 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h4><p>因为项目一般是分组协同开发，每个组各自开发的接口，那接口文档应该各自分开，所以就有了分组的需要</p><p>分组只需要配置一个groupName(“groupName”)即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置扫描的接口"><a href="#配置扫描的接口" class="headerlink" title="配置扫描的接口"></a>配置扫描的接口</h4><p>这里主要讲两种方式，第一种是按路径扫描，第二种是按包名扫描</p><h5 id="按路径扫描"><a href="#按路径扫描" class="headerlink" title="按路径扫描"></a>按路径扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">&quot;/user/**&quot;</span>))</span><br><span class="line"><span class="comment">// 该配置下，该组会扫描所有的/user/下的所有的API</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按包名扫描"><a href="#按包名扫描" class="headerlink" title="按包名扫描"></a>按包名扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group2&quot;</span>)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.lizhiswaggertest.controller&quot;</span>))</span><br><span class="line"><span class="comment">//该配置下，该组会扫描所有此包下的API接口</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类RequestHandlerSelectors中还有其他的扫描机制，可自行研究</p><h3 id="根据环境控制是否能访问swagger"><a href="#根据环境控制是否能访问swagger" class="headerlink" title="根据环境控制是否能访问swagger"></a>根据环境控制是否能访问swagger</h3><p>一般产品的开发都会有开发、测试、运维、上线等多套环境，根据不同的环境，控制是否可以访问swagger的ui界面</p><p>配置文件application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>配置dev环境和test环境可以使用swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">    Profiles devProfile = Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> dev = environment.acceptsProfiles(devProfile);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .enable(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>该设计模式解决的问题是，一个环境中只会存在<strong>一个</strong>该类的对象</p><p>该模式有五种实现方式</p><ol><li>恶汉模式</li><li>懒汉模式</li><li>静态内部类模式</li><li>枚举模式</li></ol><p>该设计模式的核心是<strong>构造方法私有化</strong></p><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>恶汉模式：见名知意，就是在类被加载的时候就创建。</p><p>案例：Runtime类</p><p>缺点：浪费内存空间</p><blockquote><p>我查了资料，查到了这个缺点，但是这个缺点我不时很能理解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>这种实现方式，我们从分几个版本从简单到复杂</p><h4 id="Version-01"><a href="#Version-01" class="headerlink" title="Version 01"></a>Version 01</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            lAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>只能在单线程中安全，多线程中是不安全的</p><p>现在有线程A和线程B，线程A走到了注解A处，然后线程B抢占了CPU，这时候lAZYMAN还是null，所以线程B创建了一个lAZYMAN对象，然后线程A抢回CPU，它这时候已经在if语句里面了，箭在弦上不得不发，所以线程A也创建了一个lAZYMAN对象，导致单例模式被破坏，所以该实现方式线程不安全</p><h4 id="Version-02"><a href="#Version-02" class="headerlink" title="Version 02"></a>Version 02</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>为方法加锁，确实保证了单例模式，但是我们都知道同步方法，锁的是LazyMan的Class类，所以我们得知这种方式可以保证单例模式的线程安全。但是我们好好想想，当我们创建了第一个单例对象之后，还需要锁来保证同步吗？答案显而易见，肯定是不需要的，所以这种方式效率低下，需要改进，我们来看下一个版本</p><h4 id="Version-03"><a href="#Version-03" class="headerlink" title="Version 03"></a>Version 03</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不使用同步方法来保证所有的线程同步，我们只对LAZYMAN对象还为null的线程同步，这时候又出现了问题。我们来分析一下</p><p>现在我们有两个线程，线程A和线程B。线程A走到了注释A处，然后线程B抢占了CPU，这时候lAZYMAN还是null，所以线程B创建了一个lAZYMAN对象，然后线程A抢回CPU，它这时候已经在if语句里面了，箭在弦上不得不发，所以线程A也创建了一个lAZYMAN对象，导致单例模式被破坏，所以该实现方式线程不安全，我们发现这和我们没有加锁的时候的情形几乎一模一样。我们来看下一个版本，<strong>双重锁机制</strong></p><h4 id="Version-04"><a href="#Version-04" class="headerlink" title="Version 04"></a>Version 04</h4><pre><code>public class LazyMan &#123;    private static LazyMan LAZYMAN;    private LazyMan()&#123;        &#125;    public static LazyMan getInstance()&#123;        if(LAZYMAN==null)&#123;            //A            synchronized (LazyMan.class)&#123;                if(LAZYMAN==null)&#123;                    //B                    LAZYMAN = new LazyMan();                &#125;            &#125;        &#125;        return LAZYMAN;    &#125;&#125;</code></pre><p>我个人的理解是第一重锁是为了过滤LAZYMAN为NULL的线程，第二重锁是为了保证只能有一个线程去创建对象，这时候我们似乎找不到什么破绽了，我们来继续往下看</p><h4 id="Version-05"><a href="#Version-05" class="headerlink" title="Version 05"></a>Version 05</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//B</span></span><br><span class="line">                    LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，好像和上一个版本没什么区别，仔细一看，其实区别是在这个单例变量的修饰符多了一个volatile。</p><p>volatile三大作用</p><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止该变量出现的地方发生指令重排</li></ol><p>这里的话，我们使用到的特性是第三点，我们来分析一下<code> LAZYMAN = new LazyMan();</code></p><p>这一句话其实执行了三个步骤</p><ol><li>开辟一个内存空间</li><li>初始化对象</li><li>将该内存空间的地址指向变量</li></ol><p>JVM内部会有一种叫指令重排的代码优化机制，这时候，这三者的顺序就有可能会改变。</p><p>现在我们有两个线程，线程A和线程B。线程A走到了注释A处，然后线程B抢占了CPU，开始执行<code>LAZYMAN = new LazyMan();</code>开辟内存空间后，没有先初始化对象，而是先将该内存空间的地址指向变量，<strong>这时候</strong>线程A抢回了CPU，这时候的LAZYMAN已经不是NULL了，直接将其返回了出去，但是这个对象其实还没有初始化，还是个空架子，这就出现了问题。</p><p>当然这种情况十分十分少，但是为了严谨性，最好还是加上volatile关键词禁止指令重排</p><h3 id="静态内部类模式"><a href="#静态内部类模式" class="headerlink" title="静态内部类模式"></a>静态内部类模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticWay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticWay</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticWay STATICWAY = <span class="keyword">new</span> StaticWay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticWay <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.STATICWAY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现方式其实就是利用的JVM的一些特性</p><p>类的加载分为以下过程</p><ul><li><p><strong>类的加载：</strong>将Class文件字节码加载到内存中，并将这些静态数据转换为方法区的运行时数据结构，然后在堆中生成一个代表该类的Class对象，作为方法区类数据的访问入口，可以使用反射获取该类的所有信息。</p></li><li><p><strong>类的链接：</strong>将Java类的二进制代码合并到JVM中  </p><ul><li>验证：确保加载的类符合JVM规范  </li><li>准备：为静态变量分配内存并设置成员变量的默认值  </li><li>解析：JVM常量池内的符号引用（常量名）替换为直接引用（地址）的过程</li></ul></li><li><p><strong>类的初始化：</strong>执行类构造器&lt; clinit &gt;()方法的过程，当初始化一个类的时候，如果其父类为初始化，则先初始化其父类 ，<strong>JVM会保证类构造器在多线程环境下被正确加锁</strong></p></li></ul><p>其实最开始的饿汉单例模式也是也是这个原理</p><h3 id="颠覆"><a href="#颠覆" class="headerlink" title="颠覆"></a>颠覆</h3><p>其实一路到了这里，以上方法都是不安全的。因为java有一个很牛X的包。</p><p><strong><code>java.lang.reflect</code></strong></p><p>我们在最开始说过，单例模式的本质就是构造器私有化，但是java的反射机制，它不讲武德，它可以直接修改权限修饰符。我们来看看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">    Constructor&lt;Hungry&gt; constructor = Hungry.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Hungry hungry1 = Hungry.getInstance();;</span><br><span class="line">    Hungry hungry2 = constructor.newInstance();</span><br><span class="line">    System.out.println(hungry1==hungry2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可想而知最后的结果是  false</span></span><br></pre></td></tr></table></figure><p>可不可以对其作出防御呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(HUNGRY!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">490</span>)</span><br><span class="line">at com.lizhi.hungry.Hungry.main(Hungry.java:<span class="number">26</span>)</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: 请不要尝试使用反射破坏单例模式</span><br><span class="line">at com.lizhi.hungry.Hungry.&lt;init&gt;(Hungry.java:<span class="number">15</span>)</span><br><span class="line">... <span class="number">5</span> more</span><br></pre></td></tr></table></figure><p>上述方法对饿汉已经作出了合适的防御，那对于懒汉模式，如果两个对象都是使用反射创建的呢？这时候这个防御就是形同虚设了，因为我们肯定是禁止反射去创建对象，所以这种肯定是不行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LazyMan;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line">        LazyMan lazyMan2 = LazyMan.getInstance();</span><br><span class="line">        System.out.println(lazyMan1==lazyMan2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们引入一个布尔值来完成这个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan LazyMan;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag ;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flag=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line"><span class="comment">//        LazyMan lazyMan2 = constructor.newInstance();</span></span><br><span class="line">        LazyMan lazyMan2 = LazyMan.getInstance();</span><br><span class="line"><span class="comment">//        LazyMan lazyMan1 = LazyMan.getInstance();</span></span><br><span class="line">        System.out.println(lazyMan1==lazyMan2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样反射就无法控制我们的单例了！</p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>这时候有没有想起来我们在学javaSE的时候就学到了一个自带单例模式的类型，那就是枚举类Enum！</p><p>我们来尝试攻击一下枚举类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingleEnum</span> </span>&#123;</span><br><span class="line">    SINGLETON;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;SingleEnum&gt; constructor = SingleEnum.class.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        SingleEnum single1 = constructor.newInstance(<span class="string">&quot;single&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        SingleEnum single2 = constructor.newInstance(<span class="string">&quot;single&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(single1==single2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候发现报错了！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)</span><br><span class="line">at com.lizhi.SingleEnum.main(SingleEnum.java:12)</span><br></pre></td></tr></table></figure><p>我们点进newInstance方法看下源码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="meta">@ForceInline</span> <span class="comment">// to ensure Reflection.getCallerClass optimization</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">           IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        checkAccess(caller, clazz, clazz, modifiers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">    ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">    <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ca = acquireConstructorAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T inst = (T) ca.newInstance(initargs);</span><br><span class="line">    <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现了这句话<code>throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</code></p><p>这就解释通了，原来是java的反射已经处理好了枚举类，使其真正的实现了安全的单例！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂设计模式</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2022/02/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><p>该设计模式解决的问题是：将类实例化的操作与使用对象的操作分开，让使用者不用知道具体参数就可以实例化出所需要的产品类，从而避免了在客户端代码中显式指定，实现了解耦。</p><p>该设计模式分为三种实现</p><ol><li>简单工厂设计模式</li><li>工厂方法实现模式</li><li>抽象工厂实现模式</li></ol><h3 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h3><p>一个汽车工厂生产汽车。有特斯拉、大众、五菱</p><p>车的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大众</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaZhong</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大众&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特斯拉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeSiLa</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;特斯拉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五菱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WuLin</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String carName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;大众&quot;</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DaZhong();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;五菱宏光&quot;</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WuLin();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;特斯拉&quot;</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TeSiLa();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：很难横向拓展，如果我后期需要加新的车型，需要改变原来的代码，不符合开闭原则（OOP七大原则）</p><p>优点：简单易懂</p><p>可以简单优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getWuLin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WuLin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getDaZhong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DaZhong();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getTeSiLa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TeSiLa();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂方法实现模式"><a href="#工厂方法实现模式" class="headerlink" title="工厂方法实现模式"></a>工厂方法实现模式</h3><p>还是简单工厂的模型，我们来换个工厂</p><p>这一次我们定义一个汽车工厂的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特斯拉工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeSiLaCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TeSiLa();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大众工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaZhongCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DaZhong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五菱工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WuLinCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WuLin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：当汽车类型很多的时候，会有很多很多很多各自的工厂，没有必要</p><h3 id="抽象工厂实现模式"><a href="#抽象工厂实现模式" class="headerlink" title="抽象工厂实现模式"></a>抽象工厂实现模式</h3><p>这次我们换一个场景：小米和华为都有路由器和手机的产品</p><p>路由器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手机接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>厂家接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">MobilePhone <span class="title">getMobilePhone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Router <span class="title">getRouter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>华为手机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiMobilePhone</span> <span class="keyword">implements</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机发信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>华为路由器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiRouter</span> <span class="keyword">implements</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器配置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为路由器打印详细信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小米路由器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiRouter</span> <span class="keyword">implements</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器配置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米路由器打印详细信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小米手机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiMobilePhone</span> <span class="keyword">implements</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机发信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>华为厂商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiFactory</span> <span class="keyword">implements</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MobilePhone <span class="title">getMobilePhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaWeiMobilePhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaWeiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小米厂商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiFactory</span> <span class="keyword">implements</span> <span class="title">ProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MobilePhone <span class="title">getMobilePhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaoMiMobilePhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaoMiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个维度，第一个维度是产品族（路由器、手机），第二个维度是具体厂商（华为，小米）。</p><p>根据这两种维度分别设计了接口，抽象的工厂定义生产哪些产品族，具体的工厂具体实现自己的产品族</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Security</title>
      <link href="/javaEE/SpringBoot/2022/02/16/SpringBoot-Security/"/>
      <url>/javaEE/SpringBoot/2022/02/16/SpringBoot-Security/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大<br>的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实<br>现强大的安全管理!</p><p>Spring Security的两个主要目标是“认证”和“授权”（访问控制）<br>  “认证”(Authentication)<br>  “授权” (Authorization)<br>  这个概念是通用的，而不是只在Spring Security 中存在。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>继承WebSecurityConfigurerAdapter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重写以下方法做出权限设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//首页都可以访问，但是各个级别下的页面设置成只能各自的级别才可以访问</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">    <span class="comment">//没有权限默认回到登录页面，loginPage设置登录页面，loginProcessingUrl设置登录提交的api</span></span><br><span class="line">    <span class="comment">//如果只写 http.formLogin();会有一个默认登录页面和默认的登录提交的api</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/login&quot;</span>).loginProcessingUrl(<span class="string">&quot;/user/api/login&quot;</span>);</span><br><span class="line">    <span class="comment">//设置退出时候使session失效，logoutSuccessUrl设置退出成功的页面</span></span><br><span class="line">    http.logout().invalidateHttpSession(<span class="keyword">true</span>).logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    <span class="comment">//设置’记住我‘的功能</span></span><br><span class="line">    <span class="comment">//remember-me为默认提交的参数</span></span><br><span class="line">    http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重写以下方法做出授权处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里要从数据库读</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//BCryptPasswordEncoder为密码设置加密，如果不设置会报错，也可以使用其他加密的类</span></span><br><span class="line">    BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(encoder)</span><br><span class="line">        .withUser(<span class="string">&quot;zhima&quot;</span>).password(encoder.encode(<span class="string">&quot;a&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;lizhi&quot;</span>).password(encoder.encode((<span class="string">&quot;123456&quot;</span>))).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><h2 id="thymeleaf模板结合SpringSecurity"><a href="#thymeleaf模板结合SpringSecurity" class="headerlink" title="thymeleaf模板结合SpringSecurity"></a>thymeleaf模板结合SpringSecurity</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>观察这个页面的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;!isAuthenticated()&quot;当用户没登录的时候--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;isAuthenticated()&quot;当用户登录的时候--&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authentication=&quot;name&quot;取出用户的用户名--&gt;</span></span><br><span class="line">            授权：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authentication=&quot;principal.authorities&quot;取出用户的roles--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot;如果当前登录用户有vip1权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/1&#125;&quot;</span>&gt;</span>vip1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/2&#125;&quot;</span>&gt;</span>vip1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/3&#125;&quot;</span>&gt;</span>vip1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip2&#x27;)&quot;如果当前登录用户有vip2权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/1&#125;&quot;</span>&gt;</span>vip2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/2&#125;&quot;</span>&gt;</span>vip2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/3&#125;&quot;</span>&gt;</span>vip2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip3&#x27;)&quot;如果当前登录用户有vip3权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/1&#125;&quot;</span>&gt;</span>vip3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/2&#125;&quot;</span>&gt;</span>vip3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/3&#125;&quot;</span>&gt;</span>vip3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ForkJoin</title>
      <link href="/javaEE/JUC/2022/02/11/ForkJoin/"/>
      <url>/javaEE/JUC/2022/02/11/ForkJoin/</url>
      
        <content type="html"><![CDATA[<h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><h3 id="什么是ForkJoin？"><a href="#什么是ForkJoin？" class="headerlink" title="什么是ForkJoin？"></a>什么是ForkJoin？</h3><p>并行执行任务，提交效率，大数据量的时候使用！</p><p>把大任务拆分成小任务</p><img src="/javaEE/JUC/2022/02/11/ForkJoin/ForkJoin.png" class title="ForkJoin"><h3 id="ForkJoin特点：工作窃取"><a href="#ForkJoin特点：工作窃取" class="headerlink" title="ForkJoin特点：工作窃取"></a>ForkJoin特点：工作窃取</h3><p>内部维护的双端队列，两端都可以出</p><img src="/javaEE/JUC/2022/02/11/ForkJoin/%E5%81%B7%E7%AA%83%E7%AE%97%E6%B3%95.png" class title="偷窃算法"><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>创建ForkJoinPool对象</li><li>新建一个计算任务ForkJoinTask放入池子中计算</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> temp = <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDemo</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">compute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(end-start&lt;temp)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                result+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            ForkJoinDemo forkJoinDemo1 = <span class="keyword">new</span> ForkJoinDemo(start,middle);</span><br><span class="line">            forkJoinDemo1.fork();</span><br><span class="line">            ForkJoinDemo forkJoinDemo2 = <span class="keyword">new</span> ForkJoinDemo(middle,end);</span><br><span class="line">            forkJoinDemo2.fork();<span class="comment">//把任务压入线程队列</span></span><br><span class="line">            result = forkJoinDemo1.join()+ forkJoinDemo2.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/11/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/11/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口，即只有一个抽象方法的接口即为函数式接口，可以使用lambda表达式简化使用。</p><p>函数式接口一般接口上都会有@FunctionInterface注解做标记，作用是检查该接口是否只有一个抽象方法，如果不写，但是接口中确实只有一个抽象方法，也不会影响lambda的使用，下面我们来看一下一些常见的函数式接口</p><h3 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt; T , R &gt;"></a>Function&lt; T , R &gt;</h3><p>函数型接口</p><p>T为传入参数的类型</p><p>R为返回值类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, String&gt; f = s -&gt; s.substring(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">String apply = f.apply(<span class="string">&quot;asdas    asd &quot;</span>);</span><br><span class="line">System.out.println(apply);</span><br></pre></td></tr></table></figure><h3 id="Predicate-lt-T-gt"><a href="#Predicate-lt-T-gt" class="headerlink" title="Predicate&lt; T &gt;"></a>Predicate&lt; T &gt;</h3><p>断言型接口</p><p>T为传入参数的类型</p><p>返回值为Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; p = t-&gt;t.length()&gt;<span class="number">5</span>;</span><br><span class="line">System.out.println(p.test(<span class="string">&quot;3223&quot;</span>));</span><br><span class="line">System.out.println(p.test(<span class="string">&quot;saf223&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="Consumer-lt-T-gt"><a href="#Consumer-lt-T-gt" class="headerlink" title="Consumer&lt; T &gt;"></a>Consumer&lt; T &gt;</h3><p>消费者型接口</p><p>T为传入的参数</p><p>无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = c-&gt; System.out.println(<span class="string">&quot;我使用了&quot;</span>+c);</span><br><span class="line">consumer.accept(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">consumer.accept(<span class="string">&quot;456&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Supplier-lt-T-gt"><a href="#Supplier-lt-T-gt" class="headerlink" title="Supplier&lt; T &gt;"></a>Supplier&lt; T &gt;</h3><p>生产者型接口</p><p>T为返回值类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; supplier = ()-&gt; UUID.randomUUID().toString();</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/javaEE/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2022/02/11/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/javaEE/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2022/02/11/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h3><p>我们先看使用Executors创建的三种线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Executors.newSingleThreadExecutor();<span class="comment">//创建一个只有一个线程的线程池</span></span><br><span class="line">Executors.newFixedThreadPool();<span class="comment">//创建一个固定数目的线程的线程池</span></span><br><span class="line">Executors.newCachedThreadPool();<span class="comment">//缓存池，会复用之前使用过的线程</span></span><br></pre></td></tr></table></figure><p>执行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h3><p>阿里巴巴规范中有这么一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors返回的线程池对象的弊端如下：</span><br><span class="line">1）FixedThreadPool和SingleThreadPool:</span><br><span class="line">  允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</span><br><span class="line">2）CachedThreadPool:</span><br><span class="line">  允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</span><br></pre></td></tr></table></figure><p>我们来看看创建这三种线程池的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，这三个构造方法创建的对象其实都是ThreadPoolExecutor对象，只不过就是构造参数不一样。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>核心线程池的大小</td></tr><tr><td>int maximumPoolSize</td><td>最大线程池的大小</td></tr><tr><td>long keepAliveTime</td><td>超时时间过后就释放</td></tr><tr><td>TimeUnit unit</td><td>超时时间单位</td></tr><tr><td>BlockingQueue&lt; Runnable&gt; workQueue</td><td>阻塞队列</td></tr><tr><td>ThreadFactory threadFactory</td><td>线程工厂，创建线程的，一般不用动</td></tr><tr><td>RejectedExecutionHandler handler</td><td>拒绝策略</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>corePoolSize为一直开着的线程数，当workQueue已经满了，则继续开启线程直到maximumPoolSize，当线程数到了maximumPoolSize，然后workQueue也满了，如果还有新的任务，则使用handler拒绝策略对其进行处理。</p><p>当corePoolSize-maximumPoolSize区间的线程等待了workQueue时间后，还是没任务来，则关闭该区间的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">    Executors.defaultThreadFactory(),</span><br><span class="line">    <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="CPU密集型和IO密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h4><p>最大线程数到底如何定义？</p><h5 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h5><p>几核CPU就是几，可以保证效率最高   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().availableProcessors()<span class="comment">//动态获取cpu核数</span></span><br></pre></td></tr></table></figure><h5 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h5><p>程序里面有多少个非常消耗IO的线程，一般最大线程数设置为该数字的两倍</p><h3 id="四大拒绝策略"><a href="#四大拒绝策略" class="headerlink" title="四大拒绝策略"></a>四大拒绝策略</h3><img src="/javaEE/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2022/02/11/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E5%9B%9B%E7%A7%8D%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.png" class title="四种拒绝策略"><h4 id="AbortPolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h4><p>不处理此任务，并且抛出异常</p><h4 id="CallerRunsPolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h4><p>不处理此任务，往上传递此任务，哪来的回哪里去</p><h4 id="DiscardOldestPolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h4><p>不处理此任务，不会抛出异常</p><h4 id="DiscardPolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h4><p>尝试和最老的那一个线程竞争，不会抛出异常</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-简介</title>
      <link href="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/"/>
      <url>/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h3><p>下面是简易的结构图</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" class title="JVM体系结构"><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%842.png" class title="JVM体系结构2"><p>栈中不会有垃圾回收</p><p>大部分JVM调优都是在堆内存上进行调优</p><p>详细的结构图如下</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E6%9E%B6%E6%9E%84.jpg" class title="JVM架构"><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>​java安全模型的核心就是java沙箱（sandbox）。沙箱是一个限制程序运行的环境。沙箱机制就是将java代码限定在JVM特定的运行范围内，并且严格限制代码对本地资源的访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。<strong>沙箱主要限制系统资源（CPU，内存，文件系统，网络）访问</strong>。不同级别的沙箱对这些资源的限制就不一样</p><p>​所有的java程序运行都可以指定沙箱，可以指定安全策略。</p><p>​在java中，将执行过程分为本地代码和远程代码两部分，本地代码是默认可信任的，而远程代码则被看做是不受信任的。对于授予信任的本地代码，可以访问一切本地资源。而对于非授予信任的远程代码在早期的java实现中，完全依赖于java沙箱机制。下图是jdk1.0的安全模型</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.0%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.0安全模型"><p>​但是如此严格的安全机制也给程序的功能拓展带来了障碍，比如用户希望远程代码访问本地资源的时候，就会被沙箱机制所拒绝。所以在后来的jdk1.1版本中，针对安全机制做出了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限。下图是jdk1.1的安全模型</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.1%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.1安全模型"><p>​在jdk1.2的版本中，再次引进安全机制，增加了代码签名，不论是本地代码还是远程代码，都会按照用户的安全策略设定，由类加载器加载到JVM中权限不同的运行空间，来实现差异化的代码执行权限控制。下图是jdk1.2的安全模型</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.2%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.2安全模型"><p>​当前最新的安全机制实现，则引入了域（domain）的概念。JVM会把所有的代码加载到不同的系统和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限（Permission）。存在于不同域中的类文件就具有了当前域的全部权限。下图是jdk1.6的安全模型</p><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.6%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.6安全模型"><p>​组成沙箱的基本组件:</p><ul><li><p>字节码校验器(bytecode verifier):确保java类文件遭循java语言规范。这样可以帮助ava程序实现内存保<br>护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p></li><li><p>类装载器(classloader):其中类装载器在3个方面对java沙箱起作用</p><ul><li>它防止恶意代码去干涉善意的代码;</li><li>它守护了被信任的类库边界;</li><li>它将代码归入保护域，确定了代码可以进行哪些操作。</li></ul></li></ul><p>​虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由ava虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p><p>类装载器采用的机制是双亲委派模式。</p><ol><li>从最内层IVM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用;</li><li>由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li></ol><ul><li>存取控制器(access controller):存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略<br>设定，可以由用户指定。</li><li>安全管理器(security manager):是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li><li>安全软件包(security package):javasecurity下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括:<ul><li>安全提供者</li><li>消息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><p>凡是带了native关键词的方法，说明这个方法java语言实现不了，此方法会被放入本地方法栈中，该栈通过JNI（Java Native Interface）去调用底层的C或者C++语言写的方法。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>Method Area</p><p>方法区是被所有线程共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单来说，所有定义的方法的信息都会被保存在该区域</p><p>静态变量、常量、类信息（构造方法，接口定义），运行时的常量池存放在方法区中，但是实例变量存在于内存区中，与方法区无关</p><h3 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h3><p>程序计数器：Program Counter Register</p><p>​每个线程都有一个程序计数器，实现程序私有的，就是一个指针，指向方法区中的方法字节码</p><h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>一个JVM只有一个堆内存，堆内存的大小是可以调节的，里面一般放实例对象</p><p>堆内存细分为三个区域：</p><ol><li>新生区  Young&#x2F;New  </li><li>养老区  old </li><li>永久区  perm</li></ol><img src="/javaEE/JVM/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" class title="JVM堆内存分布"><p>GC垃圾回收主要在伊甸园区和养老区</p><p>堆内存满了就会爆OOM（OutOfMemoryError）错误</p><p>所有的对象都是在伊甸园区产生的</p><p>伊甸园满了会触发轻GC，有的就直接死了，然后留下来的去往幸存区</p><p>如果幸存区满了，就去往老年区</p><p>如果老年区满了，触发一次重GC（伊甸园区和幸存者区都清一遍，活下来的去老年区）</p><h3 id="垃圾处理器GC"><a href="#垃圾处理器GC" class="headerlink" title="垃圾处理器GC"></a>垃圾处理器GC</h3><p>GC的作用区域只有堆</p><p>两种回收：轻GC 、Full GC</p><p>GC的算法</p><ol><li>标记清除法</li><li>标记整理法</li><li>标记复制算法</li><li>引用计数法（给每一个对象分配一个计数器，将计数器为0的对象清除）</li></ol><h4 id="标记复制法"><a href="#标记复制法" class="headerlink" title="标记复制法"></a>标记复制法</h4><p>谁空谁是to幸存区</p><p>新生区主要使用复制算法</p><p>好处：没有内存碎片</p><p>坏处：浪费了内存空间</p><p>复制算法使用最佳场景：对象存活度较低的时候</p><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p>扫描这些活着的对象，清除没有标记的对象进行清除</p><p>缺点：两次扫描，浪费时间，会产生内存碎片</p><p>优点：不需要额外空间</p><h4 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h4><p>再次扫描，向一端移动存活的对象</p><p>分代收集算法</p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代</p><ul><li>存活率高</li><li>标记清除+标记压缩混合实现</li></ul><p>这五道面试题可以试着做一做</p><ol><li>请你谈谈你对JVM的理解？java8虚拟机和之前的有什么不同？</li><li>什么是OOM，什么是栈溢出？怎么分析？</li><li>JVM的常用调优参数有哪些？</li><li>内存快照如何抓取？怎么分析Dump文件？</li><li>谈谈你对类加载器的认识？</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if语句减少嵌套</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/if%E8%AF%AD%E5%8F%A5%E5%87%8F%E5%B0%91%E5%B5%8C%E5%A5%97/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/if%E8%AF%AD%E5%8F%A5%E5%87%8F%E5%B0%91%E5%B5%8C%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h2 id="if的多重嵌套"><a href="#if的多重嵌套" class="headerlink" title="if的多重嵌套"></a>if的多重嵌套</h2><p>直接举栗子：有一个电商平台，当用户消费满1000元，根据vip等级可享受优惠</p><ul><li>普通会员 不打折</li><li>白银会员             优惠50元</li><li>黄金会员             打8折</li><li>白金会员             优惠50元，再打七折</li></ul><h3 id="Version-1-0"><a href="#Version-1-0" class="headerlink" title="Version 1.0"></a>Version 1.0</h3><p>会员类型枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UserType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ORDINARY_VIP: 普通会员</span></span><br><span class="line"><span class="comment">     * SILVER_VIP: 白银会员</span></span><br><span class="line"><span class="comment">     * GOLD_VIP： 黄金会员</span></span><br><span class="line"><span class="comment">     * PLATINUM_VIP：白金会员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORDINARY_VIP(<span class="number">1</span>),</span><br><span class="line">    SILVER_VIP(<span class="number">2</span>),</span><br><span class="line">    GOLD_VIP(<span class="number">3</span>),</span><br><span class="line">    PLATINUM_VIP(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    UserType(<span class="keyword">int</span> code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">            result = money - <span class="number">50</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">            result = money * <span class="number">0.8</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.PLATNUM_VIP.getCode())&#123;</span><br><span class="line">            result = (money - <span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里的if语句可能不是那么繁琐，但是当业务十分复杂或者当策略会经常变动的时候，需要经常修改源代码，这就严重违反了开闭原则，但是我可不可减少if的出现甚至不出现呢？</p><p>下面我们结合以下两种解决方案来一步一步尝试解决问题</p><ol><li>卫语句</li><li>策略模式</li></ol><h3 id="Version-1-1"><a href="#Version-1-1" class="headerlink" title="Version 1.1"></a>Version 1.1</h3><p>卫语句，就是将不符合的情况直接返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type== UserType.ORDINARY_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> OrdinaryStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> SilverStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> GoldStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type==UserType.PLATINUM_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> PlatinumStrategy().compute(money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Version-2-0"><a href="#Version-2-0" class="headerlink" title="Version 2.0"></a>Version 2.0</h3><p>策略模式就是将各个会员的优惠方式提出一个接口，分别实现</p><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdinaryStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黄金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (money-<span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白银会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money-<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money,<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type== UserType.ORDINARY_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> OrdinaryStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> SilverStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> GoldStrategy().compute(money);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type==UserType.PLATINUM_VIP.getCode())&#123;</span><br><span class="line">        result = <span class="keyword">new</span> PlatinumStrategy().compute(money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Version-2-1"><a href="#Version-2-1" class="headerlink" title="Version 2.1"></a>Version 2.1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer,Strategy&gt; map;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StrategyFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        map.put(UserType.ORDINARY_VIP.getCode(), <span class="keyword">new</span> OrdinaryStrategy());</span><br><span class="line">        map.put(UserType.SILVER_VIP.getCode(), <span class="keyword">new</span> SilverStrategy());</span><br><span class="line">        map.put(UserType.GOLD_VIP.getCode(),<span class="keyword">new</span> GoldStrategy());</span><br><span class="line">        map.put(UserType.PLATINUM_VIP.getCode(),<span class="keyword">new</span> PlatinumStrategy());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> userType, <span class="keyword">long</span> money)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StrategyFactory.map.get(userType)==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数错误，无此类型的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(userType).compute(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的工厂还可以通过这种方式来实现</p><h3 id="Version-2-2"><a href="#Version-2-2" class="headerlink" title="Version 2.2"></a>Version 2.2</h3><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黄金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.GOLD_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdinaryStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.ORDINARY_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白金会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (money-<span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.PLATINUM_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白银会员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SilverStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">long</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money-<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserType.SILVER_VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Strategy&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Strategy&gt; strategies=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strategies.add(<span class="keyword">new</span> GoldStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> OrdinaryStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> PlatinumStrategy());</span><br><span class="line">        strategies.add(<span class="keyword">new</span> SilverStrategy());</span><br><span class="line">        map=strategies.stream().collect(Collectors.toMap(Strategy::getType,strategy -&gt; strategy));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> userType, <span class="keyword">long</span> money)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(money&lt;<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(StrategyFactory.map.get(userType)==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;参数错误，无此类型的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(userType).compute(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h2 id="情景在线"><a href="#情景在线" class="headerlink" title="情景在线"></a>情景在线</h2><p>我们在登录完一个网站后，很长一段时间都不需要输入用户名和密码。大家有没有好奇这是为什么呢？</p><p>学过HTTP的都知道，HTTP访问是无状态的，也就是说，服务器是不知道你这是第几次访问该网站的。</p><p>那么Cookie，Session就是来做到让服务器预先知道一些信息，其核心其实就是存储。</p><p>Cookie是存储在客户端的，Session是存储在服务器端的</p><p>下面我们来说说Cookie</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie翻译为小饼干</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/Cookie%E5%9B%BE%E6%A0%87.png" class title="Cookie图标"><p>该技术可以实现每次HTTP请求都自动带数据给服务器，从而实现服务器可以在请求的时候就预先知道一些信息。</p><p>流程图如下</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%9D%E5%AD%98Cookie.png" class title="客户端保存Cookie"><p>我们可以在浏览器中查看Cookie</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8BCookie.png" class title="浏览器查看Cookie"><p>如果使用Cookie保存账号密码，那只要别人盗到你的Cookie，那么你的账号密码就泄露了！所以就出现了Session的技术</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session翻译为会话</p><p>当我们打开一个浏览器进去网站，则开始一个会话，但是会话的结束比较模糊，可以自动设置session过期时间，也可以设置永不过期。</p><p>Session保存在服务器，当产生了一次会话，则服务器返回的时候携带存储session相关信息的Cookie，并保存在客户端，而这个session对象的信息则保存在服务器的数据库中。</p><p>下面是流程图</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Cookie%E5%92%8CSession/Session%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class title="Session流程图">]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Token</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Token/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Token/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么会出现Token"><a href="#为什么会出现Token" class="headerlink" title="为什么会出现Token"></a>为什么会出现Token</h2><p>相信大家都知道Cookie和Session（不知道这两者的在我另外两篇博客里面有写，附上链接，<a href="https://li-zhi.net.cn/2022/02/07/Cookie%E5%92%8CSession/">Cookie和Session</a>）</p><p>随着技术的发展，用户群体变的越来越大，如果服务器依旧使用基于Cookie的Session，在某一时间段有大量用户访问的话，服务器就会将大量的Session保存在数据库中，导致服务器性能降低，为了处理这种问题，就出现了一种技术，也就是JWT(JSON Web Token)</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Token/JWT%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class title="JWT流程图"><p>JWT是由三部分组成的，分别是header、payload、signature</p><p>header部分申明用什么算法生成签名</p><p>payload部分保存一些数据</p><p>signature部分保存header申明的算法生成的签名</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Token/JWT%E7%9A%84%E7%BB%84%E6%88%90.jpg" class title="JWT的组成"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Session、Cookie、Token都是是在服务器产生的</p><p>Cookie是保存SessionID的载体，但是Session对象是保存在服务器数据库中的</p><p>Token在服务器端生成，保存服务器端的密文，将token放入cookie发送诶客户端并交由客户端保存</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrok</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Ngrok快速部署项目"><a href="#使用Ngrok快速部署项目" class="headerlink" title="使用Ngrok快速部署项目"></a>使用Ngrok快速部署项目</h2><ol><li>打开<a href="https://ngrok.cc/">https://ngrok.cc/</a></li><li>注册一个账户</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E6%B3%A8%E5%86%8C%E5%90%8E%E7%9A%84%E9%A1%B5%E9%9D%A2.png" class title="注册后的页面"><ol start="3"><li>支付2块钱进行支付宝实名认证</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81.png" class title="实名认证"><ol start="4"><li>点击开通隧道并翻到最后</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png" class title="开通隧道"><ol start="5"><li>开通隧道选项</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93%E9%80%89%E9%A1%B9.png" class title="开通隧道选项"><p>说明：</p><blockquote><p>隧道协议，两者即可</p></blockquote><ul><li>HTTP</li><li>HTTPS（HTTPS需要绑定自己的域名，并且已经申请了SSL证书，才能有效，否则无法使用https。）</li></ul><blockquote><p>隧道名称</p></blockquote><p>随便写即可</p><blockquote><p>前置域名</p></blockquote><p>写自己喜欢的</p><blockquote><p>http验证用户名和密码</p></blockquote><p>这里可以不写</p><ol start="6"><li>确认信息，开通</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E7%A1%AE%E8%AE%A4%E4%BF%A1%E6%81%AF.png" class title="确认信息"><ol start="7"><li>进入隧道管理页面</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E9%9A%A7%E9%81%93%E7%AE%A1%E7%90%86.png" class title="隧道管理"><blockquote><p>ps：这里和我之前写的配置不一样，是因为一个用户只能免费开通一个http隧道</p></blockquote><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%8F%AA%E8%83%BD%E5%85%8D%E8%B4%B9%E5%BC%80%E9%80%9A%E4%B8%80%E4%B8%AA.png" class title="只能免费开通一个"><ol start="8"><li>下载客户端</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8B%E8%BD%BD.png" class title="客户端下载"><p>下载对应系统的软件，并解压</p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E4%B8%8B%E8%BD%BD%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BD%AF%E4%BB%B6.png" class title="下载客户端软件"><ol start="9"><li>启动批处理命令</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E5%90%AF%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF.png" class title="启动客户端"><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E7%B1%BB%E4%BC%BC%E8%BF%99%E6%A0%B7%E7%9A%84%E7%95%8C%E9%9D%A2.png" class title="类似这样的界面"><blockquote><p>ps：我第一次使用的不是乱码，我也不理解这次使用为什么会乱码，这里不影响使用</p></blockquote><ol start="10"><li>输入隧道id，回车</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E7%B1%BB%E4%BC%BC%E8%BF%99%E6%A0%B7%E7%9A%84%E7%95%8C%E9%9D%A2.png" class title="类似这样的界面"><p><strong>如果之前配置了账号密码，则在此处需要输入账号密码</strong></p><ol start="11"><li>启动本地项目</li></ol><p><strong>注：本地项目启动的端口一定要和之前写的端口映射一致</strong></p><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E9%85%8D%E7%BD%AEtomcat%E5%BC%80%E5%90%AF%E7%9A%84%E7%AB%AF%E5%8F%A3.png" class title="配置tomcat开启的端口"><ol start="12"><li>打开网址测试</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E6%89%93%E5%BC%80%E7%BD%91%E5%9D%80%E6%B5%8B%E8%AF%95.png" class title="打开网址测试"><ol start="13"><li>本地</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE.png" class title="本地访问"><ol start="14"><li>Ngrok提供的网站访问</li></ol><img src="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/Ngrok/Ngrok%E6%8F%90%E4%BE%9B%E7%9A%84%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE.png" class title="Ngrok提供的网站访问">]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于路径</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/%E5%85%B3%E4%BA%8E%E8%B7%AF%E5%BE%84/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/02/07/%E5%85%B3%E4%BA%8E%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="访问路径"><a href="#访问路径" class="headerlink" title="访问路径"></a>访问路径</h1><p>URL统一资源定位符，用于定位资源的一种方式。</p><p>通常的URL资源访问路径由两部分构成:资源路径与资源名称。</p><p>资源名称指的是要访问资源的直接名称，如show.html,或与要访问资源存在映射关系的间接名称，如show.do</p><p>资源路径，则是通过该路径则可以定位到指定的资源，即资源路径是指在URL资源访问路径中除了资源名称以外的其它部分。</p><p>根据“资源路径是否可以独立完成资源准确定位”的判别标准,可以将访问路径分为绝对路径与相对路径</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径，是指根据给出的访问路径可以精确的定位到这个资源的路径</p><p>对于计算机中Web应用的绝对路径，则是指带访问协议的路径。即URL</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>相对路径,是指仅根据访问路径无法准确定位资源的路径。</p><p>相对路径必须要结合其参照路径才可组成可以准确定位资源的绝对路径。</p><p>参照路径的不同，所形成的可以准确定位资源的绝对路径也是不同的。</p><p>在进行资源访问时,必须要将相对路径转换为绝对路径才可完成资源的精确定位</p><p><strong>绝对路径 &#x3D; 参照路径 + 相对路径</strong></p><p>根据相对路径是否以斜杠开头，且路径指向的文件不同，其默认的参照路径是不一样的</p><h3 id="以斜杠开头的相对路径"><a href="#以斜杠开头的相对路径" class="headerlink" title="以斜杠开头的相对路径"></a>以斜杠开头的相对路径</h3><h4 id="前台路径"><a href="#前台路径" class="headerlink" title="前台路径"></a>前台路径</h4><p>所谓前台路径是指，由浏览器解析执行的代码中所包含的路径。</p><p>例如，html、 css、 js中的路径，及jsp文件中静态部分的路径(HTML标签中的路径)。html 及jsp文件中的&lt; img src-&#x3D;*&#x2F;&gt;、&lt; a href&#x3D;””&gt;. &lt; form action&#x3D;””&gt;等标签中的<strong>以斜杠开头的路径</strong>都属于前台路径</p><p>前台路径的<strong>参照路径</strong>是Web服务器的根路径,即<strong><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></strong></p><p>将前台路径转换为绝对路径的工作,是由浏览器自动完成的。</p><p>该路径的作用是要为用户提交对某种资源的请求,是要查找并定位服务器中的某资源。</p><p>简单来说,前台路径的作用是“查找”</p><h4 id="后台路径"><a href="#后台路径" class="headerlink" title="后台路径"></a>后台路径</h4><p>所谓后台路径是指，由服务器解析执行的代码及文件中所包含的路径。</p><p>例如，java 代码中的路径、jsp文件动态部分java代码块)中的路径、xml等配置文件中的路径(配置文件是要被java代码解析后加载到内存的，其中的路径会出现在Java 代码中)</p><p>后台路径的<strong>参照路径</strong>是Web应用的根路径。<a href="http://127.0.0.1:8080/projectName">http://127.0.0.1:8080/projectName</a></p><p>将后台路径转换为绝对路径的工作,是由服务器自动完成的。该路径的作用是标识出该资源在服务器中的路径，以便客户端能够按照这个设定路径来查找相应资源。简单来说,后台路径的作用是“标识”</p><h3 id="以路径开头的相对路径"><a href="#以路径开头的相对路径" class="headerlink" title="以路径开头的相对路径"></a>以路径开头的相对路径</h3><p>以路径名称开头的相对路径，无论是出现在前台页面,还是出现在后台Java代码或配置文件中，其<strong>参照路径</strong>都是<strong>当前访问路径的资源路径</strong>。</p><p>即使是response 的sendRedirect()方法的参数路径,若不以斜杠开头，其也属于“以斜杠开头的相对路径”类的路径，参照路径为当前服务器的根路径</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>相对路径类型</th><th>参照路径</th><th>相对路径转绝对路径的完成者</th></tr></thead><tbody><tr><td>前台路径</td><td>当前Web服务器的根路径</td><td>浏览器</td></tr><tr><td>后台路径</td><td>当前Web应用的根路径</td><td>Web服务器</td></tr><tr><td>以路径名称开头的路径</td><td>当前访问路径的资源路径</td><td>浏览器&#x2F;Web服务器</td></tr></tbody></table><blockquote><p>PS：</p></blockquote><p>对于response的sendRedirect( )方法完成的重定向</p><p>若其参数路径为“以斜杠开头的相对路径”这个后台路径是个特例。是由sendRedirect( )方法的本质决定的。这个方法不仅可以完成在当前项目中资源的跳转,还可以跳转到其它项目中的资源。所以这个后台路径的参照路径为“<strong>当前Web服务器的根</strong>”。所以要加resquest.getContextPath();</p><p>注意，只有这一种重定向是特例,将来我们还会学习到其它方式实现的重定向，但那里的重定向就不是特例,而是遵循我们之前的路径转换理论</p><p><em><strong>如果加斜杠和不加斜杠都可以完成跳转，就加上斜杠</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-文件下载</title>
      <link href="/javaEE/SpringMVC/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/javaEE/SpringMVC/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载很简单，只要设置一下响应头即可</p><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        ul li &#123;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:&quot;</span>&gt;点击文字下载&lt;/a&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;fileList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;/fileDownLoad.do?fileName=$&#123;file&#125;&quot;</span>&gt;$&#123;file&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/fileDownLoad.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileDownLoad</span><span class="params">(String fileName,HttpServletRequest req,HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String realPath = req.getServletContext().getRealPath(<span class="string">&quot;\\download&quot;</span>)+<span class="string">&quot;\\&quot;</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath.concat(fileName));</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment; filename=&quot;</span>+ URLEncoder.encode(file.getName(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len=fis.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    fis.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;filedownload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-文件上传</title>
      <link href="/javaEE/SpringMVC/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/javaEE/SpringMVC/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先对于表单中的enctype属性做一个了解</p><ol><li>application&#x2F;x-www&#x3D;form-urlencoded:默认方式，只处理表单中的value的属性值，采用这种编码方式的表单会将表单域中的值处理成URL编码方式</li><li>multipart&#x2F;form-data:这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会将文件域中的文件夜风撞到请求参数中</li><li>text&#x2F;plain:除了把空格改为“+”号外，其他字符不做编码处理，这种方式适合直接通过表单来发送邮件</li></ol><p>文件上传是一个web项目中很常见的功能，在springmvc中有着很好的支持，但是springmvc默认上下文没有配置MultipartResolver，所以在做文件上传和下载前，需要配置MultipartResolver，</p><ol><li>在原有包的基础上导入此包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注册MultipartResolver实例，id必须为multipartResolver，id必须为multipartResolver，id必须为multipartResolver，不然报错</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>以下就不赘述springMVC的配置文件了</p></blockquote><h2 id="上传单个文件"><a href="#上传单个文件" class="headerlink" title="上传单个文件"></a>上传单个文件</h2><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;单个文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;avatar&quot;</span> id=<span class="string">&quot;avatar&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/singleFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">singleFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;avatar&quot;,required = false)</span> CommonsMultipartFile avatar,HttpServletRequest req, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">    String avatarWholeName = avatar.getOriginalFilename();</span><br><span class="line">    <span class="comment">//文件的后缀</span></span><br><span class="line">    String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">    <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">    String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">    <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">    String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">    <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">    avatar.transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;singleFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h2><p>其实和上传单个文件很像，只要input控件的name属性是一样的，那它们就是一组，下面来看看代码</p><p><strong>controller：</strong>（两法，个人偏向于第二种）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/multiFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;,required = false)</span> CommonsMultipartFile[] files,HttpServletRequest req, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload/multipart&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">        <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">        String avatarWholeName = files[i].getOriginalFilename();</span><br><span class="line">        <span class="comment">//文件的后缀</span></span><br><span class="line">        String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">        <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">        String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">        <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">        String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">        <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">        files[i].transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;multiFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/multiFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">multiFileUploadDo</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String realPath = request.getServletContext().getRealPath(<span class="string">&quot;\\multipartUpload&quot;</span>)+<span class="string">&quot;\\&quot;</span>;</span><br><span class="line">    CommonsMultipartResolver cmr = <span class="keyword">new</span> CommonsMultipartResolver(request.getServletContext());</span><br><span class="line">    <span class="keyword">if</span>(cmr.isMultipart(request))&#123;</span><br><span class="line">        MultipartHttpServletRequest req = (MultipartHttpServletRequest) request;</span><br><span class="line">        MultiValueMap&lt;String, MultipartFile&gt; multiFileMap = req.getMultiFileMap();</span><br><span class="line">        <span class="keyword">for</span> (String fieldName : multiFileMap.keySet()) &#123;</span><br><span class="line">            String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//创建存放文件的文件夹</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(realPath + uuidPath + fieldName);</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">            List&lt;MultipartFile&gt; multipartFiles = multiFileMap.get(fieldName);</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile f : multipartFiles) &#123;</span><br><span class="line">                <span class="comment">//如果文件为空，则忽略，不然会报错</span></span><br><span class="line">                <span class="keyword">if</span>(!f.isEmpty())&#123;</span><br><span class="line">                    f.transferTo(<span class="keyword">new</span> File(dir.getPath()+<span class="string">&quot;\\&quot;</span>+f.getOriginalFilename()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;multiFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/multiFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上都是同步提交，下面我们使用异步提交并且将图片预览出来，这次只演示单个文件上传，多个文件上传同理。</p><h2 id="异步提交并提供预览"><a href="#异步提交并提供预览" class="headerlink" title="异步提交并提供预览"></a>异步提交并提供预览</h2><p><strong>Controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/reg.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">reg</span><span class="params">(User user,String relativePath)</span></span>&#123;</span><br><span class="line">    user.setAvatarUrl(<span class="string">&quot;\\upload\\&quot;</span>.concat(relativePath));</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/singleFileUpload.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">singleFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;avatar&quot;,required = false)</span>CommonsMultipartFile avatar,</span></span></span><br><span class="line"><span class="params"><span class="function">                              HttpServletRequest req)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(avatar==<span class="keyword">null</span>||avatar.isEmpty())&#123;</span><br><span class="line">        map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">    String avatarWholeName = avatar.getOriginalFilename();</span><br><span class="line">    <span class="comment">//文件的后缀</span></span><br><span class="line">    String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">    <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">    String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">    <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">    String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">    <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">    avatar.transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//用来给页面显示图片</span></span><br><span class="line">    map.put(<span class="string">&quot;relativePath&quot;</span>,<span class="string">&quot;\\upload\\&quot;</span>.concat(realFileName));</span><br><span class="line">    <span class="comment">//用来给前端判断是否需要再次上传</span></span><br><span class="line">    map.put(<span class="string">&quot;fileName&quot;</span>,avatarWholeName);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;单个文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;form&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入用户名&quot;</span> name=<span class="string">&quot;userName&quot;</span> id=<span class="string">&quot;userName&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> placeholder=<span class="string">&quot;请输入年龄&quot;</span> name=<span class="string">&quot;age&quot;</span> id=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;avatar&quot;</span> id=<span class="string">&quot;avatar&quot;</span>&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;display: none&quot;</span> id=<span class="string">&quot;showimgcontainer&quot;</span>&gt;</span><br><span class="line">            &lt;img id=<span class="string">&quot;showimg&quot;</span> width=<span class="string">&quot;400px&quot;</span> height=<span class="string">&quot;400px&quot;</span> style=<span class="string">&quot;border: solid 1px black&quot;</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;submitBtn&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery.form.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    let fileName;</span><br><span class="line">let relativePath;</span><br><span class="line">    $(<span class="string">&#x27;#avatar&#x27;</span>).change(()=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(fileName===$(<span class="string">&#x27;#avatar&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>].name)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">let options = &#123;</span><br><span class="line">url: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&#x27;</span>,</span><br><span class="line">            dataType:<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">            success(data)&#123;</span><br><span class="line">data = JSON.parse(data);</span><br><span class="line"><span class="keyword">if</span>(data.result===<span class="string">&#x27;fail&#x27;</span>)&#123;</span><br><span class="line">alert(<span class="string">&quot;文件为空或者不存在&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">relativePath = data.relativePath;</span><br><span class="line">fileName = data.fileName;</span><br><span class="line">$(<span class="string">&#x27;#showimgcontainer&#x27;</span>).show();</span><br><span class="line">$(<span class="string">&#x27;#showimg&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,relativePath);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">$(<span class="string">&#x27;#form&#x27;</span>).ajaxSubmit(options);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#submitBtn&#x27;</span>).click(()=&gt;&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">            url: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/reg.do&#x27;</span>,</span><br><span class="line">            method:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data: &#123;relativePath:relativePath,userName:$(<span class="string">&#x27;#userName&#x27;</span>).val(),age:$(<span class="string">&#x27;#age&#x27;</span>).val()&#125;,</span><br><span class="line">            success(data) &#123;</span><br><span class="line"><span class="keyword">if</span>(data.result===<span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">                    alert(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">window.location = <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/login&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">&quot;出错！请重试！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-其他命令</title>
      <link href="/javaEE/Linux/2022/01/31/Linux-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"/>
      <url>/javaEE/Linux/2022/01/31/Linux-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>查看磁盘使用情况</p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：df [参数] [对象磁盘/分区]</span></span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line"><span class="comment"># 显示所有系统文件</span></span><br><span class="line">-a, --all             include pseudo, duplicate, inaccessible file system</span><br><span class="line"><span class="comment"># 以容易阅读的方式展示</span></span><br><span class="line">-h, --human-readable  <span class="built_in">print</span> sizes <span class="keyword">in</span> human readable format (e.g., 1K 234M 2G</span><br><span class="line"><span class="comment"># 显示索引节点的信息</span></span><br><span class="line">-i, --inodes          list inode information instead of block usage</span><br><span class="line"><span class="comment"># 只显示本地的文件系统</span></span><br><span class="line">-l, --<span class="built_in">local</span>           <span class="built_in">limit</span> listing to <span class="built_in">local</span> file systems</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-JSON</title>
      <link href="/javaEE/SpringMVC/2022/01/29/SpringMVC-JSON/"/>
      <url>/javaEE/SpringMVC/2022/01/29/SpringMVC-JSON/</url>
      
        <content type="html"><![CDATA[<h3 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON(JavaScript Object Notation)"></a>JSON(JavaScript Object Notation)</h3><p>JSON是一种十分轻量级的数据交换的格式，我们来讲一下处理JSON字符串的两个库</p><ol><li>Jackson</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将对象转为JSON字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String json = mapper.writeValueAsString(user);</span><br></pre></td></tr></table></figure><p>这时候，页面再次出现乱码问题</p><p>第一种原生的解决方案是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>第二种使用springmvc的配置文件，这段配置只针对jackson库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那我们怎么处理时间对象呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">ObjectMapping objectMapping = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">return</span> objectMapping.writeValueAsString(date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的是当时的时间戳</span></span><br></pre></td></tr></table></figure><p>下面是第一种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().writeValueAsString(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>FastJson</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要的三个类</p><ol><li>JSONObject</li></ol><p>对应JSON对象，可以使用get方法获取JSON对象的值</p><ol start="2"><li>JSONArray</li></ol><p>代表JSON数据</p><ol start="3"><li>JSON代表JSONarray和JSONObject的转化</li></ol><p>主要用这个类的静态方法去转化JSON字符串和对象</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-Controller</title>
      <link href="/javaEE/SpringMVC/2022/01/29/SpringMVC-Controller/"/>
      <url>/javaEE/SpringMVC/2022/01/29/SpringMVC-Controller/</url>
      
        <content type="html"><![CDATA[<h3 id="Controller控制器"><a href="#Controller控制器" class="headerlink" title="Controller控制器"></a>Controller控制器</h3><p>和mybatis不同，在springmvc中，注解开发才是主流，所以接下来都会使用注解来开发。</p><p>被@Controller标注的类是一个控制器类，其中的每一个方法都是一个控制器，都各自映射一个url地址</p><p>在spring中我们说过，使用注解的时候需要在spring的配置文件中开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lizhi.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里最好写到controller包，因为该配置文件专注于处理Controller层的事情，不要将包扫描的范围扩大--&gt;</span></span><br></pre></td></tr></table></figure><p>回顾spring中的常用注册bean的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>       普通组件</span><br><span class="line"><span class="meta">@Service</span>         服务层</span><br><span class="line"><span class="meta">@Repository</span>      持久层</span><br><span class="line"><span class="meta">@Mapper</span>          mybatis的接口层</span><br><span class="line"><span class="meta">@Controller</span>      控制器层</span><br></pre></td></tr></table></figure><p>因为我们配置的DispatcherServlet会拦截所有的请求，但是对于静态资源，我们不需要拦截对他做出处理，所以有了以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   Springmvc不处理静态文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p>该注解可以作用于类上面或者方法上面</p><ol><li>方法上面</li></ol><p>该方法映射的url地址即为注解中的值</p><ol start="2"><li>类上面</li></ol><p>当其作用在类上面的时候，该控制器类中所有的方法的映射路径的前面都会加上该注解中的值</p><p>@GetMapping  该注解代表请求是get请求</p><p>@PostMapping  该注解代表请求是post请求</p><p>@PutMapping 该注解代表请求是put请求</p><p>@DeleteMapping该注解代表请求是delete请求</p><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>当类上不是@Controller注解而是@RestController时候，该类中所有的方法返回的值，不会跳转视图，而是返回JSON字符串</p><p>如果不想让类中所有的方法都返回字符串</p><p>则类上面使用@Controller注解，方法上使用@ResponseBody标注此方法返回的结果是一个JSON字符串不要被视图解析器解析</p><h4 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h4><p>概念：RestFul就是一个资源定位及资源操作的风格。</p><p>它不是标准也不是协议，它就只是一个style。基于这种风格设计的软件可以更加简洁，更有层次，并且安全，更易于实现缓存等机制</p><blockquote><p>传统方式操作资源通过不用的参数来实现不同的功能，方法单一，post和get</p></blockquote><ul><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;insertItem  post提交</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;deleteitem get提交</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;queryItem get提交</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;updateitem post提交</li></ul><blockquote><p>使用RestFul风格操作资源</p></blockquote><ul><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;add&#x2F;参数&#x2F;参数&#x2F;…</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;update&#x2F;参数&#x2F;…</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;query&#x2F;参数&#x2F;…</li><li>http:&#x2F;locoalhost:8080&#x2F;item&#x2F;update&#x2F;参数&#x2F;…</li></ul><p>本质其实就是通过不同的提交方式走不同的方法</p><h4 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h4><p>控制器最后直接return字符串的话默认请求转发</p><p>如果想要重定向字符串前面加“**redirect:**”即可</p><h4 id="处理前端数据"><a href="#处理前端数据" class="headerlink" title="处理前端数据"></a>处理前端数据</h4><ol><li><p>如果提交参数的名称和方法的参数名一致的话，</p><p>提交数据：<a href="http://localhost:8080/user/add?name=lizhi&amp;age=20">http://localhost:8080/user/add?name=lizhi&amp;age=20</a></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(String name,<span class="keyword">int</span> age,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>如果提交参数和方法参数不一致的话</p><p>提交数据：<a href="http://localhost:8080/user/add?username=lizhi&amp;userage=20">http://localhost:8080/user/add?username=lizhi&amp;userage=20</a></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name,<span class="meta">@RequestParam(&quot;userage&quot;)</span><span class="keyword">int</span> age,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果提交的是一个对象</p><p>提交数据：<a href="http://localhost:8080/user/add">http://localhost:8080/user/add</a></p><p>要求提交的表单要和属性的属性名一致，方法参数即可直接使用对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(User user,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回前端数据"><a href="#返回前端数据" class="headerlink" title="返回前端数据"></a>返回前端数据</h4><ol><li>ModelAndView</li></ol><p>该对象在初识mvc的时候已经见过，不再赘述</p><ol start="2"><li>Model（这是一个接口）</li></ol><p>该对象在使用注解开发的时候也已经见过，这里也不再赘述</p><ol start="3"><li>ModelMap</li></ol><p>ModelMap实现了Model接口，继承了LinkedHashMap，所以它更强大，但是大部分情况下Model会更常用</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-简述</title>
      <link href="/javaEE/SpringMVC/2022/01/29/SpringMVC-%E7%AE%80%E8%BF%B0/"/>
      <url>/javaEE/SpringMVC/2022/01/29/SpringMVC-%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="Model-1时代"><a href="#Model-1时代" class="headerlink" title="Model 1时代"></a>Model 1时代</h3><p>所有请求直接转发到jsp然后在jsp编写业务代码，然后根据不同的结果跳转不同的页面</p><h3 id="Model-2时代"><a href="#Model-2时代" class="headerlink" title="Model 2时代"></a>Model 2时代</h3><p>Controller</p><ol><li>取得表单数据</li><li>处理业务逻辑</li><li>根据不同的情况跳转不同的页面</li></ol><p>View</p><ol><li>展示数据</li></ol><p>Model</p><ol><li>业务逻辑</li><li>保存数据</li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SpringMVC的特点：</p><ol><li>轻量级，简单易学</li><li>与spring无缝结合，可以将mvc中所有需要的类注册到ioc容器中</li><li>高效，基于请求和响应的mvc框架</li><li>功能强大，RESTFUL风格，格式化，数据验证</li><li>约定大于配置</li></ol><p>说白了学它就一个原因，因为它让我们开发变得简单了</p><p><strong>原理</strong></p><h4 id="回顾servlet"><a href="#回顾servlet" class="headerlink" title="回顾servlet"></a>回顾servlet</h4><p>我们都学过java web，那时候我们对于前端的请求都是通过一个servlet来处理的，然后在servlet里面，处理前端传来的数据，调用业务逻辑，返回处理之后的数据，然后servlet根据这些数据，进行重定向或者请求转发</p><p>一个请求对应一个servlet，这就会导致我们在开发中写了大量的servlet，而且每次都需要在web.xml中注册，十分繁琐。</p><hr><p>没有什么是加一层解决不了的，所以，springmvc在servlet之前加了一层来简化我们的开发</p><p>SpringMVC的web框架是以围绕DispatcherServlet（前端控制器，调度器，请求分发器）设计的。它的作用就是将请求分发到不同的处理器（方法或者类，下面的初识mvc是以类级作为处理器，但是一般都会使用方法级去做处理器）</p><p>下图是DispatcherServlet的结构图，我们可以看到一些在javaweb阶段比较眼熟的类，比如Servlet，GenericServlet，HttpServlet。因此我们可以得出，DispatcherServlet本质就是一个和我们当时写的servlet是一样的，只是他帮我们做了很多事情。</p><p>人到中年有三大件，枸杞大枣保温杯。</p><p>SpringMVC中也有三大件，分别是</p><ul><li>处理器映射器（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li></ul><p>我们来看看这三大件是如何在springmvc中发挥作用的，原理图如下：</p><p><strong>核心类图</strong></p><p><strong>简要分析</strong></p><ol><li>DispatcherServlet就可以简单理解为前端控制器，他会将所有客户端的请求拦截</li><li>将该请求发送给HandlerMapping实现类，该实现类根据url查找到对应的控制器，将结果返回给DispatcherServlet</li><li>DispatcherServlet根据HandlerMapping解析的结果，适配并执行对应的控制器的逻辑，</li><li>控制器返回信息，HandlerAdapter实现类接收该信息并将其解析成ModelAndView对象返回到DispatcherServlet</li><li>DispatcherServlet调用ViewResolver实现类将HandlerAdapter实现类传回来的视图逻辑和模型解析</li><li>视图解析器将解析后的逻辑视图名传回DispatcherServlet</li><li>DispatcherServlet根据解析后的视图名称找到该视图</li><li>渲染视图，返回页面，作出响应</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-拦截器</title>
      <link href="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/javaEE/SpringMVC/2022/01/28/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC中的拦截器"><a href="#SpringMVC中的拦截器" class="headerlink" title="SpringMVC中的拦截器"></a>SpringMVC中的拦截器</h2><p>其实此拦截器就是我们在javaweb阶段使用的过滤器，只不过是换了一个名字而已，换汤不换药，本质是一样的。</p><p>只不过拦截器是AOP思想的具体应用</p><p>过滤器：</p><ul><li>Servlet规范中的一部分，任何javaweb工程都可以使用</li><li>在url-pattern中配置了&#x2F;*后，会拦截所有的请求</li></ul><p>拦截器：</p><ul><li>拦截器是SpringMVC中才会有的，只有使用了此框架的工程才可以使用</li><li>拦截器只会拦截访问的控制器方法，如果访问的是静态资源是不会进行拦截的</li></ul><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>实现HandlerInterceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return true才会执行下一个拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===处理前===&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===处理后===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===清理===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Spring核心文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/**会拦截这个请求下面的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lizhi.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-乱码</title>
      <link href="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E4%B9%B1%E7%A0%81/"/>
      <url>/javaEE/SpringMVC/2022/01/28/SpringMVC-%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="乱码！一生之敌！！！"><a href="#乱码！一生之敌！！！" class="headerlink" title="乱码！一生之敌！！！"></a>乱码！一生之敌！！！</h3><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login.do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user/login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">name:$&#123;user.name&#125;</span><br><span class="line">age:$&#123;user.age&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p>我们先尝试一下配置一个过滤器，这是第一种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharsetFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得去web.xml中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lizhi.filter.CharsetFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们尝试后发现，没有任何效果，那既然我们写的过滤器不行</p><p>那springmvc给我们写了一个<strong><em>专门</em>处理乱码</strong>的过滤器，我们来配置一下，这是第二种方案，很稳妥</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试后发现，还是乱码！！这时候我们可以去看一下tomcat的config目录下的server.xml，找到connector标签并修改属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>发现还是不行，我们去找一个其他大佬自己写的过滤器试一试，这是第三种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//处理response的字符编码</span></span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletRequest myreq = <span class="keyword">new</span> MyRequest(req);</span><br><span class="line">        filterChain.doFilter(myreq, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;post&quot;</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;get&quot;</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="keyword">if</span>(!hasEncode)&#123;</span><br><span class="line">                <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                    String[] values = parameterMap.get(parameterName);</span><br><span class="line">                    <span class="keyword">if</span>(values!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">try</span>&#123;</span><br><span class="line">                                values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hasEncode = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parameterMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        String[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span>(values==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        Map&lt;String,String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        <span class="keyword">return</span> parameterMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果测试发现，还是不对！其实乱码的问题到这里一般都会解决了，但是为什么还是不行呢？</p><p>其实是在注册filter的时候就出错了，接下来看下面的正确配置，大家可以看一下有什么区别，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>otherEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lizhi.filter.EncodeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>otherEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有的小伙伴可能在一开始就看出来了，没错，就是<code>&lt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&gt;</code>这里的拦截路径我们应该使用<code>/*</code>而不是<code>/</code></p><p>两者有什么区别呢？</p><p>前者是拦截一切请求，包括jsp</p><p>而后者会拦截除了jsp的所有资源</p><p>相信吃了这次亏，大家之后就再也不会忘记这个坑了！而且也了解了大部分乱码问题的解决方案！</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-第一个SpringMVC工程</title>
      <link href="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/"/>
      <url>/javaEE/SpringMVC/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="初识SpringMVC"><a href="#初识SpringMVC" class="headerlink" title="初识SpringMVC"></a>初识SpringMVC</h3><p><strong>第一步：创建普通maven工程</strong></p><p><strong>第二步：导入所需依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：添加web支持</strong></p><img src="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/%E6%B7%BB%E5%8A%A0web%E6%94%AF%E6%8C%81.png" class title="添加web支持"><img src="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/web%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81.png" class title="web框架支持"><p><strong>第四步：在web.xml中配置DispatcherServlet</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第五步：在资源路径下创建springmvc-servlet.xml配置文件，配置处理器映射器，处理器适配器，视图解析器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lizhi.controller.HelloServlet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第六步：创建HelloController实现Controller接口，并注册，id为路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第七步：</strong>在WEB-INF文件夹下创建jsp文件夹，在jsp文件夹中创建hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>第八步：启动tomcat测试</strong></p><h3 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h3><p><strong>前四步如上</strong></p><p><strong>第五步：在springmvc-servlet中开启注解支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lizhi.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   Springmvc不处理静态文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">支持springmvc注解驱动</span></span><br><span class="line"><span class="comment">在spring中一般采用@RequestMapping来完成映射关系</span></span><br><span class="line"><span class="comment">要想让注解生效，则必须要向上下文注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">和一个AnnotationMethodHandlerMapping实例</span></span><br><span class="line"><span class="comment">这两个处理器分别是类级别和方法级别的</span></span><br><span class="line"><span class="comment">而annotation-driven则帮助我们自动完成了这两个类的配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第六步：创建Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//model对象是页面模型，可以在此对象中放入业务返回的前端需要的数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第七步：在WEB-INF文件夹下创建jsp文件夹，在jsp文件夹中创建login.jsp</strong></p><p><strong>第八步：启动tomcat测试</strong></p><hr><blockquote><p>如果出现404或者500错误可，尝试以下两种解决方案</p></blockquote><ol><li>在pom.xml中加入此段配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出出现的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在artifact中加入lib目录，并将所需jar包导入其中</li></ol><img src="/javaEE/SpringMVC/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/%E6%B7%BB%E5%8A%A0lib%E7%9B%AE%E5%BD%95.png" class title="添加lib目录"><hr>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis映射器文件</title>
      <link href="/javaEE/MyBatis/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/"/>
      <url>/javaEE/MyBatis/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="映射器文件"><a href="#映射器文件" class="headerlink" title="映射器文件"></a>映射器文件</h2><p>mybatis的真正强大之处就在于它的语句映射。</p><p>正是因为此映射器文件，才使我们减少了将近95%的JDBC代码，使我们更专注于书写SQL语句</p><p>映射器文件只有这些顶级元素</p><ul><li>cache</li><li>cache-ref</li><li>delete</li><li>insert</li><li>resultMap</li><li>select</li><li>sql</li><li>update</li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>该标签对标SQL语句的DQL语句，也就是select语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个select语句映射namespace绑定的接口中的listTeachers方法</p><p>resultType定义返回值类型</p><p>#{id}是取到方法传入的参数</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>resultType</code></td><td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>resultMap</code></td><td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>useCache</code></td><td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr></tbody></table><h3 id="insert，update和delete"><a href="#insert，update和delete" class="headerlink" title="insert，update和delete"></a>insert，update和delete</h3><p>这三个标签对标SQL语句的DML语句</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>parameterMap</code></td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>该标签用来定义sql片段，一般用来定义一些可复用的SQL语句片段，使用include标签以在其他语句中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>如果传入一个复杂的对象，行为就会有点不一样了。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  insert into users (id, username, password)</span><br><span class="line">  values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JDBC 要求，如果一个列允许使用 null 值，并且可能会使用值为 null 的参数，就必须要指定 JDBC 类型（jdbcType)</strong></p><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>默认情况下，使用#{}获取参数的值的时候，mybatis会创建一个PreparedStatement对象，通过预编译，生成与#{}出现次数相同的占位符（即 ? ）这样更安全并且更迅速。</p><p>但是有时候想直接在SQL语句中插入一个字符串，不需要转义此字符串（即不需要占位符），比如ORDER BY语句，这时候可以使用${}语句，这样的话，mybatis就不会转义该字符串了</p><p>当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。</p><blockquote><p>举个栗子，如果你想 <code>select</code> 一个表任意一列的数据时，不需要这样写：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByEmail</span><span class="params">(<span class="meta">@Param(&quot;email&quot;)</span> String email)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它的 &quot;findByXxx&quot; 方法</span></span><br></pre></td></tr></table></figure><p>而是可以只写这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, <span class="meta">@Param(&quot;value&quot;)</span> String value)</span></span>;</span><br></pre></td></tr></table></figure><p>其中 <code>$&#123;column&#125;</code> 会被直接替换，而 <code>#&#123;value&#125;</code> 会使用 <code>?</code> 预处理。 这样，就能完成同样的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User userOfId1 = userMapper.findByColumn(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">User userOfNameKid = userMapper.findByColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kid&quot;</span>);</span><br><span class="line">User userOfEmail = userMapper.findByColumn(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;noone@nowhere.com&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h4><p>可以自定义一些复杂的返回值对象</p><h5 id="简单结果集映射"><a href="#简单结果集映射" class="headerlink" title="简单结果集映射"></a>简单结果集映射</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Alias(&quot;aliasStudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select student_id,student_name,student_tid from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="高级结果集映射"><a href="#高级结果集映射" class="headerlink" title="高级结果集映射"></a>高级结果集映射</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap的子标签</p><ul><li><p><code>constructor</code></p><p>用于在实例化类时，注入结果到构造方法中</p><ul><li><code>idArg</code> - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能</li><li><code>arg</code> - 将被注入到构造方法的一个普通结果</li></ul></li><li><p><code>id</code> – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能</p></li><li><p><code>result</code> – 注入到字段或 JavaBean 属性的普通结果</p></li><li><p><code>association</code></p><p>一个复杂类型的关联,许多结果将包装成这种类型</p><ul><li>嵌套结果映射 – 关联可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li><li><p><code>collection</code></p><p>一个复杂类型的集合</p><ul><li>嵌套结果映射 – 集合可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li></ul><h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><p>有些情况下，你会使用一个不可变类，即那些很少改变或者基本不变的类，即可以使用构造方法注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="id-amp-result"><a href="#id-amp-result" class="headerlink" title="id &amp; result"></a>id &amp; result</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;post_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">column</span>=<span class="string">&quot;post_subject&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这些元素是结果映射的基础。</p><p><em>id</em> 和 <em>result</em> 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。</p><p>这两者之间的唯一不同是，<em>id</em> 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。</p><p> 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。</p><p>两个元素都有一些属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>property</code></td><td align="left">映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。</td></tr><tr><td align="left"><code>column</code></td><td align="left">数据库中的列名，或者是列的别名。</td></tr><tr><td align="left"><code>javaType</code></td><td align="left">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td></tr><tr><td align="left"><code>jdbcType</code></td><td align="left">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。</td></tr></tbody></table><blockquote><p>jdbcType支持的 JDBC 类型</p></blockquote><p>为了以后可能的使用场景，MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。</p><table><thead><tr><th><code>BIT</code></th><th><code>FLOAT</code></th><th><code>CHAR</code></th><th><code>TIMESTAMP</code></th><th><code>OTHER</code></th><th><code>UNDEFINED</code></th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td><code>REAL</code></td><td><code>VARCHAR</code></td><td><code>BINARY</code></td><td><code>BLOB</code></td><td><code>NVARCHAR</code></td></tr><tr><td><code>SMALLINT</code></td><td><code>DOUBLE</code></td><td><code>LONGVARCHAR</code></td><td><code>VARBINARY</code></td><td><code>CLOB</code></td><td><code>NCHAR</code></td></tr><tr><td><code>INTEGER</code></td><td><code>NUMERIC</code></td><td><code>DATE</code></td><td><code>LONGVARBINARY</code></td><td><code>BOOLEAN</code></td><td><code>NCLOB</code></td></tr><tr><td><code>BIGINT</code></td><td><code>DECIMAL</code></td><td><code>TIME</code></td><td><code>NULL</code></td><td><code>CURSOR</code></td><td><code>ARRAY</code></td></tr></tbody></table><h5 id="association"><a href="#association" class="headerlink" title="association"></a>association</h5><p>该标签处理一个对象聚合另一个对象的关系。</p><p>mybatis有两种不同方式去加载关联</p><ol><li>嵌套select查询：通过另一个SQL语句去加载复杂对象</li><li>嵌套结果查询：通过连接查询直接将所有的结果查询出来，放在一张表里面</li></ol><h6 id="嵌套select查询（不推荐）"><a href="#嵌套select查询（不推荐）" class="headerlink" title="嵌套select查询（不推荐）"></a>嵌套select查询（不推荐）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacherById&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMap&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：SQL语句写起来方便</p><p>缺点：多层SQL嵌套，不易于维护，使用了mybatis的相关插件会导致select语句爆红，看起来不舒服</p><p>对于大型数据上，这里有一个“N+1查询问题”，问题描述如下</p><ul><li>执行了一个单独的SQL语句去加载每一条记录的详细信息（就是+1）</li><li>对返回的列表的每一条记录，都需要执行这样的一个单独的SQL语句去加载详细信息（就是N）</li></ul><p>这样会导致运行成千上万条sql语句，大大增加系统开销，这是我们不希望看到的</p><h6 id="嵌套结果查询（推荐）"><a href="#嵌套结果查询（推荐）" class="headerlink" title="嵌套结果查询（推荐）"></a>嵌套结果查询（推荐）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    s.id sid, s.name sname, tid, t.name tname</span><br><span class="line">    from student s inner join teacher t</span><br><span class="line">    on s.id = #&#123;id&#125; and tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：配置resultMap十分方便，逻辑十分清楚，方便查错和维护</p><p>缺点：连接查询的SQL语句写起来难度大，</p><h5 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h5><p>collection可以说是多个类型的关联，所以与association的处理十分相似</p><h6 id="嵌套select查询"><a href="#嵌套select查询" class="headerlink" title="嵌套select查询"></a>嵌套select查询</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>  <span class="attr">select</span>=<span class="string">&quot;getStudentsByTid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsByTid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM teacher WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：<em>这里需要使用ofType来指定集合的泛型</em></p><h6 id="嵌套结果查询"><a href="#嵌套结果查询" class="headerlink" title="嵌套结果查询"></a>嵌套结果查询</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    t.name tname,t.id tid,s.id sid, s.name sname</span><br><span class="line">    FROM teacher t inner join student s on t.id=#&#123;id&#125; and s.tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>首先我们先来看一下到底什么是缓存？</p><p>缓存这个词，相信大家对其不会陌生，因为我们在b站，腾讯视频这一类视频APP中都会缓存过一些视频。</p><p>那我们可以从中归纳出，缓存就是程序以某种形式将数据保存下来，方便下一次的使用。</p><p>那我们为什么需要使用缓存呢？</p><p>我们都知道，我们程序员要追求三高，当然不会是高血脂，高血糖，高血压。我们所说的三高是高并发，高可用，高性能。众所周知，对于数据库的操作是比较消耗资源的。因此，多次连接数据库不利于我们达到三高，那么缓存就是会帮助我们达到三高的一种技术。</p><p>我们将用户经常查询，并且很少发生改变的数据放入缓存中，当用户下一次查询同样的数据时，就不用再去连接数据库查询数据了，减少了访问数据库的次数，减少了系统开销，从而提高了性能。</p><hr><p>在mybatis中，存在着两种缓存机制：一级缓存和二级缓存</p><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>该级别的缓存，mybatis是默认开启的，并且无法关闭。</p><p>该缓存是sqlSession级别的，也就是说作用域和我们之前谈过的sqlSession的作用域一致</p><p>因为用户大部分操作都是查询，但是如果出现了DML语句（即增删改）的时候，可能会对缓存中的数据造成了修改，为了安全起见，当发生增删改操作的时候，一级缓存即刻失效。</p><p>当然我们也可以手动清理缓存</p><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>该级别的缓存，是默认关闭的，需手动打开</p><ol><li>在mapper映射器文件中，添加以下一行代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">//或者加一些配置</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在mybatis-config.xml文件中</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//可能有的小伙伴会说，该设置默认就是true，不需要写这一行代码</span><br><span class="line">//但是，为了显式说明我们开启了二级缓存，最好还是标注出来</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：如果在cache标签中没有加入readOnly&#x3D;“true”，则需要将模型类实现序列化接口（Serializable）</p></blockquote><p>该缓存是namespace级别的，也就是和应用程序的生命周期一致</p><hr><p>附上一张关于mybatis的原理图，仅供参考</p><img src="/javaEE/MyBatis/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/mybatis%E5%8E%9F%E7%90%86%E5%9B%BE.png" class title="mybatis原理图">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-aop</title>
      <link href="/javaEE/Spring/2022/01/27/Spring-aop/"/>
      <url>/javaEE/Spring/2022/01/27/Spring-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP为Aspect Oriented Programming的缩写，意思是面向切面编程，是通过预编译和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>Spring框架两大重点，AOP和IOC(Inversion Of Control)控制反转</p><p>AOP是OOP的延续,是软件开发中的一个热点, 也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行解耦合,从而使得业务逻辑各部分之间的耦合度降低,提高程序的可重用性，同时提高了开发的效率。</p><blockquote><p>作用及优势</p></blockquote><ul><li>作用：在程序运行期间，在不修改源码的情况下进行功能增强</li><li>优势：减少代码重复性，提高开发效率，并且便于维护</li></ul><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>实际上，AOP的底层是通过Spring提供的的动态代理技术实现的。</p><p>在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><blockquote><p>常用代理技术</p></blockquote><ul><li>JDK代理：基于接口的动态代理技术</li></ul><img src="/javaEE/Spring/2022/01/27/Spring-aop/JDK%E4%BB%A3%E7%90%86.png" class title="JDK代理"><p>Adivce.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TargetInterface.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;saving running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Target = <span class="keyword">new</span> Target();</span><br><span class="line">        <span class="keyword">final</span> Adivice = <span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">        target.getClass().getClassLoader(),</span><br><span class="line">           target.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandle()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    advice.before();</span><br><span class="line">                    Object invoke = method.invoke(target,args);</span><br><span class="line">                    advice.after();</span><br><span class="line">                    <span class="keyword">return</span> invoke;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cglib代理：基于父类的动态代理技术</li></ul><img src="/javaEE/Spring/2022/01/27/Spring-aop/cglib%E4%BB%A3%E7%90%86.png" class title="cglib代理"><p>ProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Target();</span><br><span class="line">        Enhance enhance = <span class="keyword">new</span> Enhance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强其</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类</span></span><br><span class="line">        enhancer.setSuperclass(Target.class);</span><br><span class="line">        <span class="comment">//设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                enhance.before();</span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                enhance.after();</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        Target proxy = (Target) enhancer.create();</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h3><p>Spring的AOP实现底层就是对上面的动态代理的代码进行了封装,封装后我们只需要对需要关注的部分进行代码编写,并通过配置的方式完成指定目标的方法增强。</p><ul><li><p>Target (目标对象) :代理的目标对象</p></li><li><p>Proxy (代理) :一个类被AOP织入增强后,就产生一 个结果代理类</p></li><li><p>Joinpoint (连接点) :所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</p></li><li><p>Pointcut (切入点) :所谓切入点是指我们要对哪些Joinpoint进行拦截的定义</p></li><li><p>Advice (通知&#x2F;增強) :所谓通知是指拦截到Joinpoint之后所要做的事情就是通知</p></li><li><p>Aspect (切面) :是切入点和通知(引介)的结合</p></li><li><p>Weaving (织入) :是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入,而Aspect采用编译期织入和类装载期织入</p></li></ul><h3 id="开发明确事项"><a href="#开发明确事项" class="headerlink" title="开发明确事项"></a>开发明确事项</h3><blockquote><p>需要编写的内容</p></blockquote><ul><li><p>编写核心业务代码(目标类的目标方法)</p></li><li><p>编写切面类,切面类中有通知(增强功能方法)</p></li><li><p>在配置文件中，配置织入关系,即将哪些通知与哪些连接点进行结合</p></li></ul><blockquote><p>AOP技术实现的内容</p></blockquote><p>Spring框架监控切入点方法的执行。</p><p>一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置,将通知对应的功能织入，完成完整的代码逻辑运行。</p><h3 id="基于XML的AOP开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h3><blockquote><p>步骤</p></blockquote><ol><li>导入AOP坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建目标类和目标接口</p></li><li><p>创建切面类（内部有增强方法）</p></li><li><p>将目标类和切面类的对象的创建权交给Spring</p></li><li><p>在applicationContext.xml中配置中织入关系</p></li><li><p>测试</p></li></ol><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">execution</span><span class="params">([修饰符]返回值类型 包名.类名.方法名(参数列表)</span></span>)</span><br></pre></td></tr></table></figure><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、 包名、类名、方法名可以使用星号*代表任意</p></li><li><p>包名与类名之间一 个点.代表当前包下的类,两个点.. 表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点 .. 表示任意个数,任意类型的参数列表</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代表切口是com.lizhi.aop.Target类的返回void的method的无参数方法</span></span><br><span class="line">execution (public void com<span class="selector-class">.itheima</span><span class="selector-class">.aop</span><span class="selector-class">.Target</span><span class="selector-class">.method</span>() )</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表切口是com.lizhi.aop.Target类的返回void的所有方法，参数个数为任意</span></span><br><span class="line">execution (void com<span class="selector-class">.itheima</span><span class="selector-class">.aop</span><span class="selector-class">.Target</span>.*(.. ))</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表切口是com.lizhi.aop包下的所有类的所有方法，参数个数为任意</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(* com.lizhi.aop.*.*(..)</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表切口是com.lizhi.aop包及其子包下的所有类所有方法，参数个数为任意</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(* com.lizhi.aop..*.* (..)</span></span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表切口是项目下的所有包的所有方法，参数为任意参数</span></span><br><span class="line"><span class="function"><span class="title">execution</span><span class="params">(* *..*.*(..)</span></span> )</span><br></pre></td></tr></table></figure><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><table><thead><tr><th>名称</th><th>通知类型</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>aop:before</td><td>指定增强的方法在切入点之前执行</td></tr><tr><td>后置通知</td><td>aop:after-returning</td><td>指定增强的方法在切入点之后执行</td></tr><tr><td>环绕通知</td><td>aop:around</td><td>指定增强的方法在切入点之前和之后都会执行</td></tr><tr><td>异常抛出通知</td><td>aop:throwing</td><td>指定增强的方法在出现切点异常时执行</td></tr><tr><td>最终通知</td><td>aop:after</td><td>无论增强方式执行是否有异常都会执行</td></tr></tbody></table><blockquote><p>around</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ProceedingJoinPoint指的是正在执行的连接点==切点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕前增强。。。。。&quot;</span>);</span><br><span class="line">    Object obj = pjp.proceed();<span class="comment">//切点方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕后增强。。。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切点表达式的抽取</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">apo:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">apo:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;excution( * com.lizhi.apo.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">apo:pointcut</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">apo:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">apo:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">apo:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h3><ol><li>创建目标接口和目标类(内部有切点)</li><li>创建切面类(内部有增强方法)</li><li>将目标类和切面类的对象创建权交给spring</li><li>在切面类中使用注解配置织入关系</li><li>在配置文件中开启组件扫描和AOP的自动代理</li><li>测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程</title>
      <link href="/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/01/27/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
      <url>/%E7%90%90%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/2022/01/27/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="面向接口编程是什么"><a href="#面向接口编程是什么" class="headerlink" title="面向接口编程是什么"></a>面向接口编程是什么</h2><p>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</p><p>根本原因:解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</p><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的对系统设计人员来讲就不那么重要了:</p><p>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><h2 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h2><p>接口从更深层次的理解，应是定义(规范，约束)与实现(名实分离的原则)的分离。</p><p>接口的本身反映了系统设计人员对系统的抽象理解。接口应有两类:</p><p>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class) </p><p>第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface)</p><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><h2 id="三个面向的区别"><a href="#三个面向的区别" class="headerlink" title="三个面向的区别"></a>三个面向的区别</h2><p>面向对象编程指的是，我们考虑问题的时候，以对象为单位，考虑它的属性和方法</p><p>面向过程编程指的是，我们考虑问题的时候，以一个具体的流程（事务过程）为单位，考虑它的实现</p><p>接口设计与非接口设计是针对复用技术层面的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis的xml配置</title>
      <link href="/javaEE/MyBatis/2022/01/26/MyBatis%E9%85%8D%E7%BD%AE/"/>
      <url>/javaEE/MyBatis/2022/01/26/MyBatis%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="配置Configuration"><a href="#配置Configuration" class="headerlink" title="配置Configuration"></a>配置Configuration</h2><p>在MyBatis中，配置文件的顶层结构如下</p><ul><li>Configuration<ul><li><strong>properties</strong></li><li><strong>settings</strong></li><li><strong>typeAliases</strong></li><li>typeHandlers</li><li>objectFactory</li><li>plugins</li><li><strong>environments</strong><ul><li>environment<ul><li>dataSource</li><li>transactionManager</li></ul></li></ul></li><li>databaseIdProvider</li><li><strong>mappers</strong></li></ul></li></ul><h3 id="属性properties"><a href="#属性properties" class="headerlink" title="属性properties"></a>属性properties</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resource属性可以导入在外部properties配置文件中的属性到properties标签中</p><p>property标签可以定义一些属性</p><p>配置好的属性可以在该文件中使用${}来替换需要动态配置的属性值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如上方的driver的值会由db.properties文件中对应的值来替换</p><p>如果在多个地方进行了配置Java代码，外部文件，properties标签，则按照以下顺序加载</p><ul><li>先加载properties标签中的属性</li><li>再加载外部文件中配置的属性，如果有重复的属性，则覆盖旧的属性</li><li>最后加载Java代码中的属性，如果有重复的属性，覆盖旧的属性</li></ul><p>因此，通过java方法传入的属性具有最高的优先级，外部文件优先级次之，properties标签中的属性优先级最为低</p><h3 id="设置settings"><a href="#设置settings" class="headerlink" title="设置settings"></a>设置settings</h3><p>以下为重要的几个配置，需要掌握</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J(deprecated since 3.5.9) | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><h3 id="类型别名typeAliases"><a href="#类型别名typeAliases" class="headerlink" title="类型别名typeAliases"></a>类型别名typeAliases</h3><p>在映射器XML文件中，resultType属性在配置了类型别名后，可以不需要写全限定名，可以写在这里起的别名</p><ol><li>在此包下的所有类都被默认起别名为类名开头小写，该默认值被注解@Alias()覆盖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.lizhi.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可以单独为一个类起别名，</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;teacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面为一些常见的java类型内建的类型别名</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>map</td><td>Map</td></tr></tbody></table><h3 id="环境配置Environments"><a href="#环境配置Environments" class="headerlink" title="环境配置Environments"></a>环境配置Environments</h3><p>mybatis可以配置多套环境，这种机制有利于将SQL映射应用于多种数据库之中。开发，测试，生成环境需要有不同的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意一些关键点</p><ul><li>environment的id属性，该属性是唯一性标识环境的值</li><li>在environments的default属性中通过id指定环境配置</li></ul><h4 id="事务管理器transactionManager"><a href="#事务管理器transactionManager" class="headerlink" title="事务管理器transactionManager"></a>事务管理器transactionManager</h4><p>type指定事务管理器</p><p>mybatis中有两种事务管理器（也就是type &#x3D; “JDBC|MANAGED”）</p><ul><li>JDBC-这个配置直接使用了JDBC的提交和回滚机制，依赖于数据源的连接来管理事务管理作用域</li><li>MANAGED-这个配置几乎什么都不做，一般不选用</li></ul><blockquote><p>如果使用mybatis+Spring 则没有必要配置事务管理器，因为Spring模块会使用自带的事务管理器来覆盖此配置</p></blockquote><h4 id="数据源dataSource"><a href="#数据源dataSource" class="headerlink" title="数据源dataSource"></a>数据源dataSource</h4><p>type指定数据源类型</p><p>dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源</p><p>有三种内置的数据源格式</p><h5 id="UNPOOLED"><a href="#UNPOOLED" class="headerlink" title="UNPOOLED"></a>UNPOOLED</h5><p>这个数据源的实现每次连接会打开和关闭连接会有点慢，但是对于一些小型应用已经足够了，</p><p>此类型的数据源只需要配置以下几种属性</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li><code>url</code> – 这是数据库的 JDBC URL 地址。</li><li><code>username</code> – 登录数据库的用户名。</li><li><code>password</code> – 登录数据库的密码。</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）</li></ul><hr><h5 id="POOLED"><a href="#POOLED" class="headerlink" title="POOLED"></a>POOLED</h5><p>这个数据源的实现利用了池的概念将JDBC的连接对象组织起来，避免了创建新的连接实例的时候所必需的初始化和认证时间，可以使web应用响应速度变快，该类型的数据源除了以上UNPOOLED的属性外还有以下常用配置</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li></ul><h5 id="JNDI-用得少，略"><a href="#JNDI-用得少，略" class="headerlink" title="JNDI(用得少，略)"></a>JNDI(用得少，略)</h5>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门</title>
      <link href="/javaEE/MyBatis/2022/01/26/MyBatis%E5%85%A5%E9%97%A8/"/>
      <url>/javaEE/MyBatis/2022/01/26/MyBatis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="回顾JDBC"><a href="#回顾JDBC" class="headerlink" title="回顾JDBC"></a>回顾JDBC</h2><ol><li>注册驱动</li><li>获取连接</li><li>获取数据库操作对象</li><li>执行SQL，操作数据库</li><li>处理结果集</li><li>关闭连接</li></ol><p>Connection可以获得PreparedStatement或者Statement</p><p>ResultSet是SQL语句执行后返回的对象</p><p>PreparedStatement和Statement是用来执行SQL语句的对象</p><p>两者的区别：</p><p>PreparedStatement对SQL语句做了预编译，很好的解决了SQL注入的问题。</p><p>Statement是单纯的对字符串进行拼接，会产生SQL注入的问题</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Def： MyBatis是一个优秀的持久层的框架，支持定制化SQL语句，存储过程以及高级映射，大大简化了JDBC的笨重的代码。</p><p>MyBatis可以使用XML配置文件或者注解的方式来配置和映射原生类型、接口和pojo（Plain Object Java Object）</p><p>持久层是什么？持久层是一个将应用中产生的数据保存到数据库的过程</p><p>思路：导入依赖—》编写代码—》测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>MyBatis中最重要的三个类</p><ol><li>SqlSessionFactoryBuilder</li><li>SqlSessionFactory</li><li>SqlSession</li></ol><p>每个基于MyBatis的应用都是以一个SqlSessionFactory实例为核心的。这个实例需要通过SqlSessionFactoryBuilder加载配置文件获得。这个配置文件可以通过两种方式获得，第一种是以XML文件的形式存在，第二种是在java代码对象的形式存在</p><h3 id="构建SqlSessionFactory"><a href="#构建SqlSessionFactory" class="headerlink" title="构建SqlSessionFactory"></a>构建SqlSessionFactory</h3><blockquote><p>mybatis-config.xml配置构建SqlSessionFactory所需要的参数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在java中加载配置文件，通过SqlSessionFactoryBuilder构建SqlSessionFactory实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><blockquote><p>通过java代码配置不推荐，略</p></blockquote><h3 id="构建SqlSession"><a href="#构建SqlSession" class="headerlink" title="构建SqlSession"></a>构建SqlSession</h3><p>SqlSession，通过此对象获得接口的映射器实例，该映射对象对标JDBC中接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启一个sqlSession对象，默认关闭自动提交事务</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//开启自动提交事务</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br></pre></td></tr></table></figure><h3 id="映射SQL语句"><a href="#映射SQL语句" class="headerlink" title="映射SQL语句"></a>映射SQL语句</h3><blockquote><p>通过XML配置文件的方式和接口做绑定，实现接口方法</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lizhi.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listTeachers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper标签的namespace属性指向被绑定的接口</li><li>标签内书写SQL语句，id为接口中的方法名<ul><li>select标签实现select方法</li><li>insert标签实现insert方法</li><li>update标签实现update方法</li><li>delete标签实现delete方法</li></ul></li></ul><blockquote><p>通过注解的方式实现SQL映射</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM teacher WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">Teacher <span class="title">getTeacherById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>选择何种方式实现SQL映射，取决于自身。</p><p>但是如果SQL复杂的情况下，尽量不要使用注解开发，使用XML的方式去做SQL映射</p><h3 id="三个对象的作用域（Scope）"><a href="#三个对象的作用域（Scope）" class="headerlink" title="三个对象的作用域（Scope）"></a>三个对象的作用域（Scope）</h3><ul><li>SqlSessionFactoryBuilder</li></ul><p>该对象就一个作用，通过读取一些配置获取SqlSessionFactory实例对象。</p><p>我们没有理由一直保留它，因为SqlSessionFactory将被保存在全局作用域中，以保证所有的XML解析资源可以被释放给做其他事情，所以它的作用域应该是局部变量</p><ul><li>SqlSession</li></ul><p>该对象就一个作用，通过getMapper方法获取映射器实例。</p><p>每个线程都应该有它自己的SqlSession对象，因为该对象不是线程安全的，因此它是不能被共享的，所以它的最佳作用域是局部变量。</p><p>在web框架中，可以将其放到request的作用域中，返回一个响应前，关闭SqlSession对象，这个关闭操作很重要</p><ul><li>SqlSessionFactory</li></ul><p>该对象就一个作用，通过openSession方法获取SqlSession对象。</p><p>因为SqlSession对象是线程不安全的，所以每次查询数据库都需要一个新的SqlSession对象，既然SqlSessionFactoryBuilder的作用域为局部变量，那么在我们第一次创建出来SqlSessionFactory对象的时候，就可以将其保存在全局作用域中，下次就不需要再创建SqlSessionFactoryBuilder对象了，所以SqlSessionFactory的最佳作用域是全局唯一变量。</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/javaEE/Maven/2022/01/26/Maven/"/>
      <url>/javaEE/Maven/2022/01/26/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>学maven首先记住一句话，<strong>约定大于配置</strong></p><h4 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h4><ul><li><strong>本质</strong>是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（pom）</li><li>POM(Project Object Model)：项目对象模型</li><li>pom.xml—&gt;项目管理模型——&gt;依赖管理（Dependency）—&gt;本地仓库—&gt;私服仓库—&gt;中央</li></ul><img src="/javaEE/Maven/2022/01/26/Maven/maven%E6%A6%82%E8%BF%B0%E5%9B%BE.png" class title="maven概述图"><h4 id="Maven有什么用"><a href="#Maven有什么用" class="headerlink" title="Maven有什么用"></a>Maven有什么用</h4><ul><li><strong>项目构建</strong>：提供标准化，跨平台的自动化项目构建方式</li><li><strong>依赖管理</strong>：方便快捷的管理项目依赖的资源包，避免资源间的版本冲突问题</li><li><strong>统一开发结构</strong>：提供标准的，统一的项目结构</li></ul><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><ul><li><strong>官网</strong>：<a href="http://maven.apache.org/">http://maven.apache.org/</a></li><li><strong>下载地址</strong>：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></li></ul><h4 id="Maven环境配置"><a href="#Maven环境配置" class="headerlink" title="Maven环境配置"></a>Maven环境配置</h4><ul><li>依赖java，所以需要JAVA_HOME</li><li>设置Maven自身的运行环境，需要配置MAVEN_HOME</li></ul><h3 id="Maven基础概要"><a href="#Maven基础概要" class="headerlink" title="Maven基础概要"></a>Maven基础概要</h3><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><p><strong>仓库</strong>：用于存储资源，包含各种jar包</p><img src="/javaEE/Maven/2022/01/26/Maven/%E4%BB%93%E5%BA%93.png" class title="仓库"><ul><li>仓库分类<ul><li><strong>本地仓库</strong>：自己电脑上的存储资源的仓库，连接远程仓库获取资源</li><li><strong>远程仓库</strong>：非本机上的仓库，为本地仓库提供资源<ul><li><strong>中央仓库</strong>：由Maven团队维护，存储所有开源资源的仓库</li><li><strong>私服</strong>：部门&#x2F;公司范围内存储资源的仓库，从中央仓库中获取资源</li></ul></li></ul></li><li>私服的作用<ul><li>保护具有版权的资源，包含购买或者自主研发的jar<ul><li>中央仓库中的jar都是开源的，不能存储具有版权的资源</li></ul></li><li>一定范围内共享资源，就对内开放，不对外开放</li></ul></li></ul><h4 id="坐标GAV"><a href="#坐标GAV" class="headerlink" title="坐标GAV"></a>坐标GAV</h4><ul><li><p><strong>坐标</strong>：Maven中的坐标主要用于描述仓库中资源的位置，记住这个网站</p><ul><li><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul></li><li><p>Maven主要组成部分</p><ul><li><strong>groupId</strong>：定义当前项目隶属的组织名称（通常是域名反写 org.mybatis）</li><li><strong>artifactId</strong>：定义该项目的项目名称（通常是模块名称）</li><li><strong>version</strong>：定义当前项目的版本号</li><li><strong>packaging</strong>：定义该项目的打包方式</li></ul></li><li><p><strong>作用</strong>：使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p></li></ul><h4 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h4><p>maven默认的本地仓库目录在c盘用户文件夹下的.m2文件夹中，如有需要，可在配置文件中自行配置。</p><p>在这里举个例子，我需要将D:\APP\Maven\mvn-repo该目录作为我的maven本地仓库的路径。</p><ol><li>创建mvn-repo文件夹，在此文件夹中创建repository目录</li><li>在maven安装根目录下的config文件夹下找到settings.xml找到以下配置所在，照着以下配置修改</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//这里改成自己需要配置的仓库目录</span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\APP\Maven\mvn-repo\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//阿里云的镜像服务器，会加快jar包的下载速度，直接复制即可</span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将此份配置文件保存并复制到mvn-repo文件夹中</li></ol><blockquote><p>全局setting（maven的config中的setting文件）和用户setting（尽量和全局setting一样）区别</p><ul><li>全局setting定义了当前计算机中Maven的公共配置</li><li>用户setting定义了当前用户的配置</li></ul></blockquote><h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><h4 id="手工"><a href="#手工" class="headerlink" title="手工"></a>手工</h4><p>普通maven工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br><span class="line">-DgroupId = com.lizhi</span><br><span class="line">-DartifactId = project</span><br><span class="line">-DarchetypeArtifactId = maven-archetype-quickstart</span><br><span class="line">-Dversion = 0.0.1-snapshot</span><br><span class="line">-DinteractiveMode = false</span><br></pre></td></tr></table></figure><p>web工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br><span class="line">-DgroupId = com.lizhi</span><br><span class="line">-DartifactId = project</span><br><span class="line">-DarchetypeArtifactId = maven-archetype-webapp</span><br><span class="line">-Dversion = 0.0.1-snapshot </span><br><span class="line">-DinteractiveMode = false</span><br></pre></td></tr></table></figure><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置当前项目所需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置具体的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖所属的群组id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖所属的项目id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖的版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>依赖具有传递性</p><ul><li><strong>直接传递</strong>：在当前项目中，通过依赖配置建立的依赖关系</li><li><strong>间接关系</strong>：被依赖的资源如果依赖其他的资源，当前项目间接依赖其他项目</li></ul><blockquote><p>依赖冲突</p><ul><li>路径优先：当依赖中出现相同的资源时，层次越深，优先级越低，层次越浅，优先级越高</li><li>声明优先：当资源在相同层次被依赖时，配置顺序靠前的覆盖顺序靠后的</li><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul></blockquote><h4 id="可选依赖（主动表示断开）"><a href="#可选依赖（主动表示断开）" class="headerlink" title="可选依赖（主动表示断开）"></a>可选依赖（主动表示断开）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不透明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="排除依赖（主动断开）"><a href="#排除依赖（主动断开）" class="headerlink" title="排除依赖（主动断开）"></a>排除依赖（主动断开）</h4><blockquote><p>排除依赖指的是主动断开依赖的资源，被排除的资源无需指定版本—不需要</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;/dependencies</span><br></pre></td></tr></table></figure><ul><li>依赖的jar包默认情况下可以在任何地方使用，可以通过scope标签设定起作用范围</li><li>作用范围<ul><li>主程序范围有效（main文件范围内）</li><li>测试范围有效（test文件夹范围）</li><li>是否参与打包（package指令范围内）</li></ul></li></ul><table><thead><tr><th>scope</th><th>主代码</th><th>测试代码</th><th>打包</th><th>示例</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td></td><td>Y</td><td></td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td></td><td>servlet-api</td></tr><tr><td>runtime</td><td></td><td></td><td>Y</td><td>jdbc</td></tr></tbody></table><blockquote><p>依赖范围的传递性</p></blockquote><ul><li>带有依赖范围的资源在进行传递的时候，作用范围将会受到影响</li></ul><table><thead><tr><th>行是直接依赖，列是间接依赖</th><th>compile</th><th>test</th><th>provided</th><th>runtime</th></tr></thead><tbody><tr><td>compile</td><td>compile</td><td>test</td><td>provided</td><td>runtime</td></tr><tr><td>test</td><td></td><td></td><td></td><td></td></tr><tr><td>provided</td><td></td><td></td><td></td><td></td></tr><tr><td>runtime</td><td>runtime</td><td>test</td><td>provided</td><td>runtime</td></tr></tbody></table><h3 id="生命周期以及插件"><a href="#生命周期以及插件" class="headerlink" title="生命周期以及插件"></a>生命周期以及插件</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>Maven对项目构建的生命周期划分为3套<ul><li>clean：清理工作</li><li>default：核心工作，例如编译、测试、打包、部署等</li><li>site：产生报告，发布站点等</li></ul></li></ul><blockquote><p>clean生命周期</p></blockquote><ul><li>pre-clean          执行一些需要在clean之前立即完成的工作</li><li>clean                  移除所有上一次构件生成的文件</li><li>post-clean         执行一些需要在clean之后立即完成的工作</li></ul><blockquote><p>default生命周期</p></blockquote><img src="/javaEE/Maven/2022/01/26/Maven/default%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class title="default生命周期"><blockquote><p>site生命周期</p></blockquote><ul><li>pre-site                        执行一些需要在生成站点文档之前完成的工作  </li><li>site                                生成站点文档</li><li>post-site                      执行一些需要在生成站点文档之后完成的工作，并且为部署做准备工作</li><li>site-deploy                 将生成的站点文档部署到特定服务器上面去</li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认maven在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/uncategorized/2022/01/16/first/"/>
      <url>/uncategorized/2022/01/16/first/</url>
      
        <content type="html"><![CDATA[<p>测试博客的发布</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
