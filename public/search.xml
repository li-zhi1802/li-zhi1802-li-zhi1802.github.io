<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>swagger</title>
      <link href="/2022/02/17/Swagger/"/>
      <url>/2022/02/17/Swagger/</url>
      
        <content type="html"><![CDATA[<h2 id="swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><ul><li>号称世界上最流行的API框架</li><li>RestFul风格的API展示可以实现API文档和API定义同步更新</li></ul><h3 id="springboot整合swagger"><a href="#SpringBoot整合Swagger" class="headerlink" title="SpringBoot整合Swagger"></a>SpringBoot整合Swagger</h3><ol><li>导入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要web的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>写一个简单的Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启Swagger功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>访问swagger-ui.html</li></ol><img src="/2022/02/17/Swagger/UI%E7%95%8C%E9%9D%A2.png" class title="UI界面"><p>我们在ui的jar包中可以知道我们可以访问该页面</p><p>这是访问的页面</p><img src="/2022/02/17/Swagger/swagger%E7%9A%84%E7%95%8C%E9%9D%A2.png" class title="swagger的界面"><h3 id="配置swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><p>Swagger中用来配置的bean是Docket</p><h4 id="配置文档信息"><a href="#配置文档信息" class="headerlink" title="配置文档信息"></a>配置文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置swagger信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">            <span class="string">&quot;swagger测试&quot;</span>,<span class="comment">//文档名称</span></span><br><span class="line">            <span class="string">&quot;初次测试swagger&quot;</span>,<span class="comment">//文档描述</span></span><br><span class="line">            <span class="string">&quot;1.0&quot;</span>,<span class="comment">//版本号</span></span><br><span class="line">            <span class="string">&quot;http://li-zhi.net.cn/&quot;</span>,<span class="comment">//作者个人博客</span></span><br><span class="line">            <span class="keyword">new</span> Contact(<span class="string">&quot;李智&quot;</span>,<span class="string">&quot;http://li-zhi.net.cn/&quot;</span>,<span class="string">&quot;1158778689@qq.com&quot;</span>),<span class="comment">//作者联系方式</span></span><br><span class="line">            <span class="string">&quot;Apache 2.0&quot;</span>,<span class="comment">//开源协议</span></span><br><span class="line">            <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置模型"><a href="#配置模型" class="headerlink" title="配置模型"></a>配置模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerModelConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是专门建了一个SwaggerModelConfig来放置所有的模型类</p><h4 id="配置分组"><a href="#配置分组" class="headerlink" title="配置分组"></a>配置分组</h4><p>因为项目一般是分组协同开发，每个组各自开发的接口，那接口文档应该各自分开，所以就有了分组的需要</p><p>分组只需要配置一个groupName(“groupName”)即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置扫描的接口"><a href="#配置扫描的接口" class="headerlink" title="配置扫描的接口"></a>配置扫描的接口</h4><p>这里主要讲两种方式，第一种是按路径扫描，第二种是按包名扫描</p><h5 id="按路径扫描"><a href="#按路径扫描" class="headerlink" title="按路径扫描"></a>按路径扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">&quot;/user/**&quot;</span>))</span><br><span class="line"><span class="comment">// 该配置下，该组会扫描所有的/user/下的所有的API</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按包名扫描"><a href="#按包名扫描" class="headerlink" title="按包名扫描"></a>按包名扫描</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group2&quot;</span>)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.lizhiswaggertest.controller&quot;</span>))</span><br><span class="line"><span class="comment">//该配置下，该组会扫描所有此包下的API接口</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类RequestHandlerSelectors中还有其他的扫描机制，可自行研究</p><h3 id="根据环境控制是否能访问swagger"><a href="#根据环境控制是否能访问swagger" class="headerlink" title="根据环境控制是否能访问swagger"></a>根据环境控制是否能访问swagger</h3><p>一般产品的开发都会有开发、测试、运维、上线等多套环境，根据不同的环境，控制是否可以访问swagger的ui界面</p><p>配置文件application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>配置dev环境和test环境可以使用swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">    Profiles devProfile = Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> dev = environment.acceptsProfiles(devProfile);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo()).groupName(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .enable(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2022/02/16/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/16/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>该模式有五种实现方式</p><ol><li>恶汉模式</li><li>懒汉模式</li><li>静态内部类模式</li><li>枚举模式</li></ol><p>该设计模式的核心是<strong>构造方法私有化</strong></p><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><p>恶汉模式：见名知意，就是在类被加载的时候就创建。</p><p>案例：Runtime类</p><p>缺点：浪费内存空间</p><blockquote><p>我查了资料，查到了这个缺点，但是这个缺点我不时很能理解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p>这种实现方式，我们从分几个版本从简单到复杂</p><h4 id="version-01"><a href="#Version-01" class="headerlink" title="Version 01"></a>Version 01</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan lAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            lAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>只能在单线程中安全，多线程中是不安全的</p><p>现在有线程A和线程B，线程A走到了注解A处，然后线程B抢占了CPU，这时候lAZYMAN还是null，所以线程B创建了一个lAZYMAN对象，然后线程A抢回CPU，它这时候已经在if语句里面了，箭在弦上不得不发，所以线程A也创建了一个lAZYMAN对象，导致单例模式被破坏，所以该实现方式线程不安全</p><h4 id="version-02"><a href="#Version-02" class="headerlink" title="Version 02"></a>Version 02</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>为方法加锁，确实保证了单例模式，但是我们都知道同步方法，锁的是LazyMan的Class类，所以我们得知这种方式可以保证单例模式的线程安全。但是我们好好想想，当我们创建了第一个单例对象之后，还需要锁来保证同步吗？答案显而易见，肯定是不需要的，所以这种方式效率低下，需要改进，我们来看下一个版本</p><h4 id="version-03"><a href="#Version-03" class="headerlink" title="Version 03"></a>Version 03</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不使用同步方法来保证所有的线程同步，我们只对LAZYMAN对象还为null的线程同步，这时候又出现了问题。我们来分析一下</p><p>现在我们有两个线程，线程A和线程B。线程A走到了注释A处，然后线程B抢占了CPU，这时候lAZYMAN还是null，所以线程B创建了一个lAZYMAN对象，然后线程A抢回CPU，它这时候已经在if语句里面了，箭在弦上不得不发，所以线程A也创建了一个lAZYMAN对象，导致单例模式被破坏，所以该实现方式线程不安全，我们发现这和我们没有加锁的时候的情形几乎一模一样。我们来看下一个版本，<strong>双重锁机制</strong></p><h4 id="version-04"><a href="#Version-04" class="headerlink" title="Version 04"></a>Version 04</h4><pre><code>public class LazyMan &#123;    private static LazyMan LAZYMAN;    private LazyMan()&#123;        &#125;    public static LazyMan getInstance()&#123;        if(LAZYMAN==null)&#123;            //A            synchronized (LazyMan.class)&#123;                if(LAZYMAN==null)&#123;                    //B                    LAZYMAN = new LazyMan();                &#125;            &#125;        &#125;        return LAZYMAN;    &#125;&#125;</code></pre><p>我个人的理解是第一重锁是为了过滤LAZYMAN为NULL的线程，第二重锁是为了保证只能有一个线程去创建对象，这时候我们似乎找不到什么破绽了，我们来继续往下看</p><h4 id="version-05"><a href="#Version-05" class="headerlink" title="Version 05"></a>Version 05</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LAZYMAN==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//B</span></span><br><span class="line">                    LAZYMAN = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，好像和上一个版本没什么区别，仔细一看，其实区别是在这个单例变量的修饰符多了一个volatile。</p><p>volatile三大作用</p><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止该变量出现的地方发生指令重排</li></ol><p>这里的话，我们使用到的特性是第三点，我们来分析一下<code> LAZYMAN = new LazyMan();</code></p><p>这一句话其实执行了三个步骤</p><ol><li>开辟一个内存空间</li><li>初始化对象</li><li>将该内存空间的地址指向变量</li></ol><p>JVM内部会有一种叫指令重排的代码优化机制，这时候，这三者的顺序就有可能会改变。</p><p>现在我们有两个线程，线程A和线程B。线程A走到了注释A处，然后线程B抢占了CPU，开始执行<code>LAZYMAN = new LazyMan();</code>开辟内存空间后，没有先初始化对象，而是先将该内存空间的地址指向变量，<strong>这时候</strong>线程A抢回了CPU，这时候的LAZYMAN已经不是NULL了，直接将其返回了出去，但是这个对象其实还没有初始化，还是个空架子，这就出现了问题。</p><p>当然这种情况十分十分少，但是为了严谨性，最好还是加上volatile关键词禁止指令重排</p><h3 id="静态内部类模式"><a href="#静态内部类模式" class="headerlink" title="静态内部类模式"></a>静态内部类模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticWay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticWay</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticWay STATICWAY = <span class="keyword">new</span> StaticWay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticWay <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.STATICWAY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现方式其实就是利用的JVM的一些特性</p><p>类的加载分为以下过程</p><ul><li><p><strong>类的加载：</strong>将Class文件字节码加载到内存中，并将这些静态数据转换为方法区的运行时数据结构，然后在堆中生成一个代表该类的Class对象，作为方法区类数据的访问入口，可以使用反射获取该类的所有信息。</p></li><li><p><strong>类的链接：</strong>将Java类的二进制代码合并到JVM中  </p><ul><li> 验证：确保加载的类符合JVM规范  </li><li>准备：为静态变量分配内存并设置成员变量的默认值  </li><li> 解析：JVM常量池内的符号引用（常量名）替换为直接引用（地址）的过程 </li></ul></li><li><p><strong>类的初始化：</strong>执行类构造器&lt; clinit &gt;()方法的过程，当初始化一个类的时候，如果其父类为初始化，则先初始化其父类 ，<strong>JVM会保证类构造器在多线程环境下被正确加锁</strong></p></li></ul><p>其实最开始的饿汉单例模式也是也是这个原理</p><h3 id="颠覆"><a href="#颠覆" class="headerlink" title="颠覆"></a>颠覆</h3><p>其实一路到了这里，以上方法都是不安全的。因为java有一个很牛X的包。</p><p><strong><code>java.lang.reflect</code></strong></p><p>我们在最开始说过，单例模式的本质就是构造器私有化，但是java的反射机制，它不讲武德，它可以直接修改权限修饰符。我们来看看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">    Constructor&lt;Hungry&gt; constructor = Hungry.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Hungry hungry1 = Hungry.getInstance();;</span><br><span class="line">    Hungry hungry2 = constructor.newInstance();</span><br><span class="line">    System.out.println(hungry1==hungry2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可想而知最后的结果是  false</span></span><br></pre></td></tr></table></figure><p>可不可以对其作出防御呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(HUNGRY!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">490</span>)</span><br><span class="line">at com.lizhi.hungry.Hungry.main(Hungry.java:<span class="number">26</span>)</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: 请不要尝试使用反射破坏单例模式</span><br><span class="line">at com.lizhi.hungry.Hungry.&lt;init&gt;(Hungry.java:<span class="number">15</span>)</span><br><span class="line">... <span class="number">5</span> more</span><br></pre></td></tr></table></figure><p>上述方法对饿汉已经作出了合适的防御，那对于懒汉模式，如果两个对象都是使用反射创建的呢？这时候这个防御就是形同虚设了，因为我们肯定是禁止反射去创建对象，所以这种肯定是不行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMan LazyMan;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LAZYMAN!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line">        LazyMan lazyMan2 = LazyMan.getInstance();</span><br><span class="line">        System.out.println(lazyMan1==lazyMan2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们引入一个布尔值来完成这个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan LazyMan;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag ;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请不要尝试使用反射破坏单例模式&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flag=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(LazyMan==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    LazyMan = <span class="keyword">new</span> LazyMan();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;LazyMan&gt; constructor = LazyMan.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        LazyMan lazyMan1 = constructor.newInstance();</span><br><span class="line"><span class="comment">//        LazyMan lazyMan2 = constructor.newInstance();</span></span><br><span class="line">        LazyMan lazyMan2 = LazyMan.getInstance();</span><br><span class="line"><span class="comment">//        LazyMan lazyMan1 = LazyMan.getInstance();</span></span><br><span class="line">        System.out.println(lazyMan1==lazyMan2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样反射就无法控制我们的单例了！</p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>这时候有没有想起来我们在学javaSE的时候就学到了一个自带单例模式的类型，那就是枚举类Enum！</p><p>我们来尝试攻击一下枚举类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingleEnum</span> </span>&#123;</span><br><span class="line">    SINGLETON;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Constructor&lt;SingleEnum&gt; constructor = SingleEnum.class.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        SingleEnum single1 = constructor.newInstance(<span class="string">&quot;single&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        SingleEnum single2 = constructor.newInstance(<span class="string">&quot;single&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(single1==single2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候发现报错了！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)</span><br><span class="line">at com.lizhi.SingleEnum.main(SingleEnum.java:12)</span><br></pre></td></tr></table></figure><p>我们点进newInstance方法看下源码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="meta">@ForceInline</span> <span class="comment">// to ensure Reflection.getCallerClass optimization</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">           IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        checkAccess(caller, clazz, clazz, modifiers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">    ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">    <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ca = acquireConstructorAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T inst = (T) ca.newInstance(initargs);</span><br><span class="line">    <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现了这句话<code>throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</code></p><p>这就解释通了，原来是java的反射已经处理好了枚举类，使其真正的实现了安全的单例！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂设计模式</title>
      <link href="/2022/02/16/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/16/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><p>该设计模式分为三种实现</p><ol><li>简单工厂设计模式</li><li>工厂方法实现模式</li><li>抽象工厂实现模式</li></ol><h3 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h3><h3 id="工厂方法实现模式"><a href="#工厂方法实现模式" class="headerlink" title="工厂方法实现模式"></a>工厂方法实现模式</h3><h3 id="抽象工厂实现模式"><a href="#抽象工厂实现模式" class="headerlink" title="抽象工厂实现模式"></a>抽象工厂实现模式</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Security</title>
      <link href="/2022/02/16/SpringBoot-Security/"/>
      <url>/2022/02/16/SpringBoot-Security/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大<br>的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实<br>现强大的安全管理!</p><p>Spring Security的两个主要目标是“认证”和“授权”（访问控制）<br>  “认证”(Authentication)<br>  “授权” (Authorization)<br>  这个概念是通用的，而不是只在Spring Security 中存在。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>继承WebSecurityConfigurerAdapter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重写以下方法做出权限设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//首页都可以访问，但是各个级别下的页面设置成只能各自的级别才可以访问</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/vip3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">    <span class="comment">//没有权限默认回到登录页面，loginPage设置登录页面，loginProcessingUrl设置登录提交的api</span></span><br><span class="line">    <span class="comment">//如果只写 http.formLogin();会有一个默认登录页面和默认的登录提交的api</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/login&quot;</span>).loginProcessingUrl(<span class="string">&quot;/user/api/login&quot;</span>);</span><br><span class="line">    <span class="comment">//设置退出时候使session失效，logoutSuccessUrl设置退出成功的页面</span></span><br><span class="line">    http.logout().invalidateHttpSession(<span class="keyword">true</span>).logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    <span class="comment">//设置’记住我‘的功能</span></span><br><span class="line">    <span class="comment">//remember-me为默认提交的参数</span></span><br><span class="line">    http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重写以下方法做出授权处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里要从数据库读</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//BCryptPasswordEncoder为密码设置加密，如果不设置会报错，也可以使用其他加密的类</span></span><br><span class="line">    BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(encoder)</span><br><span class="line">        .withUser(<span class="string">&quot;zhima&quot;</span>).password(encoder.encode(<span class="string">&quot;a&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;lizhi&quot;</span>).password(encoder.encode((<span class="string">&quot;123456&quot;</span>))).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><h2 id="thymeleaf模板结合springsecurity"><a href="#thymeleaf模板结合SpringSecurity" class="headerlink" title="thymeleaf模板结合SpringSecurity"></a>thymeleaf模板结合SpringSecurity</h2><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>观察这个页面的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;!isAuthenticated()&quot;当用户没登录的时候--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;isAuthenticated()&quot;当用户登录的时候--&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authentication=&quot;name&quot;取出用户的用户名--&gt;</span></span><br><span class="line">            授权：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authentication=&quot;principal.authorities&quot;取出用户的roles--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot;如果当前登录用户有vip1权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/1&#125;&quot;</span>&gt;</span>vip1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/2&#125;&quot;</span>&gt;</span>vip1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip1/3&#125;&quot;</span>&gt;</span>vip1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip2&#x27;)&quot;如果当前登录用户有vip2权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/1&#125;&quot;</span>&gt;</span>vip2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/2&#125;&quot;</span>&gt;</span>vip2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip2/3&#125;&quot;</span>&gt;</span>vip2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--sec:authorize=&quot;hasRole(&#x27;vip3&#x27;)&quot;如果当前登录用户有vip3权限则显示此div--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>vip3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/1&#125;&quot;</span>&gt;</span>vip3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/2&#125;&quot;</span>&gt;</span>vip3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;vip3/3&#125;&quot;</span>&gt;</span>vip3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ForkJoin</title>
      <link href="/2022/02/11/ForkJoin/"/>
      <url>/2022/02/11/ForkJoin/</url>
      
        <content type="html"><![CDATA[<h2 id="forkjoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><h3 id="什么是forkjoin"><a href="#什么是ForkJoin？" class="headerlink" title="什么是ForkJoin？"></a>什么是ForkJoin？</h3><p>并行执行任务，提交效率，大数据量的时候使用！</p><p>把大任务拆分成小任务</p><img src="/2022/02/11/ForkJoin/ForkJoin.png" class title="ForkJoin"><h3 id="forkjoin特点工作窃取"><a href="#ForkJoin特点：工作窃取" class="headerlink" title="ForkJoin特点：工作窃取"></a>ForkJoin特点：工作窃取</h3><p>内部维护的双端队列，两端都可以出</p><img src="/2022/02/11/ForkJoin/%E5%81%B7%E7%AA%83%E7%AE%97%E6%B3%95.png" class title="偷窃算法"><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>创建ForkJoinPool对象</li><li>新建一个计算任务ForkJoinTask放入池子中计算</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> temp = <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDemo</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">compute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(end-start&lt;temp)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                result+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            ForkJoinDemo forkJoinDemo1 = <span class="keyword">new</span> ForkJoinDemo(start,middle);</span><br><span class="line">            forkJoinDemo1.fork();</span><br><span class="line">            ForkJoinDemo forkJoinDemo2 = <span class="keyword">new</span> ForkJoinDemo(middle,end);</span><br><span class="line">            forkJoinDemo2.fork();<span class="comment">//把任务压入线程队列</span></span><br><span class="line">            result = forkJoinDemo1.join()+ forkJoinDemo2.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2022/02/11/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/02/11/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口，即只有一个抽象方法的接口即为函数式接口，可以使用lambda表达式简化使用。</p><p>函数式接口一般接口上都会有@FunctionInterface注解做标记，作用是检查该接口是否只有一个抽象方法，如果不写，但是接口中确实只有一个抽象方法，也不会影响lambda的使用，下面我们来看一下一些常见的函数式接口</p><h3 id="functionlt-t-r-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt; T , R &gt;"></a>Function&lt; T , R &gt;</h3><p>函数型接口</p><p>T为传入参数的类型</p><p>R为返回值类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, String&gt; f = s -&gt; s.substring(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">String apply = f.apply(<span class="string">&quot;asdas    asd &quot;</span>);</span><br><span class="line">System.out.println(apply);</span><br></pre></td></tr></table></figure><h3 id="predicatelt-t-gt"><a href="#Predicate-lt-T-gt" class="headerlink" title="Predicate&lt; T &gt;"></a>Predicate&lt; T &gt;</h3><p>断言型接口</p><p>T为传入参数的类型</p><p>返回值为Boolean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; p = t-&gt;t.length()&gt;<span class="number">5</span>;</span><br><span class="line">System.out.println(p.test(<span class="string">&quot;3223&quot;</span>));</span><br><span class="line">System.out.println(p.test(<span class="string">&quot;saf223&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="consumerlt-t-gt"><a href="#Consumer-lt-T-gt" class="headerlink" title="Consumer&lt; T &gt;"></a>Consumer&lt; T &gt;</h3><p>消费者型接口</p><p>T为传入的参数</p><p>无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = c-&gt; System.out.println(<span class="string">&quot;我使用了&quot;</span>+c);</span><br><span class="line">consumer.accept(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">consumer.accept(<span class="string">&quot;456&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="supplierlt-t-gt"><a href="#Supplier-lt-T-gt" class="headerlink" title="Supplier&lt; T &gt;"></a>Supplier&lt; T &gt;</h3><p>生产者型接口</p><p>T为返回值类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; supplier = ()-&gt; UUID.randomUUID().toString();</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2022/02/11/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/02/11/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h3><p>我们先看使用Executors创建的三种线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Executors.newSingleThreadExecutor();<span class="comment">//创建一个只有一个线程的线程池</span></span><br><span class="line">Executors.newFixedThreadPool();<span class="comment">//创建一个固定数目的线程的线程池</span></span><br><span class="line">Executors.newCachedThreadPool();<span class="comment">//缓存池，会复用之前使用过的线程</span></span><br></pre></td></tr></table></figure><p>执行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h3><p>阿里巴巴规范中有这么一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors返回的线程池对象的弊端如下：</span><br><span class="line">1）FixedThreadPool和SingleThreadPool:</span><br><span class="line">  允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</span><br><span class="line">2）CachedThreadPool:</span><br><span class="line">  允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</span><br></pre></td></tr></table></figure><p>我们来看看创建这三种线程池的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，这三个构造方法创建的对象其实都是ThreadPoolExecutor对象，只不过就是构造参数不一样。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>核心线程池的大小</td></tr><tr><td>int maximumPoolSize</td><td>最大线程池的大小</td></tr><tr><td>long keepAliveTime</td><td>超时时间过后就释放</td></tr><tr><td>TimeUnit unit</td><td>超时时间单位</td></tr><tr><td>BlockingQueue&lt; Runnable&gt; workQueue</td><td>阻塞队列</td></tr><tr><td>ThreadFactory threadFactory</td><td>线程工厂，创建线程的，一般不用动</td></tr><tr><td>RejectedExecutionHandler handler</td><td>拒绝策略</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>corePoolSize为一直开着的线程数，当workQueue已经满了，则继续开启线程直到maximumPoolSize，当线程数到了maximumPoolSize，然后workQueue也满了，如果还有新的任务，则使用handler拒绝策略对其进行处理。</p><p>当corePoolSize-maximumPoolSize区间的线程等待了workQueue时间后，还是没任务来，则关闭该区间的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    TimeUnit.SECONDS,</span><br><span class="line">    <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">    Executors.defaultThreadFactory(),</span><br><span class="line">    <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="cpu密集型和io密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h4><p>最大线程数到底如何定义？</p><h5 id="cpu密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h5><p>几核CPU就是几，可以保证效率最高   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().availableProcessors()<span class="comment">//动态获取cpu核数</span></span><br></pre></td></tr></table></figure><h5 id="io密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h5><p>程序里面有多少个非常消耗IO的线程，一般最大线程数设置为该数字的两倍</p><h3 id="四大拒绝策略"><a href="#四大拒绝策略" class="headerlink" title="四大拒绝策略"></a>四大拒绝策略</h3><img src="/2022/02/11/%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E5%9B%9B%E7%A7%8D%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.png" class title="四种拒绝策略"><h4 id="abortpolicy"><a href="#AbortPolicy" class="headerlink" title="AbortPolicy"></a>AbortPolicy</h4><p>不处理此任务，并且抛出异常</p><h4 id="callerrunspolicy"><a href="#CallerRunsPolicy" class="headerlink" title="CallerRunsPolicy"></a>CallerRunsPolicy</h4><p>不处理此任务，往上传递此任务，哪来的回哪里去</p><h4 id="discardoldestpolicy"><a href="#DiscardOldestPolicy" class="headerlink" title="DiscardOldestPolicy"></a>DiscardOldestPolicy</h4><p>不处理此任务，不会抛出异常</p><h4 id="discardpolicy"><a href="#DiscardPolicy" class="headerlink" title="DiscardPolicy"></a>DiscardPolicy</h4><p>尝试和最老的那一个线程竞争，不会抛出异常</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-简介</title>
      <link href="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="jvm的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h3><p>下面是简易的结构图</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" class title="JVM体系结构"><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%842.png" class title="JVM体系结构2"><p>栈中不会有垃圾回收</p><p>大部分JVM调优都是在堆内存上进行调优</p><p>详细的结构图如下</p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器的作用就是将类（class）装进内存的</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A81.png" class title="类加载器"><p>JVM规定了以下类型的加载器</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" class title="类加载器"><p><strong>引导类加载器：</strong>用C++编写的，是JVM自带的类加载器，<strong>负责java平台的核心库</strong>，用来装载核心类库，该加载器无法直接获取（获取的时候会是null）</p><p><strong>扩展类加载器（ExtClassLoader）：</strong>负责jre/lib/etc目录下的jar包户或者 -d java.ext.dirs指定目录下的jar包装入工作库</p><p><strong>系统类加载器（AppClassLoader）：</strong>负责java -classpath或者java.class.path指定目录下的类与jar包</p><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>检查顺序从下至上，加载顺序从顶至下</p><p>举个栗子：我写了一个Student类，我要加载它需要经过以下过程</p><ol><li>先将该任务委托给AppClassLoader</li><li>AppClassLoader很懒，它不想加载，将任务向上委托给ExtClassLoader</li><li>ExtClassLoader也很懒，它不想加载，继续将任务向上委托给BootStrapClassLoader</li><li>BootStrapClassLoader没法偷懒了，只能自己加载，但是在自己管理的lib目录下并没有找到该类，只能将任务再次交给ExtClassLoader去加载</li><li>那ExtClassLoader没法偷懒了，只能在自己管理的ext目录下找该类，但是也没有找到，只能将任务继续向下转交给AppClassLoader</li><li>AppClassLoader不得不自己去尝试加载该类，于是加载成功</li></ol><blockquote><p>既然最后还是AppClassLoader去加载Student类何必绕一个大圈子呢？</p></blockquote><p>这是为了防止原始类被用户写的类所覆盖。</p><p>再举个栗子：我自己写了一个String类，我要加载它会经历以下过程</p><ol><li>先将该任务委托给AppClassLoader</li><li>ExtClassLoader也很懒，它不想加载，继续将任务向上委托给BootStrapClassLoader</li><li>BootStrapClassLoader没法偷懒了，只能自己加载，于是在自己管理的lib目录下找到该类并加载，将加载结果向下一直传递到用户</li></ol><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><p>类的加载过程分三个阶段</p><p>类的加载 ==》类的链接 ==》类的初始化</p><ul><li><p><strong>类的加载：</strong>将Class文件字节码加载到内存中，并将这些静态数据转换为方法区的运行时数据结构，然后在堆中生成一个代表该类的Class对象，作为方法区类数据的访问入口，可以使用反射获取该类的所有信息。</p></li><li><p><strong>类的链接：</strong>将Java类的二进制代码合并到JVM中</p><ul><li>验证：确保加载的类符合JVM规范</li><li>准备：为静态变量分配内存并设置成员变量的默认值</li><li>解析：JVM常量池内的符号引用（常量名）替换为直接引用（地址）的过程</li></ul></li><li><p><strong>类的初始化：</strong>执行类构造器&lt; clinit &gt;()方法的过程</p><ul><li>类构造器方法是由编译期按顺序收集类中所有类变量的赋值动作和静态代码块中的语句合并而成的（类构造器是构造类信息的，不是对象构造器）</li><li>当初始化一个类的时候，如果其父类为初始化，则先初始化其父类</li><li>JVM会保证类构造器在多线程环境下被正确加锁</li></ul></li></ul><h4 id="类的主动引用一定会发生类的初始化"><a href="#类的主动引用（一定会发生类的初始化）" class="headerlink" title="类的主动引用（一定会发生类的初始化）"></a>类的主动引用（一定会发生类的初始化）</h4><ul><li>当JVM启动的时候，先初始化main方法所在的类</li><li>new 一个类的对象</li><li>调用该类的静态成员（除了final）和静态方法</li><li>使用反射对其类进行反射调用</li><li>当初始化一个类时，其父类若没有初始化，则先初始化其父类</li></ul><h4 id="类的被动引用不会发生类的初始化"><a href="#类的被动引用（不会发生类的初始化）" class="headerlink" title="类的被动引用（不会发生类的初始化）"></a>类的被动引用（不会发生类的初始化）</h4><ul><li>当访问一个静态域的时候，只有真正声明该域的类才会被初始化。举个栗子：当通过子类调用父类的静态变量，该子类是不会被初始化的</li><li>通过数组定义类引用，不会导致初始化</li><li>引用常量不会导致初始化</li></ul><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>​        java安全模型的核心就是java沙箱（sandbox）。沙箱是一个限制程序运行的环境。沙箱机制就是将java代码限定在JVM特定的运行范围内，并且严格限制代码对本地资源的访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。<strong>沙箱主要限制系统资源（CPU，内存，文件系统，网络）访问</strong>。不同级别的沙箱对这些资源的限制就不一样</p><p>​        所有的java程序运行都可以指定沙箱，可以指定安全策略。</p><p>​        在java中，将执行过程分为本地代码和远程代码两部分，本地代码是默认可信任的，而远程代码则被看做是不受信任的。对于授予信任的本地代码，可以访问一切本地资源。而对于非授予信任的远程代码在早期的java实现中，完全依赖于java沙箱机制。下图是jdk1.0的安全模型</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.0%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.0安全模型"><p>​        但是如此严格的安全机制也给程序的功能拓展带来了障碍，比如用户希望远程代码访问本地资源的时候，就会被沙箱机制所拒绝。所以在后来的jdk1.1版本中，针对安全机制做出了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限。下图是jdk1.1的安全模型</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.1%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.1安全模型"><p>​        在jdk1.2的版本中，再次引进安全机制，增加了代码签名，不论是本地代码还是远程代码，都会按照用户的安全策略设定，由类加载器加载到JVM中权限不同的运行空间，来实现差异化的代码执行权限控制。下图是jdk1.2的安全模型</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.2%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.2安全模型"><p>​        当前最新的安全机制实现，则引入了域（domain）的概念。JVM会把所有的代码加载到不同的系统和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限（Permission）。存在于不同域中的类文件就具有了当前域的全部权限。下图是jdk1.6的安全模型</p><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/jdk1.6%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" class title="jdk1.6安全模型"><p>​        组成沙箱的基本组件:</p><ul><li><p>字节码校验器(bytecode verifier):确保java类文件遭循java语言规范。这样可以帮助ava程序实现内存保<br>护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p></li><li><p>类装载器(classloader):其中类装载器在3个方面对java沙箱起作用</p><ul><li>它防止恶意代码去干涉善意的代码;</li><li>它守护了被信任的类库边界;</li><li>它将代码归入保护域，确定了代码可以进行哪些操作。</li></ul></li></ul><p>​        虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由ava虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p><p>类装载器采用的机制是双亲委派模式。</p><ol><li>从最内层IVM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用;</li><li>由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li></ol><ul><li>存取控制器(access controller):存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略<br>设定，可以由用户指定。</li><li>安全管理器(security manager):是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li><li>安全软件包(security package):javasecurity下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括:<ul><li>安全提供者</li><li>消息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><p>凡是带了native关键词的方法，说明这个方法java语言实现不了，此方法会被放入本地方法栈中，该栈通过JNI（Java Native Interface）去调用底层的C或者C++语言写的方法。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>Method Area</p><p>方法区是被所有线程共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单来说，所有定义的方法的信息都会被保存在该区域</p><p>静态变量、常量、类信息（构造方法，接口定义），运行时的常量池存放在方法区中，但是实例变量存在于内存区中，与方法区无关</p><h3 id="pc寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h3><p>程序计数器：Program Counter Register</p><p>​        每个线程都有一个程序计数器，实现程序私有的，就是一个指针，指向方法区中的方法字节码</p><h3 id="三种jvm"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h3><ul><li>Sun公司的HotSpot </li><li>Oracle公司的JRockit（最快的JVM，但是不适合学习）</li><li>IBM公司的J9VM</li></ul><p>我们学的是HotSpot</p><h3 id="堆heap"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>一个JVM只有一个堆内存，堆内存的大小是可以调节的，里面一般放实例对象</p><p>堆内存细分为三个区域：</p><ol><li>新生区  Young/New  </li><li>养老区  old </li><li>永久区  perm</li></ol><img src="/2022/02/10/JVM-%E7%AE%80%E4%BB%8B/JVM%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" class title="JVM堆内存分布"><p>GC垃圾回收主要在伊甸园区和养老区</p><p>堆内存满了就会爆OOM（OutOfMemoryError）错误</p><p>所有的对象都是在伊甸园区产生的</p><p>伊甸园满了会触发轻GC，有的就直接死了，然后留下来的去往幸存区</p><p>如果幸存区满了，就去往老年区</p><p>如果老年区满了，触发一次重GC（伊甸园区和幸存者区都清一遍，活下来的去老年区）</p><h3 id="垃圾处理器gc"><a href="#垃圾处理器GC" class="headerlink" title="垃圾处理器GC"></a>垃圾处理器GC</h3><p>GC的作用区域只有堆</p><p>两种回收：轻GC 、Full GC</p><p>GC的算法</p><ol><li>标记清除法</li><li>标记整理法</li><li>标记复制算法</li><li>引用计数法（给每一个对象分配一个计数器，将计数器为0的对象清除）</li></ol><h4 id="标记复制法"><a href="#标记复制法" class="headerlink" title="标记复制法"></a>标记复制法</h4><p>谁空谁是to幸存区</p><p>新生区主要使用复制算法</p><p>好处：没有内存碎片</p><p>坏处：浪费了内存空间</p><p>复制算法使用最佳场景：对象存活度较低的时候</p><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p>扫描这些活着的对象，清除没有标记的对象进行清除</p><p>缺点：两次扫描，浪费时间，会产生内存碎片</p><p>优点：不需要额外空间</p><h4 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h4><p>再次扫描，向一端移动存活的对象</p><p>分代收集算法</p><p>年轻代：</p><ul><li>存活率低</li><li>复制算法</li></ul><p>老年代</p><ul><li>存活率高</li><li>标记清除+标记压缩混合实现</li></ul><h3 id="jmmjava-memory-model"><a href="#JMM：Java-Memory-Model" class="headerlink" title="JMM：Java Memory Model"></a>JMM：Java Memory Model</h3><ol><li>什么是JMM</li><li>做什么的</li><li>怎么用</li></ol><p>这五道面试题可以试着做一做</p><ol><li>请你谈谈你对JVM的理解？java8虚拟机和之前的有什么不同？</li><li>什么是OOM，什么是栈溢出？怎么分析？</li><li>JVM的常用调优参数有哪些？</li><li>内存快照如何抓取？怎么分析Dump文件？</li><li>谈谈你对类加载器的认识？</li></ol><ol><li>我第一次调用这个类的时候才会去将class文件加载成class对象放到方法区中？</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if语句减少嵌套</title>
      <link href="/2022/02/07/if%E8%AF%AD%E5%8F%A5%E5%87%8F%E5%B0%91%E5%B5%8C%E5%A5%97/"/>
      <url>/2022/02/07/if%E8%AF%AD%E5%8F%A5%E5%87%8F%E5%B0%91%E5%B5%8C%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h2 id="if的多重嵌套"><a href="#if的多重嵌套" class="headerlink" title="if的多重嵌套"></a>if的多重嵌套</h2><p>直接举栗子：有一个电商平台，当用户消费满1000元，根据vip等级可享受优惠</p><ul><li>普通会员             不打折</li><li>白银会员             优惠50元</li><li>黄金会员             打8折</li><li>白金会员             优惠50元，再打七折</li></ul><h3 id="version-10"><a href="#version-1-0" class="headerlink" title="version 1.0"></a>version 1.0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">long</span> money, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = money;</span><br><span class="line">    <span class="keyword">if</span>(money &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == UserType.SILVER_VIP.getCode())&#123;</span><br><span class="line">            result = money - <span class="number">50</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.GOLD_VIP.getCode())&#123;</span><br><span class="line">            result = money * <span class="number">0.8</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == UserType.PLATNUM_VIP.getCode())&#123;</span><br><span class="line">            result = (money - <span class="number">50</span>)*<span class="number">0.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里的if语句可能不是那么繁琐，但是我可不可减少if的出现甚至不出现呢？</p><p>下面我们结合以下两种解决方案来尝试解决问题</p><ol><li>卫语句</li><li>策略模式</li></ol><h3 id="version-20"><a href="#version-2-0" class="headerlink" title="version 2.0"></a>version 2.0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/2022/02/07/Cookie%E5%92%8CSession/"/>
      <url>/2022/02/07/Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h2 id="情景在线"><a href="#情景在线" class="headerlink" title="情景在线"></a>情景在线</h2><p>我们在登录完一个网站后，很长一段时间都不需要输入用户名和密码。大家有没有好奇这是为什么呢？</p><p>学过HTTP的都知道，HTTP访问是无状态的，也就是说，服务器是不知道你这是第几次访问该网站的。</p><p>那么Cookie，Session就是来做到让服务器预先知道一些信息，其核心其实就是存储。</p><p>Cookie是存储在客户端的，Session是存储在服务器端的</p><p>下面我们来说说Cookie</p><h2 id="cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie翻译为小饼干</p><img src="/2022/02/07/Cookie%E5%92%8CSession/Cookie%E5%9B%BE%E6%A0%87.png" class title="Cookie图标"><p>该技术可以实现每次HTTP请求都自动带数据给服务器，从而实现服务器可以在请求的时候就预先知道一些信息。</p><p>流程图如下</p><img src="/2022/02/07/Cookie%E5%92%8CSession/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%9D%E5%AD%98Cookie.png" class title="客户端保存Cookie"><p>我们可以在浏览器中查看Cookie</p><img src="/2022/02/07/Cookie%E5%92%8CSession/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8BCookie.png" class title="浏览器查看Cookie"><p>如果使用Cookie保存账号密码，那只要别人盗到你的Cookie，那么你的账号密码就泄露了！所以就出现了Session的技术</p><h2 id="session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session翻译为会话</p><p>当我们打开一个浏览器进去网站，则开始一个会话，但是会话的结束比较模糊，可以自动设置session过期时间，也可以设置永不过期。</p><p>Session保存在服务器，当产生了一次会话，则服务器返回的时候携带存储session相关信息的Cookie，并保存在客户端，而这个session对象的信息则保存在服务器的数据库中。</p><p>下面是流程图</p><img src="/2022/02/07/Cookie%E5%92%8CSession/Session%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class title="Session流程图">]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Token</title>
      <link href="/2022/02/07/Token/"/>
      <url>/2022/02/07/Token/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么会出现token"><a href="#为什么会出现Token" class="headerlink" title="为什么会出现Token"></a>为什么会出现Token</h2><p>相信大家都知道Cookie和Session（不知道这两者的在我另外两篇博客里面有写，附上链接，<a href="http://localhost:4000/2022/02/07/Cookie%E5%92%8CSession/">Cookie和Session</a>）</p><p>随着技术的发展，用户群体变的越来越大，如果服务器依旧使用基于Cookie的Session，在某一时间段有大量用户访问的话，服务器就会将大量的Session保存在数据库中，导致服务器性能降低，为了处理这种问题，就出现了一种技术，也就是JWT(JSON Web Token)</p><h2 id="token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><img src="/2022/02/07/Token/JWT%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class title="JWT流程图"><p>JWT是由三部分组成的，分别是header、payload、signature</p><p>header部分申明用什么算法生成签名</p><p>payload部分保存一些数据</p><p>signature部分保存header申明的算法生成的签名</p><img src="/2022/02/07/Token/JWT%E7%9A%84%E7%BB%84%E6%88%90.jpg" class title="JWT的组成"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Session、Cookie、Token都是是在服务器产生的</p><p>Cookie是保存SessionID的载体，但是Session对象是保存在服务器数据库中的</p><p>Token在服务器端生成，保存服务器端的密文，将token放入cookie发送诶客户端并交由客户端保存</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrok</title>
      <link href="/2022/02/07/Ngrok/"/>
      <url>/2022/02/07/Ngrok/</url>
      
        <content type="html"><![CDATA[<h2 id="使用ngrok快速部署项目"><a href="#使用Ngrok快速部署项目" class="headerlink" title="使用Ngrok快速部署项目"></a>使用Ngrok快速部署项目</h2><ol><li>打开<a href="https://ngrok.cc/">https://ngrok.cc/</a></li><li>注册一个账户</li></ol><img src="/2022/02/07/Ngrok/%E6%B3%A8%E5%86%8C%E5%90%8E%E7%9A%84%E9%A1%B5%E9%9D%A2.png" class title="注册后的页面"><ol start="3"><li>支付2块钱进行支付宝实名认证</li></ol><img src="/2022/02/07/Ngrok/%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81.png" class title="实名认证"><ol start="4"><li>点击开通隧道并翻到最后</li></ol><img src="/2022/02/07/Ngrok/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93.png" class title="开通隧道"><ol start="5"><li>开通隧道选项</li></ol><img src="/2022/02/07/Ngrok/%E5%BC%80%E9%80%9A%E9%9A%A7%E9%81%93%E9%80%89%E9%A1%B9.png" class title="开通隧道选项"><p>说明：</p><blockquote><p>隧道协议，两者即可</p></blockquote><ul><li>HTTP</li><li>HTTPS（HTTPS需要绑定自己的域名，并且已经申请了SSL证书，才能有效，否则无法使用https。）</li></ul><blockquote><p>隧道名称</p></blockquote><p>随便写即可</p><blockquote><p>前置域名</p></blockquote><p>写自己喜欢的</p><blockquote><p>http验证用户名和密码</p></blockquote><p>这里可以不写</p><ol start="6"><li>确认信息，开通</li></ol><img src="/2022/02/07/Ngrok/%E7%A1%AE%E8%AE%A4%E4%BF%A1%E6%81%AF.png" class title="确认信息"><ol start="7"><li>进入隧道管理页面</li></ol><img src="/2022/02/07/Ngrok/%E9%9A%A7%E9%81%93%E7%AE%A1%E7%90%86.png" class title="隧道管理"><blockquote><p>ps：这里和我之前写的配置不一样，是因为一个用户只能免费开通一个http隧道</p></blockquote><img src="/2022/02/07/Ngrok/%E5%8F%AA%E8%83%BD%E5%85%8D%E8%B4%B9%E5%BC%80%E9%80%9A%E4%B8%80%E4%B8%AA.png" class title="只能免费开通一个"><ol start="8"><li>下载客户端</li></ol><img src="/2022/02/07/Ngrok/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8B%E8%BD%BD.png" class title="客户端下载"><p>下载对应系统的软件，并解压</p><img src="/2022/02/07/Ngrok/%E4%B8%8B%E8%BD%BD%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BD%AF%E4%BB%B6.png" class title="下载客户端软件"><ol start="9"><li>启动批处理命令</li></ol><img src="/2022/02/07/Ngrok/%E5%90%AF%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF.png" class title="启动客户端"><img src="/2022/02/07/Ngrok/%E7%B1%BB%E4%BC%BC%E8%BF%99%E6%A0%B7%E7%9A%84%E7%95%8C%E9%9D%A2.png" class title="类似这样的界面"><blockquote><p>ps：我第一次使用的不是乱码，我也不理解这次使用为什么会乱码，这里不影响使用</p></blockquote><ol start="10"><li>输入隧道id，回车</li></ol><img src="/2022/02/07/Ngrok/%E8%BE%93%E5%85%A5%E9%9A%A7%E9%81%93id.png" class title="输入隧道id"><p><strong>如果之前配置了账号密码，则在此处需要输入账号密码</strong></p><ol start="11"><li>启动本地项目</li></ol><p><strong>注：本地项目启动的端口一定要和之前写的端口映射一致</strong></p><img src="/2022/02/07/Ngrok/%E9%85%8D%E7%BD%AEtomcat%E5%BC%80%E5%90%AF%E7%9A%84%E7%AB%AF%E5%8F%A3.png" class title="配置tomcat开启的端口"><ol start="12"><li>打开网址测试</li></ol><img src="/2022/02/07/Ngrok/%E6%89%93%E5%BC%80%E7%BD%91%E5%9D%80%E6%B5%8B%E8%AF%95.png" class title="打开网址测试"><ol start="13"><li>本地</li></ol><img src="/2022/02/07/Ngrok/%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE.png" class title="本地访问"><ol start="14"><li>Ngrok提供的网站访问</li></ol><img src="/2022/02/07/Ngrok/Ngrok%E6%8F%90%E4%BE%9B%E7%9A%84%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE.png" class title="Ngrok提供的网站访问">]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于路径</title>
      <link href="/2022/02/07/%E5%85%B3%E4%BA%8E%E8%B7%AF%E5%BE%84/"/>
      <url>/2022/02/07/%E5%85%B3%E4%BA%8E%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="访问路径"><a href="#访问路径" class="headerlink" title="访问路径"></a>访问路径</h1><p>URL统一资源定位符，用于定位资源的一种方式。</p><p>通常的URL资源访问路径由两部分构成:资源路径与资源名称。</p><p>资源名称指的是要访问资源的直接名称，如show.html,或与要访问资源存在映射关系的间接名称，如show.do</p><p>资源路径，则是通过该路径则可以定位到指定的资源，即资源路径是指在URL资源访问路径中除了资源名称以外的其它部分。</p><p>根据“资源路径是否可以独立完成资源准确定位”的判别标准,可以将访问路径分为绝对路径与相对路径</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径，是指根据给出的访问路径可以精确的定位到这个资源的路径</p><p>对于计算机中Web应用的绝对路径，则是指带访问协议的路径。即URL</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>相对路径,是指仅根据访问路径无法准确定位资源的路径。</p><p>相对路径必须要结合其参照路径才可组成可以准确定位资源的绝对路径。    </p><p>参照路径的不同，所形成的可以准确定位资源的绝对路径也是不同的。</p><p>在进行资源访问时,必须要将相对路径转换为绝对路径才可完成资源的精确定位</p><p><strong>绝对路径 = 参照路径 + 相对路径</strong></p><p>根据相对路径是否以斜杠开头，且路径指向的文件不同，其默认的参照路径是不一样的</p><h3 id="以斜杠开头的相对路径"><a href="#以斜杠开头的相对路径" class="headerlink" title="以斜杠开头的相对路径"></a>以斜杠开头的相对路径</h3><h4 id="前台路径"><a href="#前台路径" class="headerlink" title="前台路径"></a>前台路径</h4><p>所谓前台路径是指，由浏览器解析执行的代码中所包含的路径。</p><p>例如，html、 css、 js中的路径，及jsp文件中静态部分的路径(HTML标签中的路径)。html 及jsp文件中的&lt; img src-=*/&gt;、&lt; a href=””&gt;. &lt; form action=””&gt;等标签中的<strong>以斜杠开头的路径</strong>都属于前台路径</p><p>前台路径的<strong>参照路径</strong>是Web服务器的根路径,即<strong><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></strong></p><p>将前台路径转换为绝对路径的工作,是由浏览器自动完成的。</p><p>该路径的作用是要为用户提交对某种资源的请求,是要查找并定位服务器中的某资源。</p><p>简单来说,前台路径的作用是“查找”</p><h4 id="后台路径"><a href="#后台路径" class="headerlink" title="后台路径"></a>后台路径</h4><p>所谓后台路径是指，由服务器解析执行的代码及文件中所包含的路径。</p><p>例如，java 代码中的路径、jsp文件动态部分java代码块)中的路径、xml等配置文件中的路径(配置文件是要被java代码解析后加载到内存的，其中的路径会出现在Java 代码中)</p><p>后台路径的<strong>参照路径</strong>是Web应用的根路径。<a href="http://127.0.0.1:8080/projectName">http://127.0.0.1:8080/projectName</a></p><p>将后台路径转换为绝对路径的工作,是由服务器自动完成的。该路径的作用是标识出该资源在服务器中的路径，以便客户端能够按照这个设定路径来查找相应资源。简单来说,后台路径的作用是“标识”</p><h3 id="以路径开头的相对路径"><a href="#以路径开头的相对路径" class="headerlink" title="以路径开头的相对路径"></a>以路径开头的相对路径</h3><p>以路径名称开头的相对路径，无论是出现在前台页面,还是出现在后台Java代码或配置文件中，其<strong>参照路径</strong>都是<strong>当前访问路径的资源路径</strong>。</p><p>即使是response 的sendRedirect()方法的参数路径,若不以斜杠开头，其也属于“以斜杠开头的相对路径”类的路径，参照路径为当前服务器的根路径</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>相对路径类型</th><th>参照路径</th><th>相对路径转绝对路径的完成者</th></tr></thead><tbody><tr><td>前台路径</td><td>当前Web服务器的根路径</td><td>浏览器</td></tr><tr><td>后台路径</td><td>当前Web应用的根路径</td><td>Web服务器</td></tr><tr><td>以路径名称开头的路径</td><td>当前访问路径的资源路径</td><td>浏览器/Web服务器</td></tr></tbody></table><blockquote><p>PS：</p></blockquote><p>对于response的sendRedirect( )方法完成的重定向</p><p>若其参数路径为“以斜杠开头的相对路径”这个后台路径是个特例。是由sendRedirect( )方法的本质决定的。这个方法不仅可以完成在当前项目中资源的跳转,还可以跳转到其它项目中的资源。所以这个后台路径的参照路径为“<strong>当前Web服务器的根</strong>”。所以要加resquest.getContextPath();</p><p>注意，只有这一种重定向是特例,将来我们还会学习到其它方式实现的重定向，但那里的重定向就不是特例,而是遵循我们之前的路径转换理论</p><p><em><strong>如果加斜杠和不加斜杠都可以完成跳转，就加上斜杠</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-文件下载</title>
      <link href="/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>文件下载很简单，只要设置一下响应头即可</p><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        ul li &#123;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:&quot;</span>&gt;点击文字下载&lt;/a&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;fileList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;/fileDownLoad.do?fileName=$&#123;file&#125;&quot;</span>&gt;$&#123;file&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/fileDownLoad.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileDownLoad</span><span class="params">(String fileName,HttpServletRequest req,HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String realPath = req.getServletContext().getRealPath(<span class="string">&quot;\\download&quot;</span>)+<span class="string">&quot;\\&quot;</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath.concat(fileName));</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment; filename=&quot;</span>+ URLEncoder.encode(file.getName(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((len=fis.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    fis.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;filedownload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-文件上传</title>
      <link href="/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/01/31/SpringMVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先对于表单中的enctype属性做一个了解</p><ol><li>application/x-www=form-urlencoded:默认方式，只处理表单中的value的属性值，采用这种编码方式的表单会将表单域中的值处理成URL编码方式</li><li>multipart/form-data:这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会将文件域中的文件夜风撞到请求参数中</li><li>text/plain:除了把空格改为“+”号外，其他字符不做编码处理，这种方式适合直接通过表单来发送邮件</li></ol><p>文件上传是一个web项目中很常见的功能，在springmvc中有着很好的支持，但是springmvc默认上下文没有配置MultipartResolver，所以在做文件上传和下载前，需要配置MultipartResolver，</p><ol><li>在原有包的基础上导入此包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注册MultipartResolver实例，id必须为multipartResolver，id必须为multipartResolver，id必须为multipartResolver，不然报错</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>以下就不赘述springMVC的配置文件了</p></blockquote><h2 id="上传单个文件"><a href="#上传单个文件" class="headerlink" title="上传单个文件"></a>上传单个文件</h2><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;单个文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;avatar&quot;</span> id=<span class="string">&quot;avatar&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/singleFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">singleFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;avatar&quot;,required = false)</span> CommonsMultipartFile avatar,HttpServletRequest req, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">    String avatarWholeName = avatar.getOriginalFilename();</span><br><span class="line">    <span class="comment">//文件的后缀</span></span><br><span class="line">    String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">    <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">    String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">    <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">    String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">    <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">    avatar.transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;singleFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h2><p>其实和上传单个文件很像，只要input控件的name属性是一样的，那它们就是一组，下面来看看代码</p><p><strong>controller：</strong>（两法，个人偏向于第二种）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/multiFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;,required = false)</span> CommonsMultipartFile[] files,HttpServletRequest req, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload/multipart&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">        <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">        String avatarWholeName = files[i].getOriginalFilename();</span><br><span class="line">        <span class="comment">//文件的后缀</span></span><br><span class="line">        String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">        <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">        String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">        <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">        String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">        <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">        files[i].transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;multiFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/multiFileUpload.do&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">multiFileUploadDo</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String realPath = request.getServletContext().getRealPath(<span class="string">&quot;\\multipartUpload&quot;</span>)+<span class="string">&quot;\\&quot;</span>;</span><br><span class="line">    CommonsMultipartResolver cmr = <span class="keyword">new</span> CommonsMultipartResolver(request.getServletContext());</span><br><span class="line">    <span class="keyword">if</span>(cmr.isMultipart(request))&#123;</span><br><span class="line">        MultipartHttpServletRequest req = (MultipartHttpServletRequest) request;</span><br><span class="line">        MultiValueMap&lt;String, MultipartFile&gt; multiFileMap = req.getMultiFileMap();</span><br><span class="line">        <span class="keyword">for</span> (String fieldName : multiFileMap.keySet()) &#123;</span><br><span class="line">            String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//创建存放文件的文件夹</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(realPath + uuidPath + fieldName);</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">            List&lt;MultipartFile&gt; multipartFiles = multiFileMap.get(fieldName);</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile f : multipartFiles) &#123;</span><br><span class="line">                <span class="comment">//如果文件为空，则忽略，不然会报错</span></span><br><span class="line">                <span class="keyword">if</span>(!f.isEmpty())&#123;</span><br><span class="line">                    f.transferTo(<span class="keyword">new</span> File(dir.getPath()+<span class="string">&quot;\\&quot;</span>+f.getOriginalFilename()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;multiFileUpload&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/multiFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上都是同步提交，下面我们使用异步提交并且将图片预览出来，这次只演示单个文件上传，多个文件上传同理。</p><h2 id="异步提交并提供预览"><a href="#异步提交并提供预览" class="headerlink" title="异步提交并提供预览"></a>异步提交并提供预览</h2><p><strong>Controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/reg.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">reg</span><span class="params">(User user,String relativePath)</span></span>&#123;</span><br><span class="line">    user.setAvatarUrl(<span class="string">&quot;\\upload\\&quot;</span>.concat(relativePath));</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/singleFileUpload.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">singleFileUploadDo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;avatar&quot;,required = false)</span>CommonsMultipartFile avatar,</span></span></span><br><span class="line"><span class="params"><span class="function">                              HttpServletRequest req)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(avatar==<span class="keyword">null</span>||avatar.isEmpty())&#123;</span><br><span class="line">        map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//真实的保存上传文件的文件夹</span></span><br><span class="line">    String realSaveDirPath = req.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    File dir = <span class="keyword">new</span> File(realSaveDirPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件的全称，包括后缀</span></span><br><span class="line">    String avatarWholeName = avatar.getOriginalFilename();</span><br><span class="line">    <span class="comment">//文件的后缀</span></span><br><span class="line">    String suffix = avatarWholeName.substring(avatarWholeName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//这里可以对文件后缀做出一些逻辑处理，这里就不作处理了</span></span><br><span class="line">    <span class="comment">//这里为了保证文件名一定不一致，所以加入一个UUID随机值</span></span><br><span class="line">    String uuidPath = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    String realFileName = uuidPath.concat(avatarWholeName);</span><br><span class="line">    <span class="comment">//文件的真实保存全路径</span></span><br><span class="line">    String realSavePath = realSaveDirPath.concat(<span class="string">&quot;/&quot;</span>).concat(realFileName);</span><br><span class="line">    <span class="comment">//这里也可以自己用流读写</span></span><br><span class="line">    avatar.transferTo(<span class="keyword">new</span> File(realSavePath));</span><br><span class="line">    map.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//用来给页面显示图片</span></span><br><span class="line">    map.put(<span class="string">&quot;relativePath&quot;</span>,<span class="string">&quot;\\upload\\&quot;</span>.concat(realFileName));</span><br><span class="line">    <span class="comment">//用来给前端判断是否需要再次上传</span></span><br><span class="line">    map.put(<span class="string">&quot;fileName&quot;</span>,avatarWholeName);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;单个文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;form&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入用户名&quot;</span> name=<span class="string">&quot;userName&quot;</span> id=<span class="string">&quot;userName&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> placeholder=<span class="string">&quot;请输入年龄&quot;</span> name=<span class="string">&quot;age&quot;</span> id=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;avatar&quot;</span> id=<span class="string">&quot;avatar&quot;</span>&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;display: none&quot;</span> id=<span class="string">&quot;showimgcontainer&quot;</span>&gt;</span><br><span class="line">            &lt;img id=<span class="string">&quot;showimg&quot;</span> width=<span class="string">&quot;400px&quot;</span> height=<span class="string">&quot;400px&quot;</span> style=<span class="string">&quot;border: solid 1px black&quot;</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;submitBtn&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery.form.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    let fileName;</span><br><span class="line">let relativePath;</span><br><span class="line">    $(<span class="string">&#x27;#avatar&#x27;</span>).change(()=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(fileName===$(<span class="string">&#x27;#avatar&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>].name)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">let options = &#123;</span><br><span class="line">url: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/singleFileUpload.do&#x27;</span>,</span><br><span class="line">            dataType:<span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">            success(data)&#123;</span><br><span class="line">data = JSON.parse(data);</span><br><span class="line"><span class="keyword">if</span>(data.result===<span class="string">&#x27;fail&#x27;</span>)&#123;</span><br><span class="line">alert(<span class="string">&quot;文件为空或者不存在&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">relativePath = data.relativePath;</span><br><span class="line">fileName = data.fileName;</span><br><span class="line">$(<span class="string">&#x27;#showimgcontainer&#x27;</span>).show();</span><br><span class="line">$(<span class="string">&#x27;#showimg&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,relativePath);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">$(<span class="string">&#x27;#form&#x27;</span>).ajaxSubmit(options);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&#x27;#submitBtn&#x27;</span>).click(()=&gt;&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">            url: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/reg.do&#x27;</span>,</span><br><span class="line">            method:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data: &#123;relativePath:relativePath,userName:$(<span class="string">&#x27;#userName&#x27;</span>).val(),age:$(<span class="string">&#x27;#age&#x27;</span>).val()&#125;,</span><br><span class="line">            success(data) &#123;</span><br><span class="line"><span class="keyword">if</span>(data.result===<span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">                    alert(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">window.location = <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/login&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">&quot;出错！请重试！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-管理（了解即可）</title>
      <link href="/2022/01/31/Linux-%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF%EF%BC%89/"/>
      <url>/2022/01/31/Linux-%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><blockquote><p>简介</p></blockquote><p>在一开始的时候我们就提到，Linux是一个多用户的分时操作系统，任何一个需要使用系统资源的用户，都必须向系统管理员申请一个账号，然后以这个账号登录系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统资源的用户进行跟踪，并控制他们对资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护</p><p>   每个用户都拥有一个唯一的用户名和密码</p><p>对于账号的管理，主要有以下操作</p><ol><li><strong>用户账号的添加，删除和修改</strong></li></ol><p><u>增加用户</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -选项 用户名</span><br></pre></td></tr></table></figure><ul><li>选项</li></ul><p>-m 自动创建这个用户的主目录</p><p>-d 指定用户的主目录在哪</p><p>-c 指定一段注释</p><p>-g 指定该用户的用户组</p><p>-G 指定用户所属的附加组</p><p>-s shell文件，指定用户的登录shell</p><p>-u 用户号 ，如果有-o属性，则可以与其他人的标识号重复</p><ul><li>用户名</li></ul><p>指定用来登录的用户名</p><p><u>删除用户</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名 -g 分配组</span><br><span class="line"><span class="meta">#</span><span class="bash">删除用户的时候将其目录一并删除</span></span><br></pre></td></tr></table></figure><p><u>修改用户信息</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod</span><br></pre></td></tr></table></figure><p>创建的时候的一些参数，对应修改的内容的参数</p><p><u>修改用户密码</u></p><p>root用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br><span class="line">current password</span><br></pre></td></tr></table></figure><p><u>切换用户</u></p><p>root用户</p><ol><li>切换用户的命令是：su username</li><li>从普通用户切换到root用户，可以使用命令：sudo su</li><li>在终端输入exit或者logout的时或者快捷方式Ctrl+d（其实就是exit），可以退回原来账户</li><li>在切换用户的之后，如果也想切换新用户的工作环境，则可以再su和username之间加入一个-，比如su - root</li></ol><p>$代表普通用户</p><p>#代表超级用户，即root用户</p><p><u>锁定账户</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">锁定之后就不能登录了</span></span><br><span class="line">passwd -l 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash">清空该用户的密码，也不能登录</span></span><br><span class="line">passwd -d 用户名</span><br></pre></td></tr></table></figure><p><u>查看账户信息</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">用户名：口令(不可见为X)：用户标识号：组标识号：注释性描述：主目录：登录shell</span><br><span class="line">cat /etc/shadom</span><br><span class="line">查看加密的密码</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>用户组的管理</strong></li></ol><p>属主，属组</p><p>每个用户都有一个用户组，root用户可以对一个用户组的全部用户进行集中管理（开发组，运维组、、、）。不同的Linux系统对于用户组的规定有所不同，如Linux下的用户属于与他同名的组，这个用户组在创建用户的时候创建</p><p>用户组的管理涉及，用户组的添加，用户组的删除和修改。其实这些操作都是在对/etc/group的文件进行更新</p><p><u>创建一个用户组</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gruopadd 用户组名称</span><br></pre></td></tr></table></figure><p>创建用户组后可以得到一个id，可以通过-g参数指定该id</p><p><u>删除一个用户组</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组名称</span><br></pre></td></tr></table></figure><p><u>修改用户组权限信息和名字</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 用户组id -n 修改后用户组名称 用户组名称</span><br></pre></td></tr></table></figure><p><u>查看所有的用户组</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><blockquote><p>df [-h]，列出文件系统整体的磁盘使用量</p></blockquote><blockquote><p>du [-h]，检查当前磁盘的使用量</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -sm /*</span><br><span class="line"><span class="meta">#</span><span class="bash">检查根目录下每个文件占用的容量</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将外部设备filename挂载到/mnt/filename下来实现访问</span></span><br><span class="line">mount /dev/filename /mnt/filename</span><br><span class="line"><span class="meta">#</span><span class="bash">unmount -f强制卸载</span></span><br><span class="line">unmount -f [挂载位置]</span><br></pre></td></tr></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>1、每一个程序都有自己的一个进程，每个进程都有一个id号</p><p>2、每个进程都会有一个父进程</p><p>3、两种运行方式，前台运行，后台运行</p><p>4、一般情况下，服务都是后台运行的</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps 查看当前系统中正在执行的各种进程的信息</span><br></pre></td></tr></table></figure><p>ps -xx：</p><ul><li>-a 显示当前终端运行的所有的进程信息</li><li>-u 以用户的信息显示进程</li><li>-x 显示后台运行进程的参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有的进程</span></span><br><span class="line">ps -aux|grep mysql</span><br><span class="line">ps -aux|grep redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">|这个在Linux叫管道符  A|B</span></span><br><span class="line"><span class="meta">#</span><span class="bash">grep 过滤符合条件的字符串</span></span><br></pre></td></tr></table></figure><p>这里只要知道就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">可以查看父进程的信息</span></span><br><span class="line">ps -ef|grep mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">进程树，更推荐</span></span><br><span class="line">pstree </span><br><span class="line">-p 显示父id</span><br><span class="line">-u 显示用户组</span><br></pre></td></tr></table></figure><p>结束进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程id</span><br><span class="line"><span class="meta">#</span><span class="bash">如果有死循环了，就可以选择强制结束该进程</span></span><br></pre></td></tr></table></figure><h2 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h2><h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在/etc/sysconfig/network-scripts/目录下是配置网络的</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看IP地址，网络配置</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure><h3 id="往文件里面写入值"><a href="#往文件里面写入值" class="headerlink" title="往文件里面写入值"></a>往文件里面写入值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello&quot; &gt;&gt;filename</span><br></pre></td></tr></table></figure><h3 id="关于主机名称"><a href="#关于主机名称" class="headerlink" title="关于主机名称"></a>关于主机名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看主机名称</span></span><br><span class="line">hostname</span><br><span class="line"><span class="meta">#</span><span class="bash">修改主机名称</span></span><br><span class="line">hostname newhostname</span><br></pre></td></tr></table></figure><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在Linux中，链接分为软链接和硬链接</p><p>硬链接：A–B，B是A的硬链接，类似于拷贝了一份</p><p>可以这么理解，如果我把A删了，B也是可以访问到A这个文件</p><p>软链接：就是一种类似Windows下的快捷方式，A–B，B是A的软链接。</p><p>可以这么理解，如果我把A删了，则B无法再次访问A文件了</p><h4 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h4><p>基础命令：ln </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置B为A的硬链接，这时候的B是白色</span></span><br><span class="line">ln A B</span><br><span class="line"><span class="meta">#</span><span class="bash">设置C为A的软链接（又名符号链接），这时候的C是特殊颜色</span></span><br><span class="line">ln -s A C</span><br></pre></td></tr></table></figure><ul><li>会感觉这个硬链接和复制有点像，但是两者是有区别的</li></ul><p>链接文件，他们的内容是同步的<br>但是复制只是复制，不会同步数据</p><h3 id="端口有关操作"><a href="#端口有关操作" class="headerlink" title="端口有关操作"></a>端口有关操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前firewalld的状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开启端口，记得在阿里云配置安全组</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙服务</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim编辑器</title>
      <link href="/2022/01/31/Linux-vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2022/01/31/Linux-vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="vim编辑器"><a href="#VIM编辑器" class="headerlink" title="VIM编辑器"></a>VIM编辑器</h2><blockquote><p>什么是VIM编辑器</p></blockquote><p>VIM是从vi发展出来的一个文本编辑器，代码补全，编译，及错误跳转等功能特别丰富。Linux中必须会使用vim</p><h3 id="三种使用模式"><a href="#三种使用模式" class="headerlink" title="三种使用模式"></a>三种使用模式</h3><p>基本上vim/vi分为三种使用模式，分别是命令模式（Command mode）、输入模式（Insert mode）、底线命令模式（Last Line mode）</p><h4 id="命令模式command-mode"><a href="#命令模式（Command-mode）" class="headerlink" title="命令模式（Command mode）"></a>命令模式（Command mode）</h4><p>用户刚刚启动vim，便进入了命令模式</p><p>此状态下敲击键盘会被识别为命令，不会输入字符</p><p>以下为常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">切换到输入模式</td></tr><tr><td align="center">：</td><td align="center">切换到底线命令模式</td></tr><tr><td align="center">k或者上箭头</td><td align="center">光标向上移</td></tr><tr><td align="center">j或者下箭头</td><td align="center">光标向下移</td></tr><tr><td align="center">h或者左箭头</td><td align="center">光标向左移</td></tr><tr><td align="center">l或者右箭头</td><td align="center">光标向右移</td></tr><tr><td align="center">Ctrl+f</td><td align="center">向下移动一页，相当于pageDown</td></tr><tr><td align="center">Ctrl+b</td><td align="center">向上移动一页，相当于pageUp</td></tr><tr><td align="center">Ctrl+d</td><td align="center">向下移动半页</td></tr><tr><td align="center">Ctrl+u</td><td align="center">向上移动半页</td></tr><tr><td align="center">0/功能键[home]</td><td align="center">将光标移动到该行的开头处</td></tr><tr><td align="center">$/功能键[end]</td><td align="center">将光标移动到该行的结尾处</td></tr><tr><td align="center">H</td><td align="center">将光标移动到这个屏幕第一行的第一个字符所在的位置</td></tr><tr><td align="center">M</td><td align="center">将光标移动到这个屏幕中央的那一行的第一个字符所在的位置</td></tr><tr><td align="center">L</td><td align="center">将光标移动到这个屏幕最后一行的一个字符所在的位置</td></tr><tr><td align="center">G</td><td align="center">将光标移动到这个屏幕最后一行的一个字符所在的位置</td></tr><tr><td align="center">nG</td><td align="center">n代表数字，表示移动到该文件的第几行</td></tr><tr><td align="center">gg</td><td align="center">移动到这个文件的第一行</td></tr><tr><td align="center">n&lt;回车&gt;</td><td align="center">光标向下移动n个字符（单独摁空格光标向下移动一个字符）</td></tr><tr><td align="center">n&lt;退格键&gt;</td><td align="center">光标向左移动n个字符（单独摁退格键光标向左移动一个字符）</td></tr><tr><td align="center"><strong>n&lt;空格&gt;</strong></td><td align="center"><strong>光标向右移动n个字符（单独摁空格光标向右移动一个字符）</strong></td></tr></tbody></table><h5 id="替换搜索"><a href="#替换搜索" class="headerlink" title="替换搜索"></a>替换搜索</h5><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>/ keyword</strong></td><td align="center"><strong>向下查询字符串keyword</strong></td></tr><tr><td align="center">？keyword</td><td align="center">向上查询字符串keyword</td></tr><tr><td align="center"><strong>n</strong></td><td align="center"><strong>继续当前的查询动作</strong></td></tr><tr><td align="center">N</td><td align="center">反向进行当前的查询动作</td></tr></tbody></table><h5 id="删除-复制-黏贴"><a href="#删除、复制、黏贴" class="headerlink" title="删除、复制、黏贴"></a>删除、复制、黏贴</h5><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">x ，X</td><td align="center">删除当前光标所在的字符</td></tr><tr><td align="center">nx</td><td align="center">n为数字，连续向后删除n个字符</td></tr><tr><td align="center">&lt;数字&gt;dd/D</td><td align="center">删除光标所在的那n整行(默认n为1)</td></tr><tr><td align="center">d1G</td><td align="center">删除光标所在到第一行的所有数据</td></tr><tr><td align="center">dG</td><td align="center">删除光标所在到最后一行的所有数据</td></tr><tr><td align="center">d$</td><td align="center">删除所在光标到该行最后</td></tr><tr><td align="center">d0</td><td align="center">删除所在光标到该行开头</td></tr><tr><td align="center">&lt;数字&gt;yy</td><td align="center">复制那一整行（默认n为1）</td></tr><tr><td align="center">y1G</td><td align="center">复制光标所在行到第一行的所有数据</td></tr><tr><td align="center">yG</td><td align="center">复制光标所在行到最后一行的所有数据</td></tr><tr><td align="center">y0</td><td align="center">复制光标所在到该行的开始位置</td></tr><tr><td align="center">y$</td><td align="center">复制光标所在到该行的结束位置</td></tr><tr><td align="center">p，P</td><td align="center">p将复制的数据在光标的下一行黏贴，P将复制的数据在光标的上一行黏贴</td></tr><tr><td align="center">J</td><td align="center">将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="center">Ctrl+r</td><td align="center">重做</td></tr><tr><td align="center"><strong>u</strong></td><td align="center"><strong>撤销</strong></td></tr></tbody></table><h5 id="从命令模式切换到输入模式的其他命令"><a href="#从命令模式切换到输入模式的其他命令" class="headerlink" title="从命令模式切换到输入模式的其他命令"></a>从命令模式切换到输入模式的其他命令</h5><table><thead><tr><th align="center">命令</th><th></th></tr></thead><tbody><tr><td align="center"><strong>i、I</strong></td><td><strong>i为在当前光标处进入输入模式，I为在当前光标所在行的第一个字符所在处进入输入模式</strong></td></tr><tr><td align="center">a、A</td><td>a为在当前光标的下一个字符处进入输入模式，A为在当前光标所在行的最后一个字符所在处进入输入模式</td></tr><tr><td align="center">o、O</td><td>o为在当前光标所在行的下一行输入一个新的一行，O为在当前光标所在行的上一行输入一个新的一行</td></tr><tr><td align="center">r、R</td><td>进入取代模式，r为只取代一次，R为一直取代直到按下esc</td></tr><tr><td align="center"><strong>esc</strong></td><td><strong>退出到命令模式</strong></td></tr></tbody></table><h4 id="输入模式insert-mode"><a href="#输入模式（Insert-mode）" class="headerlink" title="输入模式（Insert mode）"></a>输入模式（Insert mode）</h4><p>在此模式下，可以使用以下按键</p><p>这些操作和我们平时用的是一样的</p><h4 id="底线命令模式last-line-mode"><a href="#底线命令模式（Last-Line-mode）" class="headerlink" title="底线命令模式（Last Line mode）"></a>底线命令模式（Last Line mode）</h4><p>在此模式下，我们的光标会移动到最底下，就可以输入一些命令了</p><table><thead><tr><th align="center">命令</th><th></th></tr></thead><tbody><tr><td align="center">:w</td><td>保存</td></tr><tr><td align="center">:w！</td><td>若文件为只读属性，强制写入，跟权限有关</td></tr><tr><td align="center">:q</td><td>退出vim</td></tr><tr><td align="center">:q!</td><td>不保存退出</td></tr><tr><td align="center">!在vim中一般表示强制的意思</td><td></td></tr><tr><td align="center"><strong>:wq</strong></td><td><strong>保存退出</strong></td></tr><tr><td align="center">:ZZ</td><td>如果档案没有改动，则不储存离开，若修改了，则储存后离开</td></tr><tr><td align="center">:w[filename]</td><td>另存为到另一个文件</td></tr><tr><td align="center">:r[filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦将filename中的内动追加到光标所在行的后面</td></tr><tr><td align="center">:n1,n2 w[filename]</td><td>将n1到n2的数据存储到filename这个文件中</td></tr><tr><td align="center">:!command</td><td>暂时离开vim执行command命令，【例如：:! ls /home】</td></tr><tr><td align="center"><strong>:set nu</strong></td><td><strong>显示行号</strong></td></tr><tr><td align="center">:set nonu</td><td>取消显示行号</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件操作</title>
      <link href="/2022/01/31/Linux-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/01/31/Linux-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统no的安全性，Linux系统对于不同的用户访问同一文件夹的权限做出了规定</p><p>先前我们使用<code>ls -al</code>查看了文件属性，我们现在来看看这些开头的字符到底是什么意思吧</p><img src="/2022/01/31/Linux-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png" class title="文件属性"><p>我们将每一行分为六组来看</p><blockquote><p>第一组</p></blockquote><p>这一组固定一共十个字符，拆分为第一个字符和后9个字符来看</p><p>第一个字符的含义</p><ul><li><strong>[d]代表目录</strong></li><li><strong>[-]代表文件</strong></li><li><strong>[l]代表这是一个链接文档（link file）</strong></li><li>[b]代表装置文件，里面可能有供存储的接口设备</li><li>[c]代表专职文件里面的串行端口设备，例如键盘或者鼠标</li></ul><p>后九个字符的含义</p><p>接下来的字符中以三个为一组，且均是以[rwx]的三个参数的组合</p><p>r–》read读操作</p><p>w–》write写操作</p><p>x–》execute执行操作</p><p>如果对应位置没有权限，就会出现-号</p><p>第一组为属主的权限（该文件的所有者）</p><p>第二组为属组的权限（所有者的同组用户）</p><p>第三组为其他用户的权限（其他用户）</p><blockquote><p>第二组</p></blockquote><p>如果该项是文件夹，该数字表示文件夹中的包含文件数</p><p>如果是文件，则显示1</p><blockquote><p>第三组</p></blockquote><p>第一个参数表示属主</p><p>第二个参数表示属组（root组）</p><blockquote><p>第四组</p></blockquote><p>文件大小</p><blockquote><p>第五组</p></blockquote><p>创建时间</p><blockquote><p>第六组</p></blockquote><p>文件名</p><h3 id="修改文属性件"><a href="#修改文属性件" class="headerlink" title="修改文属性件"></a>修改文属性件</h3><h4 id="更改文件属组"><a href="#更改文件属组" class="headerlink" title="更改文件属组"></a>更改文件属组</h4><p>基础命令：chgrp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><h4 id="更改文件属主也可以同时更改文件属组"><a href="#更改文件属主，也可以同时更改文件属组" class="headerlink" title="更改文件属主，也可以同时更改文件属组"></a>更改文件属主，也可以同时更改文件属组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h4 id="更改文件九大属性"><a href="#更改文件九大属性" class="headerlink" title="更改文件九大属性"></a>更改文件九大属性</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chomd [-R] xyz 文件或者目录 </span><br></pre></td></tr></table></figure><p>Linux文件系统属性有两种设置方法，一种数字，一种符号。</p><p>Linux文件的基本权限有九个，分别是owner/group/others三种身份各自有自己的read/write/execute权限</p><p>文件的权限字符是[rwxrwxrwx]，这九个权限是三三一组的！我们可以使用数字来代表各个权限，各个权限的分数对照表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4   w:2   x:1</span><br></pre></td></tr></table></figure><p>每种身份（owner/group/others）各自的三个权限（r/w/x）分数是需要累加的，举个栗子：[rwxrwx—]</p><ul><li>owner = rwx = 4 + 2 + 1= 7</li><li>group = rwx = 4 + 2 + 1= 7</li><li>others = —  = 0</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><p>Linux系统中使用以下命令来查看文件的内容</p><ul><li>cat 由第一行开始显示文件的内容</li><li>tac 由最后一行开始显示文件的内容</li><li>nl 显示的时候，输出行号</li><li>more 一页一页的显示文件的内容<ul><li>空格翻页，enter代表向下看一行，:f代表当前行数，退出查看输入q，向下查询字符串使用命令<code>/要查找的字符串</code>向上查询使用命令<code>?要查找的字符串</code>，n代表继续搜寻下一个，N代表继续搜寻上一个</li></ul></li><li>less 与 more相似，但是他可以往前翻页<ul><li>上下键代表向上下翻页</li></ul></li><li>head 只查看前几行<ul><li>通过  -n 参数可以控制查看几行</li></ul></li><li>tail 只查看尾巴几行<ul><li>通过  -n 参数可以控制查看几行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-目录操作</title>
      <link href="/2022/01/31/Linux-%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/01/31/Linux-%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>以下是对这些目录的解释</p><ul><li><strong>/bin:</strong>  bin是Binary的缩写，这个目录存放着最经常使用的命令</li><li><strong>/boot:</strong>  这里存放的是启动Linux的时候使用的一些核心文件（不要动）</li><li><strong>/dev:</strong>  dev是Device的缩写，存放的是Linux的外设设备，</li><li><strong>/etc:</strong>  <strong>这个目录是用来存放所有的系统管理所需要的配置文件和子目录</strong></li><li><strong>/home:</strong>  <strong>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是使用用户的账号来命名的</strong></li><li><strong>/lib:</strong>  这里存放着系统最基本的动态连接共享库（不要动）</li><li><strong>/lost+found:</strong>  这个目录一般是空的，但是当服务器意外关闭的时候，里面会存在一些错误文件（不要动）</li><li><strong>/media:</strong>  Linux系统会自动识别一些设备，例如u盘，光驱等等</li><li><strong>/mnt:</strong>  这个目录是给用户来临时挂载别的文件系统的（后面会把本地文件挂载在这个目录下）</li><li><strong>/opt:</strong>  <strong>给主机额外安装软件所在的目录</strong></li><li><strong>/proc:</strong>  这是一个虚拟的目录，他是系统内存的映射，我们可以通过直接访问这个目录来获得系统信息（不用管）</li><li><strong>/root（也就是  ~ ）:</strong>  该目录是系统管理员目录，也称作超级权限者的用户主目录</li><li><strong>/sbin:</strong>  s就是super的意思，这里存放的是系统管理员使用的系统管理程序</li><li><strong>/srv:</strong>  该目录用来存放一些守护进程启动之后需要提取的数据</li><li><strong>/sys:</strong>  这是Linux2.6内核的一个很大的改变，该目录下安装了2.6内核中新出现的一个文件系统sysfs</li><li><strong>/tmp:</strong>  <strong>这个目录使用来存放一些临时文件的</strong></li><li><strong>/usr:</strong>  <strong>这个目录用来存放用户的应用程序和文件</strong></li><li><strong>/usr/bin:</strong>  系统用户使用的应用程序</li><li><strong>/usr/sbin:</strong>   超级用户使用的比较高级的管理程序和系统守护进程</li><li>**/usr/src: **  内核源代码默认存放的地址</li><li><strong>/var:</strong>  <strong>这个目录用来存放着一些不断在拓充的东西，习惯性的将一些经常修改的目录放在该目录下</strong></li><li><strong>/run:</strong>  是一个临时文件系统，存储系统启动以来的信息，当系统重启时，该目录下的文件应该被删掉（不用管）</li><li><strong>/www:</strong>  存放服务器网站的相关的资源，环境，网站</li></ul><blockquote><p>不是每一个目录都一定会存在</p></blockquote><h3 id="关机指令"><a href="#关机指令" class="headerlink" title="关机指令"></a>关机指令</h3><p>基础指令：shutdown</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将数据同步到硬盘（关机前必须做）</span></span><br><span class="line">sync</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">服务器在十分钟后关机</span></span><br><span class="line">shutdown -h 10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立即关机</span></span><br><span class="line">shutdown -h now</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在20:35关机</span></span><br><span class="line">shutdown -h 20:35</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立马重启</span></span><br><span class="line">shutdown -r now</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">立马重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><p>基础指令：cd</p><p>首先要知道这两个概念</p><ol><li>决定路径</li><li>相对路径</li></ol><p>绝对路径：指的是资源的全路径，比如<code>D:\APP\Typora</code></p><p>相对路径：指的是资源在当前目录下的路径，比如我现在在<code>D:\APP</code>目录下，我要定位到Typora这个目录，我可以直接使用Typora来表示该文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入根路径下的usr目录</span></span><br><span class="line">cd /usr</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">当前在根路径下，我要进入usr目录</span></span><br><span class="line">cd usr</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">返回上一级目录</span></span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><h2 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h2><p>基础指令：ls</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有的文件，包括隐藏文件，简写形式</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">以列表方式查看所有的文件的属性和权限，不包括隐藏文件</span></span><br><span class="line">ls -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Linux中命令可以组合</span></span><br><span class="line"><span class="meta">#</span><span class="bash">以列表方式查看所有的文件，包括隐藏文件</span></span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="创建一个目录"><a href="#创建一个目录" class="headerlink" title="创建一个目录"></a>创建一个目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建多级目录</span></span><br><span class="line">mkdir -p test1/test2/test3</span><br></pre></td></tr></table></figure><h3 id="删除一个目录"><a href="#删除一个目录" class="headerlink" title="删除一个目录"></a>删除一个目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除一个空目录</span></span><br><span class="line">rmdir test1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除多级文件</span></span><br><span class="line">rmdir -p test1/test2/test3</span><br></pre></td></tr></table></figure><h3 id="复制一个目录"><a href="#复制一个目录" class="headerlink" title="复制一个目录"></a>复制一个目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 源文件 目的文件夹</span><br></pre></td></tr></table></figure><h3 id="查看当前目录路径"><a href="#查看当前目录路径" class="headerlink" title="查看当前目录路径"></a>查看当前目录路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文件呈白色代表它是一个文件，如果是蓝色，代表它是一个文件夹</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><h3 id="移除目录或者文件"><a href="#移除目录或者文件" class="headerlink" title="移除目录或者文件"></a>移除目录或者文件</h3><p>基础命令：rm</p><p>-f 忽略不存在的文件，不会出现警告，强制删除</p><p>-r 递归删除根目录</p><p>-i 互动，删除询问是否删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf install.sh</span><br></pre></td></tr></table></figure><h3 id="移动目录或者文件"><a href="#移动目录或者文件" class="headerlink" title="移动目录或者文件"></a>移动目录或者文件</h3><p>基础命令：mv</p><p>-f 强制</p><p>-u 只替换已经更新过的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv 源文件 目标文件夹</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重命名dir1为dir2</span></span><br><span class="line">mv dir1 dir2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-简介</title>
      <link href="/2022/01/29/Linux-%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/01/29/Linux-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><p>其实Linux这个词本身指的是Linux内核。</p><p>我们所说的Linux操作系统其实是基于Linux内核的操作系统，就是Linux的发行版。</p><p>目前市面上比较知名的是：Ubuntu、RedHat、CnetOS、Oracle Linux等等</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>准备一个Linux系统的服务器</li></ol><p>如果没有经济基础，可以使用VMware，自己创建一个虚拟机用来学习。</p><p>这里建议大家去阿里云或者腾讯云购买一个服务器用来学习，这样的环境更真实，并且也不是很贵，具体如何购买，这里就不赘述了，可以自行到b站搜一搜。</p><ol start="2"><li>工具</li></ol><p>这里要下载两个工具，一个叫XShell，另一个叫XFtp。</p><p>XShell是用ssh来远程连接你购买的服务器。</p><p>XFtp是用来上传本地文件的。</p><p>这里我把安装包分享一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接:https://pan.baidu.com/s/1AgF6l1Bn74QGMpkwQRIHqA </span><br><span class="line">提取码:hr1x</span><br></pre></td></tr></table></figure><p>通常服务器会在一开始搭建一些环境，有这两种比较流行的组合</p><ul><li><p>LAMP(Linux+Apache+MySQL+PHP)</p></li><li><p>LNMP(Linux+Nginx+MySQL+PHP)（推荐）</p></li></ul><p>这里嫌麻烦的可以安装一个宝塔，一键部署。</p><h2 id="走进linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h2><p>开机会启动许多程序，在windows中我们叫它服务（“Service”），在Linux中我们叫它守护进程（“daemon”）</p><p>在Linux中记住两句话</p><ol><li>一切皆文件，根目录是/</li><li>最高权限为root，可以操作一切</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-JSON</title>
      <link href="/2022/01/29/SpringMVC-JSON/"/>
      <url>/2022/01/29/SpringMVC-JSON/</url>
      
        <content type="html"><![CDATA[<h3 id="jsonjavascript-object-notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON(JavaScript Object Notation)"></a>JSON(JavaScript Object Notation)</h3><p>JSON是一种十分轻量级的数据交换的格式，我们来讲一下处理JSON字符串的两个库</p><ol><li>Jackson</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将对象转为JSON字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String json = mapper.writeValueAsString(user);</span><br></pre></td></tr></table></figure><p>这时候，页面再次出现乱码问题</p><p>第一种原生的解决方案是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>第二种使用springmvc的配置文件，这段配置只针对jackson库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那我们怎么处理时间对象呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">ObjectMapping objectMapping = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">return</span> objectMapping.writeValueAsString(date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的是当时的时间戳</span></span><br></pre></td></tr></table></figure><p>下面是第一种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().writeValueAsString(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/datejson2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonDate2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>FastJson</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要的三个类</p><ol><li>JSONObject</li></ol><p>对应JSON对象，可以使用get方法获取JSON对象的值</p><ol start="2"><li>JSONArray</li></ol><p>代表JSON数据</p><ol start="3"><li>JSON代表JSONarray和JSONObject的转化</li></ol><p>主要用这个类的静态方法去转化JSON字符串和对象</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-Controller</title>
      <link href="/2022/01/29/SpringMVC-Controller/"/>
      <url>/2022/01/29/SpringMVC-Controller/</url>
      
        <content type="html"><![CDATA[<h3 id="controller控制器"><a href="#Controller控制器" class="headerlink" title="Controller控制器"></a>Controller控制器</h3><p>和mybatis不同，在springmvc中，注解开发才是主流，所以接下来都会使用注解来开发。</p><p>被@Controller标注的类是一个控制器类，其中的每一个方法都是一个控制器，都各自映射一个url地址</p><p>在spring中我们说过，使用注解的时候需要在spring的配置文件中开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lizhi.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里最好写到controller包，因为该配置文件专注于处理Controller层的事情，不要将包扫描的范围扩大--&gt;</span></span><br></pre></td></tr></table></figure><p>回顾spring中的常用注册bean的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>       普通组件</span><br><span class="line"><span class="meta">@Service</span>         服务层</span><br><span class="line"><span class="meta">@Repository</span>      持久层</span><br><span class="line"><span class="meta">@Mapper</span>          mybatis的接口层</span><br><span class="line"><span class="meta">@Controller</span>      控制器层</span><br></pre></td></tr></table></figure><p>因为我们配置的DispatcherServlet会拦截所有的请求，但是对于静态资源，我们不需要拦截对他做出处理，所以有了以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   Springmvc不处理静态文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="requestmapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p>该注解可以作用于类上面或者方法上面</p><ol><li>方法上面</li></ol><p>该方法映射的url地址即为注解中的值</p><ol start="2"><li>类上面</li></ol><p>当其作用在类上面的时候，该控制器类中所有的方法的映射路径的前面都会加上该注解中的值</p><p>@GetMapping  该注解代表请求是get请求</p><p>@PostMapping  该注解代表请求是post请求</p><p>@PutMapping 该注解代表请求是put请求</p><p>@DeleteMapping该注解代表请求是delete请求</p><h4 id="restcontroller"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>当类上不是@Controller注解而是@RestController时候，该类中所有的方法返回的值，不会跳转视图，而是返回JSON字符串</p><p>如果不想让类中所有的方法都返回字符串</p><p>则类上面使用@Controller注解，方法上使用@ResponseBody标注此方法返回的结果是一个JSON字符串不要被视图解析器解析</p><h4 id="restful风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h4><p>概念：RestFul就是一个资源定位及资源操作的风格。</p><p>它不是标准也不是协议，它就只是一个style。基于这种风格设计的软件可以更加简洁，更有层次，并且安全，更易于实现缓存等机制</p><blockquote><p>传统方式操作资源通过不用的参数来实现不同的功能，方法单一，post和get</p></blockquote><ul><li>http:/locoalhost:8080/item/insertItem  post提交</li><li>http:/locoalhost:8080/item/deleteitem get提交</li><li>http:/locoalhost:8080/item/queryItem get提交</li><li>http:/locoalhost:8080/item/updateitem post提交</li></ul><blockquote><p>使用RestFul风格操作资源</p></blockquote><ul><li>http:/locoalhost:8080/item/add/参数/参数/…</li><li>http:/locoalhost:8080/item/update/参数/…</li><li>http:/locoalhost:8080/item/query/参数/…</li><li>http:/locoalhost:8080/item/update/参数/…</li></ul><p>本质其实就是通过不同的提交方式走不同的方法</p><h4 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h4><p>控制器最后直接return字符串的话默认请求转发</p><p>如果想要重定向字符串前面加“**redirect:**”即可</p><h4 id="处理前端数据"><a href="#处理前端数据" class="headerlink" title="处理前端数据"></a>处理前端数据</h4><ol><li><p>如果提交参数的名称和方法的参数名一致的话，</p><p>提交数据：<a href="http://localhost:8080/user/add?name=lizhi&amp;age=20">http://localhost:8080/user/add?name=lizhi&amp;age=20</a></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(String name,<span class="keyword">int</span> age,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>如果提交参数和方法参数不一致的话</p><p>提交数据：<a href="http://localhost:8080/user/add?username=lizhi&amp;userage=20">http://localhost:8080/user/add?username=lizhi&amp;userage=20</a></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name,<span class="meta">@RequestParam(&quot;userage&quot;)</span><span class="keyword">int</span> age,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果提交的是一个对象</p><p>提交数据：<a href="http://localhost:8080/user/add">http://localhost:8080/user/add</a></p><p>要求提交的表单要和属性的属性名一致，方法参数即可直接使用对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;user/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(User user,Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回前端数据"><a href="#返回前端数据" class="headerlink" title="返回前端数据"></a>返回前端数据</h4><ol><li>ModelAndView</li></ol><p>该对象在初识mvc的时候已经见过，不再赘述</p><ol start="2"><li>Model（这是一个接口）</li></ol><p>该对象在使用注解开发的时候也已经见过，这里也不再赘述</p><ol start="3"><li>ModelMap</li></ol><p>ModelMap实现了Model接口，继承了LinkedHashMap，所以它更强大，但是大部分情况下Model会更常用</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-简述</title>
      <link href="/2022/01/29/SpringMVC-%E7%AE%80%E8%BF%B0/"/>
      <url>/2022/01/29/SpringMVC-%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="spring-mvc"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="model-1时代"><a href="#Model-1时代" class="headerlink" title="Model 1时代"></a>Model 1时代</h3><p>所有请求直接转发到jsp然后在jsp编写业务代码，然后根据不同的结果跳转不同的页面</p><h3 id="model-2时代"><a href="#Model-2时代" class="headerlink" title="Model 2时代"></a>Model 2时代</h3><p>Controller</p><ol><li>取得表单数据</li><li>处理业务逻辑</li><li>根据不同的情况跳转不同的页面</li></ol><p>View</p><ol><li>展示数据</li></ol><p>Model</p><ol><li>业务逻辑</li><li>保存数据</li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SpringMVC的特点：</p><ol><li>轻量级，简单易学</li><li>与spring无缝结合，可以将mvc中所有需要的类注册到ioc容器中</li><li>高效，基于请求和响应的mvc框架</li><li>功能强大，RESTFUL风格，格式化，数据验证</li><li>约定大于配置</li></ol><p>说白了学它就一个原因，因为它让我们开发变得简单了</p><p><strong>原理</strong></p><h4 id="回顾servlet"><a href="#回顾servlet" class="headerlink" title="回顾servlet"></a>回顾servlet</h4><p>我们都学过java web，那时候我们对于前端的请求都是通过一个servlet来处理的，然后在servlet里面，处理前端传来的数据，调用业务逻辑，返回处理之后的数据，然后servlet根据这些数据，进行重定向或者请求转发</p><p>一个请求对应一个servlet，这就会导致我们在开发中写了大量的servlet，而且每次都需要在web.xml中注册，十分繁琐。</p><hr><p>没有什么是加一层解决不了的，所以，springmvc在servlet之前加了一层来简化我们的开发</p><p>SpringMVC的web框架是以围绕DispatcherServlet（前端控制器，调度器，请求分发器）设计的。它的作用就是将请求分发到不同的处理器（方法或者类，下面的初识mvc是以类级作为处理器，但是一般都会使用方法级去做处理器）</p><p>下图是DispatcherServlet的结构图，我们可以看到一些在javaweb阶段比较眼熟的类，比如Servlet，GenericServlet，HttpServlet。因此我们可以得出，DispatcherServlet本质就是一个和我们当时写的servlet是一样的，只是他帮我们做了很多事情。</p><p>人到中年有三大件，枸杞大枣保温杯。</p><p>SpringMVC中也有三大件，分别是</p><ul><li>处理器映射器（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li></ul><p>我们来看看这三大件是如何在springmvc中发挥作用的，原理图如下：</p><p><strong>核心类图</strong></p><p><strong>简要分析</strong></p><ol><li>DispatcherServlet就可以简单理解为前端控制器，他会将所有客户端的请求拦截</li><li>将该请求发送给HandlerMapping实现类，该实现类根据url查找到对应的控制器，将结果返回给DispatcherServlet</li><li>DispatcherServlet根据HandlerMapping解析的结果，适配并执行对应的控制器的逻辑，</li><li>控制器返回信息，HandlerAdapter实现类接收该信息并将其解析成ModelAndView对象返回到DispatcherServlet</li><li>DispatcherServlet调用ViewResolver实现类将HandlerAdapter实现类传回来的视图逻辑和模型解析</li><li>视图解析器将解析后的逻辑视图名传回DispatcherServlet</li><li>DispatcherServlet根据解析后的视图名称找到该视图</li><li>渲染视图，返回页面，作出响应</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-拦截器</title>
      <link href="/2022/01/28/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/01/28/SpringMVC-%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="springmvc中的拦截器"><a href="#SpringMVC中的拦截器" class="headerlink" title="SpringMVC中的拦截器"></a>SpringMVC中的拦截器</h2><p>其实此拦截器就是我们在javaweb阶段使用的过滤器，只不过是换了一个名字而已，换汤不换药，本质是一样的。</p><p>只不过拦截器是AOP思想的具体应用</p><p>过滤器：</p><ul><li>Servlet规范中的一部分，任何javaweb工程都可以使用</li><li>在url-pattern中配置了/*后，会拦截所有的请求</li></ul><p>拦截器：</p><ul><li>拦截器是SpringMVC中才会有的，只有使用了此框架的工程才可以使用</li><li>拦截器只会拦截访问的控制器方法，如果访问的是静态资源是不会进行拦截的</li></ul><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><p>实现HandlerInterceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return true才会执行下一个拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===处理前===&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===处理后===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===清理===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Spring核心文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/**会拦截这个请求下面的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lizhi.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-乱码</title>
      <link href="/2022/01/28/SpringMVC-%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/01/28/SpringMVC-%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="乱码一生之敌"><a href="#乱码！一生之敌！！！" class="headerlink" title="乱码！一生之敌！！！"></a>乱码！一生之敌！！！</h3><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lizhi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login.do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/user/login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">name:$&#123;user.name&#125;</span><br><span class="line">age:$&#123;user.age&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p>我们先尝试一下配置一个过滤器，这是第一种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharsetFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得去web.xml中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lizhi.filter.CharsetFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们尝试后发现，没有任何效果，那既然我们写的过滤器不行</p><p>那springmvc给我们写了一个<strong><em>专门</em>处理乱码</strong>的过滤器，我们来配置一下，这是第二种方案，很稳妥</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试后发现，还是乱码！！这时候我们可以去看一下tomcat的config目录下的server.xml，找到connector标签并修改属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>发现还是不行，我们去找一个其他大佬自己写的过滤器试一试，这是第三种方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//处理response的字符编码</span></span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletRequest myreq = <span class="keyword">new</span> MyRequest(req);</span><br><span class="line">        filterChain.doFilter(myreq, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;post&quot;</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;get&quot;</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="keyword">if</span>(!hasEncode)&#123;</span><br><span class="line">                <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                    String[] values = parameterMap.get(parameterName);</span><br><span class="line">                    <span class="keyword">if</span>(values!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">try</span>&#123;</span><br><span class="line">                                values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hasEncode = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parameterMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        String[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span>(values==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        Map&lt;String,String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        <span class="keyword">return</span> parameterMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果测试发现，还是不对！其实乱码的问题到这里一般都会解决了，但是为什么还是不行呢？</p><p>其实是在注册filter的时候就出错了，接下来看下面的正确配置，大家可以看一下有什么区别，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>otherEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.lizhi.filter.EncodeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>otherEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有的小伙伴可能在一开始就看出来了，没错，就是<code>&lt;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&gt;</code>这里的拦截路径我们应该使用<code>/*</code>而不是<code>/</code></p><p>两者有什么区别呢？</p><p>前者是拦截一切请求，包括jsp</p><p>而后者会拦截除了jsp的所有资源</p><p>相信吃了这次亏，大家之后就再也不会忘记这个坑了！而且也了解了大部分乱码问题的解决方案！</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC-第一个SpringMVC工程</title>
      <link href="/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/"/>
      <url>/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="初识springmvc"><a href="#初识SpringMVC" class="headerlink" title="初识SpringMVC"></a>初识SpringMVC</h3><p><strong>第一步：创建普通maven工程</strong></p><p><strong>第二步：导入所需依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：添加web支持</strong></p><img src="/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/%E6%B7%BB%E5%8A%A0web%E6%94%AF%E6%8C%81.png" class title="添加web支持"><img src="/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/web%E6%A1%86%E6%9E%B6%E6%94%AF%E6%8C%81.png" class title="web框架支持"><p><strong>第四步：在web.xml中配置DispatcherServlet</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第五步：在资源路径下创建springmvc-servlet.xml配置文件，配置处理器映射器，处理器适配器，视图解析器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lizhi.controller.HelloServlet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第六步：创建HelloController实现Controller接口，并注册，id为路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第七步：</strong>在WEB-INF文件夹下创建jsp文件夹，在jsp文件夹中创建hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>第八步：启动tomcat测试</strong></p><h3 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h3><p><strong>前四步如上</strong></p><p><strong>第五步：在springmvc-servlet中开启注解支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lizhi.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   Springmvc不处理静态文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">支持springmvc注解驱动</span></span><br><span class="line"><span class="comment">在spring中一般采用@RequestMapping来完成映射关系</span></span><br><span class="line"><span class="comment">要想让注解生效，则必须要向上下文注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">和一个AnnotationMethodHandlerMapping实例</span></span><br><span class="line"><span class="comment">这两个处理器分别是类级别和方法级别的</span></span><br><span class="line"><span class="comment">而annotation-driven则帮助我们自动完成了这两个类的配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第六步：创建Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lizhi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//model对象是页面模型，可以在此对象中放入业务返回的前端需要的数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请登录&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第七步：在WEB-INF文件夹下创建jsp文件夹，在jsp文件夹中创建login.jsp</strong></p><p><strong>第八步：启动tomcat测试</strong></p><hr><blockquote><p>如果出现404或者500错误可，尝试以下两种解决方案</p></blockquote><ol><li>在pom.xml中加入此段配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出出现的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在artifact中加入lib目录，并将所需jar包导入其中</li></ol><img src="/2022/01/28/SpringMVC-%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E5%B7%A5%E7%A8%8B/%E6%B7%BB%E5%8A%A0lib%E7%9B%AE%E5%BD%95.png" class title="添加lib目录"><hr>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis映射器文件</title>
      <link href="/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="映射器文件"><a href="#映射器文件" class="headerlink" title="映射器文件"></a>映射器文件</h2><p>mybatis的真正强大之处就在于它的语句映射。</p><p>正是因为此映射器文件，才使我们减少了将近95%的JDBC代码，使我们更专注于书写SQL语句</p><p>映射器文件只有这些顶级元素</p><ul><li>cache</li><li>cache-ref</li><li>delete</li><li>insert</li><li>resultMap</li><li>select</li><li>sql</li><li>update</li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>该标签对标SQL语句的DQL语句，也就是select语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个select语句映射namespace绑定的接口中的listTeachers方法</p><p>resultType定义返回值类型</p><p>#{id}是取到方法传入的参数</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>resultType</code></td><td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>resultMap</code></td><td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>useCache</code></td><td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr></tbody></table><h3 id="insertupdate和delete"><a href="#insert，update和delete" class="headerlink" title="insert，update和delete"></a>insert，update和delete</h3><p>这三个标签对标SQL语句的DML语句</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>parameterMap</code></td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>该标签用来定义sql片段，一般用来定义一些可复用的SQL语句片段，使用include标签以在其他语句中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;userColumns&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;alias&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>如果传入一个复杂的对象，行为就会有点不一样了。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  insert into users (id, username, password)</span><br><span class="line">  values (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JDBC 要求，如果一个列允许使用 null 值，并且可能会使用值为 null 的参数，就必须要指定 JDBC 类型（jdbcType)</strong></p><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>默认情况下，使用#{}获取参数的值的时候，mybatis会创建一个PreparedStatement对象，通过预编译，生成与#{}出现次数相同的占位符（即 ? ）这样更安全并且更迅速。</p><p>但是有时候想直接在SQL语句中插入一个字符串，不需要转义此字符串（即不需要占位符），比如ORDER BY语句，这时候可以使用${}语句，这样的话，mybatis就不会转义该字符串了</p><p>当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。</p><blockquote><p>举个栗子，如果你想 <code>select</code> 一个表任意一列的数据时，不需要这样写：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByEmail</span><span class="params">(<span class="meta">@Param(&quot;email&quot;)</span> String email)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它的 &quot;findByXxx&quot; 方法</span></span><br></pre></td></tr></table></figure><p>而是可以只写这样一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, <span class="meta">@Param(&quot;value&quot;)</span> String value)</span></span>;</span><br></pre></td></tr></table></figure><p>其中 <code>$&#123;column&#125;</code> 会被直接替换，而 <code>#&#123;value&#125;</code> 会使用 <code>?</code> 预处理。 这样，就能完成同样的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User userOfId1 = userMapper.findByColumn(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">User userOfNameKid = userMapper.findByColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kid&quot;</span>);</span><br><span class="line">User userOfEmail = userMapper.findByColumn(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;noone@nowhere.com&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h4><p>可以自定义一些复杂的返回值对象</p><h5 id="简单结果集映射"><a href="#简单结果集映射" class="headerlink" title="简单结果集映射"></a>简单结果集映射</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Alias(&quot;aliasStudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select student_id,student_name,student_tid from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;student_tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="高级结果集映射"><a href="#高级结果集映射" class="headerlink" title="高级结果集映射"></a>高级结果集映射</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap的子标签</p><ul><li><p><code>constructor</code></p><p>用于在实例化类时，注入结果到构造方法中</p><ul><li><code>idArg</code> - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能</li><li><code>arg</code> - 将被注入到构造方法的一个普通结果</li></ul></li><li><p><code>id</code> – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能</p></li><li><p><code>result</code> – 注入到字段或 JavaBean 属性的普通结果</p></li><li><p><code>association</code></p><p>一个复杂类型的关联,许多结果将包装成这种类型</p><ul><li>嵌套结果映射 – 关联可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li><li><p><code>collection</code></p><p>一个复杂类型的集合</p><ul><li>嵌套结果映射 – 集合可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li></ul><h6 id="constructor"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><p>有些情况下，你会使用一个不可变类，即那些很少改变或者基本不变的类，即可以使用构造方法注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="id-amp-result"><a href="#id-amp-result" class="headerlink" title="id &amp; result"></a>id &amp; result</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;post_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">column</span>=<span class="string">&quot;post_subject&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这些元素是结果映射的基础。</p><p><em>id</em> 和 <em>result</em> 元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。</p><p>这两者之间的唯一不同是，<em>id</em> 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。</p><p> 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。</p><p>两个元素都有一些属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>property</code></td><td align="left">映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。</td></tr><tr><td align="left"><code>column</code></td><td align="left">数据库中的列名，或者是列的别名。</td></tr><tr><td align="left"><code>javaType</code></td><td align="left">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td></tr><tr><td align="left"><code>jdbcType</code></td><td align="left">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。</td></tr></tbody></table><blockquote><p>jdbcType支持的 JDBC 类型</p></blockquote><p>为了以后可能的使用场景，MyBatis 通过内置的 jdbcType 枚举类型支持下面的 JDBC 类型。</p><table><thead><tr><th><code>BIT</code></th><th><code>FLOAT</code></th><th><code>CHAR</code></th><th><code>TIMESTAMP</code></th><th><code>OTHER</code></th><th><code>UNDEFINED</code></th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td><code>REAL</code></td><td><code>VARCHAR</code></td><td><code>BINARY</code></td><td><code>BLOB</code></td><td><code>NVARCHAR</code></td></tr><tr><td><code>SMALLINT</code></td><td><code>DOUBLE</code></td><td><code>LONGVARCHAR</code></td><td><code>VARBINARY</code></td><td><code>CLOB</code></td><td><code>NCHAR</code></td></tr><tr><td><code>INTEGER</code></td><td><code>NUMERIC</code></td><td><code>DATE</code></td><td><code>LONGVARBINARY</code></td><td><code>BOOLEAN</code></td><td><code>NCLOB</code></td></tr><tr><td><code>BIGINT</code></td><td><code>DECIMAL</code></td><td><code>TIME</code></td><td><code>NULL</code></td><td><code>CURSOR</code></td><td><code>ARRAY</code></td></tr></tbody></table><h5 id="association"><a href="#association" class="headerlink" title="association"></a>association</h5><p>该标签处理一个对象聚合另一个对象的关系。</p><p>mybatis有两种不同方式去加载关联</p><ol><li>嵌套select查询：通过另一个SQL语句去加载复杂对象</li><li>嵌套结果查询：通过连接查询直接将所有的结果查询出来，放在一张表里面</li></ol><h6 id="嵌套select查询不推荐"><a href="#嵌套select查询（不推荐）" class="headerlink" title="嵌套select查询（不推荐）"></a>嵌套select查询（不推荐）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacherById&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMap&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：SQL语句写起来方便</p><p>缺点：多层SQL嵌套，不易于维护，使用了mybatis的相关插件会导致select语句爆红，看起来不舒服</p><p>对于大型数据上，这里有一个“N+1查询问题”，问题描述如下</p><ul><li>执行了一个单独的SQL语句去加载每一条记录的详细信息（就是+1）</li><li>对返回的列表的每一条记录，都需要执行这样的一个单独的SQL语句去加载详细信息（就是N）</li></ul><p>这样会导致运行成千上万条sql语句，大大增加系统开销，这是我们不希望看到的</p><h6 id="嵌套结果查询推荐"><a href="#嵌套结果查询（推荐）" class="headerlink" title="嵌套结果查询（推荐）"></a>嵌套结果查询（推荐）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;_int&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    s.id sid, s.name sname, tid, t.name tname</span><br><span class="line">    from student s inner join teacher t</span><br><span class="line">    on s.id = #&#123;id&#125; and tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：配置resultMap十分方便，逻辑十分清楚，方便查错和维护</p><p>缺点：连接查询的SQL语句写起来难度大，</p><h5 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h5><p>collection可以说是多个类型的关联，所以与association的处理十分相似</p><h6 id="嵌套select查询"><a href="#嵌套select查询" class="headerlink" title="嵌套select查询"></a>嵌套select查询</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>  <span class="attr">select</span>=<span class="string">&quot;getStudentsByTid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsByTid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM teacher WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：<em>这里需要使用ofType来指定集合的泛型</em></p><h6 id="嵌套结果查询"><a href="#嵌套结果查询" class="headerlink" title="嵌套结果查询"></a>嵌套结果查询</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    t.name tname,t.id tid,s.id sid, s.name sname</span><br><span class="line">    FROM teacher t inner join student s on t.id=#&#123;id&#125; and s.tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>首先我们先来看一下到底什么是缓存？</p><p>缓存这个词，相信大家对其不会陌生，因为我们在b站，腾讯视频这一类视频APP中都会缓存过一些视频。</p><p>那我们可以从中归纳出，缓存就是程序以某种形式将数据保存下来，方便下一次的使用。</p><p>那我们为什么需要使用缓存呢？</p><p>我们都知道，我们程序员要追求三高，当然不会是高血脂，高血糖，高血压。我们所说的三高是高并发，高可用，高性能。众所周知，对于数据库的操作是比较消耗资源的。因此，多次连接数据库不利于我们达到三高，那么缓存就是会帮助我们达到三高的一种技术。</p><p>我们将用户经常查询，并且很少发生改变的数据放入缓存中，当用户下一次查询同样的数据时，就不用再去连接数据库查询数据了，减少了访问数据库的次数，减少了系统开销，从而提高了性能。</p><hr><p>在mybatis中，存在着两种缓存机制：一级缓存和二级缓存</p><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>该级别的缓存，mybatis是默认开启的，并且无法关闭。</p><p>该缓存是sqlSession级别的，也就是说作用域和我们之前谈过的sqlSession的作用域一致</p><p>因为用户大部分操作都是查询，但是如果出现了DML语句（即增删改）的时候，可能会对缓存中的数据造成了修改，为了安全起见，当发生增删改操作的时候，一级缓存即刻失效。</p><p>当然我们也可以手动清理缓存</p><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>该级别的缓存，是默认关闭的，需手动打开</p><ol><li>在mapper映射器文件中，添加以下一行代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">//或者加一些配置</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在mybatis-config.xml文件中</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//可能有的小伙伴会说，该设置默认就是true，不需要写这一行代码</span><br><span class="line">//但是，为了显式说明我们开启了二级缓存，最好还是标注出来</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：如果在cache标签中没有加入readOnly=“true”，则需要将模型类实现序列化接口（Serializable）</p></blockquote><p>该缓存是namespace级别的，也就是和应用程序的生命周期一致</p><hr><p>附上一张关于mybatis的原理图，仅供参考</p><img src="/2022/01/27/MyBatis%E6%98%A0%E5%B0%84%E5%99%A8%E6%96%87%E4%BB%B6/mybatis%E5%8E%9F%E7%90%86%E5%9B%BE.png" class title="mybatis原理图">]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-aop</title>
      <link href="/2022/01/27/Spring-aop/"/>
      <url>/2022/01/27/Spring-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="aop"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP为Aspect Oriented Programming的缩写，意思是面向切面编程，是通过预编译和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>Spring框架两大重点，AOP和IOC(Inversion Of Control)控制反转</p><p>AOP是OOP的延续,是软件开发中的一个热点, 也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行解耦合,从而使得业务逻辑各部分之间的耦合度降低,提高程序的可重用性，同时提高了开发的效率。</p><blockquote><p>作用及优势</p></blockquote><ul><li>作用：在程序运行期间，在不修改源码的情况下进行功能增强</li><li>优势：减少代码重复性，提高开发效率，并且便于维护</li></ul><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>实际上，AOP的底层是通过Spring提供的的动态代理技术实现的。</p><p>在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><blockquote><p>常用代理技术</p></blockquote><ul><li>JDK代理：基于接口的动态代理技术</li></ul><img src="/2022/01/27/Spring-aop/JDK%E4%BB%A3%E7%90%86.png" class title="JDK代理"><p>Adivce.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TargetInterface.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;saving running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Target = <span class="keyword">new</span> Target();</span><br><span class="line">        <span class="keyword">final</span> Adivice = <span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">        target.getClass().getClassLoader(),</span><br><span class="line">           target.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandle()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    advice.before();</span><br><span class="line">                    Object invoke = method.invoke(target,args);</span><br><span class="line">                    advice.after();</span><br><span class="line">                    <span class="keyword">return</span> invoke;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cglib代理：基于父类的动态代理技术</li></ul><img src="/2022/01/27/Spring-aop/cglib%E4%BB%A3%E7%90%86.png" class title="cglib代理"><p>ProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Target();</span><br><span class="line">        Enhance enhance = <span class="keyword">new</span> Enhance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强其</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置父类</span></span><br><span class="line">        enhancer.setSuperclass(Target.class);</span><br><span class="line">        <span class="comment">//设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                enhance.before();</span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                enhance.after();</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        Target proxy = (Target) enhancer.create();</span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="aop相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h3><p>Spring的AOP实现底层就是对上面的动态代理的代码进行了封装,封装后我们只需要对需要关注的部分进行代码编写,并通过配置的方式完成指定目标的方法增强。</p><ul><li><p>Target (目标对象) :代理的目标对象</p></li><li><p>Proxy (代理) :一个类被AOP织入增强后,就产生一 个结果代理类</p></li><li><p>Joinpoint (连接点) :所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</p></li><li><p>Pointcut (切入点) :所谓切入点是指我们要对哪些Joinpoint进行拦截的定义</p></li><li><p>Advice (通知/增強) :所谓通知是指拦截到Joinpoint之后所要做的事情就是通知</p></li><li><p>Aspect (切面) :是切入点和通知(引介)的结合</p></li><li><p>Weaving (织入) :是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入,而Aspect采用编译期织入和类装载期织入</p></li></ul><h3 id="开发明确事项"><a href="#开发明确事项" class="headerlink" title="开发明确事项"></a>开发明确事项</h3><blockquote><p>需要编写的内容</p></blockquote><ul><li><p>编写核心业务代码(目标类的目标方法)</p></li><li><p>编写切面类,切面类中有通知(增强功能方法)</p></li><li><p>在配置文件中，配置织入关系,即将哪些通知与哪些连接点进行结合</p></li></ul><blockquote><p>AOP技术实现的内容</p></blockquote><p>Spring框架监控切入点方法的执行。</p><p>一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置,将通知对应的功能织入，完成完整的代码逻辑运行。</p><h3 id="基于xml的aop开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h3><blockquote><p>步骤</p></blockquote><ol><li>导入AOP坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建目标类和目标接口</li></ol><ol start="3"><li>创建切面类（内部有增强方法）</li></ol><ol start="4"><li>将目标类和切面类的对象的创建权交给Spring</li></ol><ol start="5"><li>在applicationContext.xml中配置中织入关系</li></ol><ol start="6"><li>测试</li></ol><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符]返回值类型 包名.类名.方法名(参数列表))</span><br></pre></td></tr></table></figure><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、 包名、类名、方法名可以使用星号*代表任意</p></li><li><p>包名与类名之间一 个点.代表当前包下的类,两个点.. 表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点 .. 表示任意个数,任意类型的参数列表</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//代表切口是com.lizhi.aop.Target类的返回void的method的无参数方法</span><br><span class="line">execution (public void com.itheima.aop.Target.method() )</span><br><span class="line"></span><br><span class="line">//代表切口是com.lizhi.aop.Target类的返回void的所有方法，参数个数为任意</span><br><span class="line">execution (void com.itheima.aop.Target.*(.. ))</span><br><span class="line"></span><br><span class="line">//代表切口是com.lizhi.aop包下的所有类的所有方法，参数个数为任意</span><br><span class="line">execution(* com.lizhi.aop.*.*(..))</span><br><span class="line"></span><br><span class="line">//代表切口是com.lizhi.aop包及其子包下的所有类所有方法，参数个数为任意</span><br><span class="line">execution(* com.lizhi.aop..*.* (..) )</span><br><span class="line"></span><br><span class="line">//代表切口是项目下的所有包的所有方法，参数为任意参数</span><br><span class="line">execution(* *..*.*(..) )</span><br></pre></td></tr></table></figure><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><table><thead><tr><th>名称</th><th>通知类型</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>aop:before</td><td>指定增强的方法在切入点之前执行</td></tr><tr><td>后置通知</td><td>aop:after-returning</td><td>指定增强的方法在切入点之后执行</td></tr><tr><td>环绕通知</td><td>aop:around</td><td>指定增强的方法在切入点之前和之后都会执行</td></tr><tr><td>异常抛出通知</td><td>aop:throwing</td><td>指定增强的方法在出现切点异常时执行</td></tr><tr><td>最终通知</td><td>aop:after</td><td>无论增强方式执行是否有异常都会执行</td></tr></tbody></table><blockquote><p>around</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ProceedingJoinPoint指的是正在执行的连接点==切点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕前增强。。。。。&quot;</span>);</span><br><span class="line">    Object obj = pjp.proceed();<span class="comment">//切点方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕后增强。。。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切点表达式的抽取</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">apo:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">apo:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;excution( * com.lizhi.apo.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">apo:pointcut</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">apo:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">apo:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">apo:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解的aop开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h3><ol><li>创建目标接口和目标类(内部有切点)</li><li>创建切面类(内部有增强方法)</li><li>将目标类和切面类的对象创建权交给spring</li><li>在切面类中使用注解配置织入关系</li><li>在配置文件中开启组件扫描和AOP的自动代理</li><li>测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程</title>
      <link href="/2022/01/27/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/01/27/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="面向接口编程是什么"><a href="#面向接口编程是什么" class="headerlink" title="面向接口编程是什么"></a>面向接口编程是什么</h2><p>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</p><p>根本原因:解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</p><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的对系统设计人员来讲就不那么重要了:</p><p>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><h2 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h2><p>接口从更深层次的理解，应是定义(规范，约束)与实现(名实分离的原则)的分离。</p><p>接口的本身反映了系统设计人员对系统的抽象理解。接口应有两类:</p><p>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class) </p><p>第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface)</p><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><h2 id="三个面向的区别"><a href="#三个面向的区别" class="headerlink" title="三个面向的区别"></a>三个面向的区别</h2><p>面向对象编程指的是，我们考虑问题的时候，以对象为单位，考虑它的属性和方法</p><p>面向过程编程指的是，我们考虑问题的时候，以一个具体的流程（事务过程）为单位，考虑它的实现</p><p>接口设计与非接口设计是针对复用技术层面的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构</p>]]></content>
      
      
      <categories>
          
          <category> 琐碎的知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐碎的知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis的xml配置</title>
      <link href="/2022/01/26/MyBatis%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/26/MyBatis%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="配置configuration"><a href="#配置Configuration" class="headerlink" title="配置Configuration"></a>配置Configuration</h2><p>在MyBatis中，配置文件的顶层结构如下</p><ul><li>Configuration<ul><li><strong>properties</strong></li><li><strong>settings</strong></li><li><strong>typeAliases</strong></li><li>typeHandlers</li><li>objectFactory</li><li>plugins</li><li><strong>environments</strong><ul><li>environment<ul><li>dataSource</li><li>transactionManager</li></ul></li></ul></li><li>databaseIdProvider</li><li><strong>mappers</strong></li></ul></li></ul><h3 id="属性properties"><a href="#属性properties" class="headerlink" title="属性properties"></a>属性properties</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resource属性可以导入在外部properties配置文件中的属性到properties标签中</p><p>property标签可以定义一些属性</p><p>配置好的属性可以在该文件中使用${}来替换需要动态配置的属性值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如上方的driver的值会由db.properties文件中对应的值来替换</p><p>如果在多个地方进行了配置Java代码，外部文件，properties标签，则按照以下顺序加载</p><ul><li>先加载properties标签中的属性</li><li>再加载外部文件中配置的属性，如果有重复的属性，则覆盖旧的属性</li><li>最后加载Java代码中的属性，如果有重复的属性，覆盖旧的属性</li></ul><p>因此，通过java方法传入的属性具有最高的优先级，外部文件优先级次之，properties标签中的属性优先级最为低</p><h3 id="设置settings"><a href="#设置settings" class="headerlink" title="设置settings"></a>设置settings</h3><p>以下为重要的几个配置，需要掌握</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J(deprecated since 3.5.9) | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><h3 id="类型别名typealiases"><a href="#类型别名typeAliases" class="headerlink" title="类型别名typeAliases"></a>类型别名typeAliases</h3><p>在映射器XML文件中，resultType属性在配置了类型别名后，可以不需要写全限定名，可以写在这里起的别名</p><ol><li>在此包下的所有类都被默认起别名为类名开头小写，该默认值被注解@Alias()覆盖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.lizhi.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可以单独为一个类起别名，</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;teacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面为一些常见的java类型内建的类型别名</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>map</td><td>Map</td></tr></tbody></table><h3 id="环境配置environments"><a href="#环境配置Environments" class="headerlink" title="环境配置Environments"></a>环境配置Environments</h3><p>mybatis可以配置多套环境，这种机制有利于将SQL映射应用于多种数据库之中。开发，测试，生成环境需要有不同的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意一些关键点</p><ul><li>environment的id属性，该属性是唯一性标识环境的值</li><li>在environments的default属性中通过id指定环境配置</li></ul><h4 id="事务管理器transactionmanager"><a href="#事务管理器transactionManager" class="headerlink" title="事务管理器transactionManager"></a>事务管理器transactionManager</h4><p>type指定事务管理器</p><p>mybatis中有两种事务管理器（也就是type = “JDBC|MANAGED”）</p><ul><li>JDBC-这个配置直接使用了JDBC的提交和回滚机制，依赖于数据源的连接来管理事务管理作用域</li><li>MANAGED-这个配置几乎什么都不做，一般不选用</li></ul><blockquote><p>如果使用mybatis+Spring 则没有必要配置事务管理器，因为Spring模块会使用自带的事务管理器来覆盖此配置</p></blockquote><h4 id="数据源datasource"><a href="#数据源dataSource" class="headerlink" title="数据源dataSource"></a>数据源dataSource</h4><p>type指定数据源类型</p><p>dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源</p><p>有三种内置的数据源格式</p><h5 id="unpooled"><a href="#UNPOOLED" class="headerlink" title="UNPOOLED"></a>UNPOOLED</h5><p>这个数据源的实现每次连接会打开和关闭连接会有点慢，但是对于一些小型应用已经足够了，</p><p>此类型的数据源只需要配置以下几种属性</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li><code>url</code> – 这是数据库的 JDBC URL 地址。</li><li><code>username</code> – 登录数据库的用户名。</li><li><code>password</code> – 登录数据库的密码。</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）</li></ul><hr><h5 id="pooled"><a href="#POOLED" class="headerlink" title="POOLED"></a>POOLED</h5><p>这个数据源的实现利用了池的概念将JDBC的连接对象组织起来，避免了创建新的连接实例的时候所必需的初始化和认证时间，可以使web应用响应速度变快，该类型的数据源除了以上UNPOOLED的属性外还有以下常用配置</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li></ul><h5 id="jndi用得少略"><a href="#JNDI-用得少，略" class="headerlink" title="JNDI(用得少，略)"></a>JNDI(用得少，略)</h5>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门</title>
      <link href="/2022/01/26/MyBatis%E5%85%A5%E9%97%A8/"/>
      <url>/2022/01/26/MyBatis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="回顾jdbc"><a href="#回顾JDBC" class="headerlink" title="回顾JDBC"></a>回顾JDBC</h2><ol><li>注册驱动</li><li>获取连接</li><li>获取数据库操作对象</li><li>执行SQL，操作数据库</li><li>处理结果集</li><li>关闭连接</li></ol><p>Connection可以获得PreparedStatement或者Statement</p><p>ResultSet是SQL语句执行后返回的对象</p><p>PreparedStatement和Statement是用来执行SQL语句的对象</p><p>两者的区别：</p><p>PreparedStatement对SQL语句做了预编译，很好的解决了SQL注入的问题。</p><p>Statement是单纯的对字符串进行拼接，会产生SQL注入的问题</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Def： MyBatis是一个优秀的持久层的框架，支持定制化SQL语句，存储过程以及高级映射，大大简化了JDBC的笨重的代码。</p><p>MyBatis可以使用XML配置文件或者注解的方式来配置和映射原生类型、接口和pojo（Plain Object Java Object）</p><p>持久层是什么？持久层是一个将应用中产生的数据保存到数据库的过程</p><p>思路：导入依赖—》编写代码—》测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>MyBatis中最重要的三个类</p><ol><li>SqlSessionFactoryBuilder</li><li>SqlSessionFactory</li><li>SqlSession</li></ol><p>每个基于MyBatis的应用都是以一个SqlSessionFactory实例为核心的。这个实例需要通过SqlSessionFactoryBuilder加载配置文件获得。这个配置文件可以通过两种方式获得，第一种是以XML文件的形式存在，第二种是在java代码对象的形式存在</p><h3 id="构建sqlsessionfactory"><a href="#构建SqlSessionFactory" class="headerlink" title="构建SqlSessionFactory"></a>构建SqlSessionFactory</h3><blockquote><p>mybatis-config.xml配置构建SqlSessionFactory所需要的参数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在java中加载配置文件，通过SqlSessionFactoryBuilder构建SqlSessionFactory实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><blockquote><p>通过java代码配置不推荐，略</p></blockquote><h3 id="构建sqlsession"><a href="#构建SqlSession" class="headerlink" title="构建SqlSession"></a>构建SqlSession</h3><p>SqlSession，通过此对象获得接口的映射器实例，该映射对象对标JDBC中接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启一个sqlSession对象，默认关闭自动提交事务</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//开启自动提交事务</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br></pre></td></tr></table></figure><h3 id="映射sql语句"><a href="#映射SQL语句" class="headerlink" title="映射SQL语句"></a>映射SQL语句</h3><blockquote><p>通过XML配置文件的方式和接口做绑定，实现接口方法</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lizhi.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listTeachers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lizhi.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mapper标签的namespace属性指向被绑定的接口</li><li>标签内书写SQL语句，id为接口中的方法名<ul><li>select标签实现select方法</li><li>insert标签实现insert方法</li><li>update标签实现update方法</li><li>delete标签实现delete方法</li></ul></li></ul><blockquote><p>通过注解的方式实现SQL映射</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM teacher WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">Teacher <span class="title">getTeacherById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>选择何种方式实现SQL映射，取决于自身。</p><p>但是如果SQL复杂的情况下，尽量不要使用注解开发，使用XML的方式去做SQL映射</p><h3 id="三个对象的作用域scope"><a href="#三个对象的作用域（Scope）" class="headerlink" title="三个对象的作用域（Scope）"></a>三个对象的作用域（Scope）</h3><ul><li>SqlSessionFactoryBuilder</li></ul><p>该对象就一个作用，通过读取一些配置获取SqlSessionFactory实例对象。</p><p>我们没有理由一直保留它，因为SqlSessionFactory将被保存在全局作用域中，以保证所有的XML解析资源可以被释放给做其他事情，所以它的作用域应该是局部变量</p><ul><li>SqlSession</li></ul><p>该对象就一个作用，通过getMapper方法获取映射器实例。</p><p>每个线程都应该有它自己的SqlSession对象，因为该对象不是线程安全的，因此它是不能被共享的，所以它的最佳作用域是局部变量。</p><p>在web框架中，可以将其放到request的作用域中，返回一个响应前，关闭SqlSession对象，这个关闭操作很重要</p><ul><li>SqlSessionFactory</li></ul><p>该对象就一个作用，通过openSession方法获取SqlSession对象。</p><p>因为SqlSession对象是线程不安全的，所以每次查询数据库都需要一个新的SqlSession对象，既然SqlSessionFactoryBuilder的作用域为局部变量，那么在我们第一次创建出来SqlSessionFactory对象的时候，就可以将其保存在全局作用域中，下次就不需要再创建SqlSessionFactoryBuilder对象了，所以SqlSessionFactory的最佳作用域是全局唯一变量。</p>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/01/26/Maven/"/>
      <url>/2022/01/26/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>学maven首先记住一句话，<strong>约定大于配置</strong></p><h4 id="maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h4><ul><li><strong>本质</strong>是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（pom）</li><li>POM(Project Object Model)：项目对象模型</li><li>pom.xml—&gt;项目管理模型——&gt;依赖管理（Dependency）—&gt;本地仓库—&gt;私服仓库—&gt;中央</li></ul><img src="/2022/01/26/Maven/maven%E6%A6%82%E8%BF%B0%E5%9B%BE.png" class title="maven概述图"><h4 id="maven有什么用"><a href="#Maven有什么用" class="headerlink" title="Maven有什么用"></a>Maven有什么用</h4><ul><li><strong>项目构建</strong>：提供标准化，跨平台的自动化项目构建方式</li><li><strong>依赖管理</strong>：方便快捷的管理项目依赖的资源包，避免资源间的版本冲突问题</li><li><strong>统一开发结构</strong>：提供标准的，统一的项目结构</li></ul><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><ul><li><strong>官网</strong>：<a href="http://maven.apache.org/">http://maven.apache.org/</a></li><li><strong>下载地址</strong>：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></li></ul><h4 id="maven环境配置"><a href="#Maven环境配置" class="headerlink" title="Maven环境配置"></a>Maven环境配置</h4><ul><li>依赖java，所以需要JAVA_HOME</li><li>设置Maven自身的运行环境，需要配置MAVEN_HOME</li></ul><h3 id="maven基础概要"><a href="#Maven基础概要" class="headerlink" title="Maven基础概要"></a>Maven基础概要</h3><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><p><strong>仓库</strong>：用于存储资源，包含各种jar包</p><img src="/2022/01/26/Maven/%E4%BB%93%E5%BA%93.png" class title="仓库"><ul><li>仓库分类<ul><li><strong>本地仓库</strong>：自己电脑上的存储资源的仓库，连接远程仓库获取资源</li><li><strong>远程仓库</strong>：非本机上的仓库，为本地仓库提供资源<ul><li><strong>中央仓库</strong>：由Maven团队维护，存储所有开源资源的仓库</li><li><strong>私服</strong>：部门/公司范围内存储资源的仓库，从中央仓库中获取资源</li></ul></li></ul></li><li>私服的作用<ul><li>保护具有版权的资源，包含购买或者自主研发的jar<ul><li>中央仓库中的jar都是开源的，不能存储具有版权的资源</li></ul></li><li>一定范围内共享资源，就对内开放，不对外开放</li></ul></li></ul><h4 id="坐标gav"><a href="#坐标GAV" class="headerlink" title="坐标GAV"></a>坐标GAV</h4><ul><li><p><strong>坐标</strong>：Maven中的坐标主要用于描述仓库中资源的位置，记住这个网站</p><ul><li><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></li></ul></li><li><p>Maven主要组成部分</p><ul><li><strong>groupId</strong>：定义当前项目隶属的组织名称（通常是域名反写 org.mybatis）</li><li><strong>artifactId</strong>：定义该项目的项目名称（通常是模块名称）</li><li><strong>version</strong>：定义当前项目的版本号</li><li><strong>packaging</strong>：定义该项目的打包方式</li></ul></li><li><p><strong>作用</strong>：使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p></li></ul><h4 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h4><p>maven默认的本地仓库目录在c盘用户文件夹下的.m2文件夹中，如有需要，可在配置文件中自行配置。</p><p>在这里举个例子，我需要将D:\APP\Maven\mvn-repo该目录作为我的maven本地仓库的路径。</p><ol><li>创建mvn-repo文件夹，在此文件夹中创建repository目录</li><li>在maven安装根目录下的config文件夹下找到settings.xml找到以下配置所在，照着以下配置修改</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//这里改成自己需要配置的仓库目录</span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\APP\Maven\mvn-repo\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//阿里云的镜像服务器，会加快jar包的下载速度，直接复制即可</span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将此份配置文件保存并复制到mvn-repo文件夹中</li></ol><blockquote><p>全局setting（maven的config中的setting文件）和用户setting（尽量和全局setting一样）区别</p><ul><li>全局setting定义了当前计算机中Maven的公共配置</li><li>用户setting定义了当前用户的配置</li></ul></blockquote><h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><h4 id="手工"><a href="#手工" class="headerlink" title="手工"></a>手工</h4><p>普通maven工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br><span class="line">-DgroupId = com.lizhi</span><br><span class="line">-DartifactId = project</span><br><span class="line">-DarchetypeArtifactId = maven-archetype-quickstart</span><br><span class="line">-Dversion = 0.0.1-snapshot</span><br><span class="line">-DinteractiveMode = false</span><br></pre></td></tr></table></figure><p>web工程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br><span class="line">-DgroupId = com.lizhi</span><br><span class="line">-DartifactId = project</span><br><span class="line">-DarchetypeArtifactId = maven-archetype-webapp</span><br><span class="line">-Dversion = 0.0.1-snapshot </span><br><span class="line">-DinteractiveMode = false</span><br></pre></td></tr></table></figure><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置当前项目所需要的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置具体的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖所属的群组id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖所属的项目id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖的版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>依赖具有传递性</p><ul><li><strong>直接传递</strong>：在当前项目中，通过依赖配置建立的依赖关系</li><li><strong>间接关系</strong>：被依赖的资源如果依赖其他的资源，当前项目间接依赖其他项目</li></ul><blockquote><p>依赖冲突</p><ul><li>路径优先：当依赖中出现相同的资源时，层次越深，优先级越低，层次越浅，优先级越高</li><li>声明优先：当资源在相同层次被依赖时，配置顺序靠前的覆盖顺序靠后的</li><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul></blockquote><h4 id="可选依赖主动表示断开"><a href="#可选依赖（主动表示断开）" class="headerlink" title="可选依赖（主动表示断开）"></a>可选依赖（主动表示断开）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不透明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="排除依赖主动断开"><a href="#排除依赖（主动断开）" class="headerlink" title="排除依赖（主动断开）"></a>排除依赖（主动断开）</h4><blockquote><p>排除依赖指的是主动断开依赖的资源，被排除的资源无需指定版本—不需要</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;/dependencies</span><br></pre></td></tr></table></figure><ul><li>依赖的jar包默认情况下可以在任何地方使用，可以通过scope标签设定起作用范围</li><li>作用范围<ul><li>主程序范围有效（main文件范围内）</li><li>测试范围有效（test文件夹范围）</li><li>是否参与打包（package指令范围内）</li></ul></li></ul><table><thead><tr><th>scope</th><th>主代码</th><th>测试代码</th><th>打包</th><th>示例</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td></td><td>Y</td><td></td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td></td><td>servlet-api</td></tr><tr><td>runtime</td><td></td><td></td><td>Y</td><td>jdbc</td></tr></tbody></table><blockquote><p>依赖范围的传递性</p></blockquote><ul><li>带有依赖范围的资源在进行传递的时候，作用范围将会受到影响</li></ul><table><thead><tr><th>行是直接依赖，列是间接依赖</th><th>compile</th><th>test</th><th>provided</th><th>runtime</th></tr></thead><tbody><tr><td>compile</td><td>compile</td><td>test</td><td>provided</td><td>runtime</td></tr><tr><td>test</td><td></td><td></td><td></td><td></td></tr><tr><td>provided</td><td></td><td></td><td></td><td></td></tr><tr><td>runtime</td><td>runtime</td><td>test</td><td>provided</td><td>runtime</td></tr></tbody></table><h3 id="生命周期以及插件"><a href="#生命周期以及插件" class="headerlink" title="生命周期以及插件"></a>生命周期以及插件</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>Maven对项目构建的生命周期划分为3套<ul><li>clean：清理工作</li><li>default：核心工作，例如编译、测试、打包、部署等</li><li>site：产生报告，发布站点等</li></ul></li></ul><blockquote><p>clean生命周期</p></blockquote><ul><li>pre-clean          执行一些需要在clean之前立即完成的工作</li><li>clean                  移除所有上一次构件生成的文件</li><li>post-clean         执行一些需要在clean之后立即完成的工作</li></ul><blockquote><p>default生命周期</p></blockquote><img src="/2022/01/26/Maven/default%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class title="default生命周期"><blockquote><p>site生命周期</p></blockquote><ul><li>pre-site                        执行一些需要在生成站点文档之前完成的工作  </li><li>site                                生成站点文档</li><li>post-site                      执行一些需要在生成站点文档之后完成的工作，并且为部署做准备工作</li><li>site-deploy                 将生成的站点文档部署到特定服务器上面去</li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认maven在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaEE </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2022/01/16/first/"/>
      <url>/2022/01/16/first/</url>
      
        <content type="html"><![CDATA[<p>测试博客的发布</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
